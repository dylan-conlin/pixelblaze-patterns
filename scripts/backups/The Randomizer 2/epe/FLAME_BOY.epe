{
  "name": "FLAME_BOY",
  "id": "j3mjsLTES8pkwD5x4",
  "sources": {
    "main": "/*\n Lava/Surface of the Sun pattern for Lux Lavalier (but also works\n fine on other 2D Pixelblaze displays!)\n \n Uses multiple layers of perlin fbm to create a swirling lava \n effect.  \n \n MIT License\n \n Take this code and make cool things!\n \n 12/15/2022 ZRanger1\n*/\n\nexport var lineWidth = 1;\nexport var fill = 0;\nexport var speed = 0.04;\nexport var frequency = 1;\n\n\n// controls wave movement speed\nexport function sliderSpeed(v) {\n  speed = 0.01 + v*v;\n}\n\n// returns fbm noise value scaled to the range we need\nfunction fbm(x,y) {\n  return 0.5+0.5*perlinFbm(x,y,PI,1.5,0.5,2);\n}\n\n// create two noise fields, and use a third to mix them together.\n// (this is \"normal\" in shader land, but probably overkill here)\nfunction pattern(px,py) {\n  qx = fbm(px + t1 * .2,py + t1 * .2 + 0.4);\n  qy = fbm(px + t1 * .3 + 2.4, py + t1 * 0.3 + 4.8);\n  \n  rx = fbm(qx - t1 * .3 + 4. * qx + 3,qy - t1 * .3 + 4. * qy + 9);\n  ry = fbm(qx + t1 * .2 + 8. * qx + 2.4,qy + t1 * .3 + 4. * qy + 9);\n  return fbm(px + rx * 2. - t1 * .09,py + ry * 2. - t1 * .09);\n}\n\nfunction quantize(c, low, hi) {\n  c = c - low;\n  return c*c*c/(hi-low); \n}\n\nvar timebase = 0;\nvar t1;\nexport function beforeRender(delta) {\n  timebase = (timebase + delta / 1000)  % 3600;\n  t1 = timebase * speed;\n}\n\ntranslate (-0.5,-0.5)\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\nexport function render2D(index, x, y) {\n  var f = pattern(x,y);\n  \n  r = quantize(f,0,0.35);\n  g = quantize(f,0.3,0.55);\n  b = quantize(f,0.5,0.8);\n\n  rgb(r,g,b)\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCACWAGQDASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAABAUABgECAwcI/8QATRAAAQIDBQEJCgkKBwEAAAAAAQACAwQFBhE1c7KxITRBcXJ0s8HCEiUxM1FhY4KhohMiIyQmNmKD0RQVMkRSZHWBkqMHQkVUZYSR4f/EABoBAAIDAQEAAAAAAAAAAAAAAAQFAgMGAQD/xAAvEQACAAMECgICAgMAAAAAAAAAAQIDcTEyM7EEESFBQlGBwdHwI0M0kRJhEyJS/9oADAMBAAIRAxEAPwD4bnDc+HwfH61SrZblWdkjaVcai748IX/5+sKnWzxZ2SNpWP0LEVDasSzw3hlHW5daebmvyYmkrnPbgkMs63Lenn4sTJfpKdu57zKYb8XvI9IpuHMyoGhqDtLg07zdnSNRlNw5uVA0NQdpcGnebM1tWcg/IVfBY7CpzWCzeaNITL/D83Ga87mdaWzW7RJrOGkJhYLcE0ftM600nbdHjr4OLbGbWzHxoXJibEDNXmmyp/d3dSPtn+lC5MTYgZrC5Tm7+pck4cvr3LBdToJfKVAgi4QR4eVf1KN+r8TPOwLtSR8xqeSOtcBgMUeSP1BGa9cTqsih2fss9jwDRxf+2epRbWNF9GGY7qUSLSH8sVS6HXqQ2qpujy95u+U6wqjbI31Z2SFZ6466ZlQTdfFbrCq9sMVdkhE6Ev8AeF/0zrsE8/4uRP2CPfculP8A0H5L9hXOe8TI8k6itpDxb8p+wpy7nvMHhxH7yPS6bh7cqBoahLS7tHnObN1tRlP3gMqDoag7SHvPO82bras3B+R1LnYVCbd3kiuHgdGGgFNLCsIhTLuAxGj/AMH/ANSmbwA546MJvYg3SsXOGlNJ2yRFU49kaN7YtDokIH9iKfdS2ZwqUyH9Sa2xHx4XIjaEnnMIksp20KOj7ZcHvMsti1HKj7wquQOtCjA42f1I2iNBp1WPkgDrQV3eSLn9SLV91WSKN3RlrsduUVvne5RSyAvorOW5RI5+LFUuhsQRaF3z+nj94G1V62A76OygnlpHXVGQ8vww2pNbFoE/3XCWXexqN0TZFBR5nnYIp3xEnxHUVvT/ABcTKfsXOe3tKcR2renG+FFynpu7gMn8jp4PTpEFsmWkXFrIIP8AQ1BWkF9HnubN1NR0E3QY3mELQ1A2iwid8n5KNTVmpeOq+C93SnTY7wHOb0YTaxW5JxT6bspZP4F94zomppYsfMIp9N2Qmk7AiqctjQRbEfHg8iLoSeZaHUWWPCIRu/qanNsf0oGXF0JPHwSXyjqaq9Hw5dfJPiNKFhtXyBscgTgkXO6kdQsMrHD8gD7HIE4JFzupGLEiqskV7v2W2xouobPO9yi3sgLqFA43bSokU/FiqSViONpsUkM9u1JrWkmffefBfd/QxNLUPIrdPF+58IDd6wSq1m/4nGdDEy0ZbZdHmddjEc0SYEuDwEgexdKd4qLlOWs00CTl3cJiOHsb+KzIC+VmTwthXj+oJq7nXuDa/ldD1GHuQ4480PQ1A2iN9InfNLdbEePBM/d6GoC0GET3NutizMvGVfAS7CoVDcoYzGdE1NrGYZFz+wEoqR7zMHlew/2mJvY3cpcTzzHYCaTvx3Urd5BFswe4lzwdzFF/qJPFwSXy+01O7YG+Ug+voKRuPd0OAR4Ay73mqvR8KCvks4jNAwmt83GxyXnBImd1JjQMJrnNxsclpwSJmotYkVVkivc+pcbJYFA43aiopZLAoHG7UVEjn4sVWTViF1rD39keUNSX2u348+d2iGjrWY7JcsakDa03zT+M9HCTTRrZdGRiexiaaw6WzHaWqSG9JvK7TViaN1Nl812lqzIbzm8vtNTPg69wb7Oh6oW3flPGwe41L6+CaTP3D9V62Ji/wTR+0zQ1A1rdpU/zR3YWXlv5VXwFt7ClVHCIXKZ0bE4shhh5y7QEnqJ71QuNnRsTiyGGf9l2gJvOwHU5xKgVa03yUD19BSWGC6z8MAXk+AeuE4tXvGDxv0FKZQ95YHKGsKqRslQ18kt5mz7b6RWz6DsuSxxH5lii/d+FG5/6mlncHrmR2XpQcMj+Tu29pFw4kdVkiOrY6F1soLqDLetqKillMBlvW1FRIp2LFVk4bEJrWvutDKgm5oLT7x/BC2s3weM9HCXS2RvrkHiGornawfLnlO6OEnEhav8AFR9iuKxiaaHeqXPpXaWLEhvOcy+01bTODwM52lq1kN5zmX2mo/g69wZYvQ9XjbgnOWzQ1AVgX0qf5m/YxHTB7kTx8j2aGoKrYZP8yibGrLy8VV8BLulJqQupkDyHuD/bb+Cb2T3KSfL+UP0NSepu73yw4C1p9xv4pzZMF1LI9O/Q1OJ2B1O70d7UG+nwT536ClEib6QzzPbqCZWoJ/NUIjcuiEbnJKW08X0hg+2NQVcpapKqT3nWzuC1zI7L0tjblH43M1PTKz2CVzI7D0smMIHKZtiIiHEiqskQdjLhZXAZX1tZUW1lRfZ+U4n63KJHOxYqvMmrEVy2W5XYfJG0rW1Rvj+u7o4SzbLHmckbStLU+O+8d0cJOpP1UfYqdjFEfdpEHNOlqxTjfIzp9GNTVmNhEHNOlq1pg+YT59G3UxH8Lr3BdeqYqHrE3+v8tuhqBqovp09zGJsYjZz9e5bdDUFU8Pn+YxdjVlpWIveQY7pSKqLpGT88MH3Wp5ZHC2579LUjqx+ZSQ4fgmn2NTyyOFtz4mlibz/x+vk8rUS0+EQ87slK6Yb6SPNEA2JnaU30iHn9kpXS8K+9HUoysFVLEd7PYLWsnsPSuYPeto87D70RNLPYLWsk6HJXMC6mQ/P3OqIiIcSKqyI7mXSyv1flOJ2tyixZg3UCS4na3KJFOXyxVeZ5WFZtk6+0F3kAHtKlqfG/eO6OEtLYH6RO4xtW9qfGjMd0cJPJX1UfYqfEJ4uEQs7shYpeHz3JbtapEwmHm9kKUzDp7kt2tRvC69wb7FQ9VnTc2fP226GoKpbwqHMIuxqLqRuZUeW3Q1Bz2Hz38PiaQsvLvp+7gx3Sj1U3wJMegYfYPwT+yW8G5sXSxV+pkGDJ3f7disFkd4szYulibz9kg7yOdf3aQOcnSUvpQJpQA4YwHsCPrhvoY5z2CgaRhTc9uwKMGD1JnWz2C1nKPRuSyawyDxDVETegD6P1TylrwT90UpmsMg8Q1RFdC/kiqsiNqZcLM4BJcl2tyixZtwFAkr/2Xa3KJHNxIqvM8rCrWvP0idxhdLVeNbmO6OEuVrvrC7jaulqHB0RhHg+Ed0cJPZf1UfYoe3+Qqc0GiA8IjtHulSmN71zzr+Bg9o/BYLz+Znt4BGYfdd+C3pmET48hYPai3shdVmihYioenVTxdR5bdDUHO7xnx/x0TSEXVfF1Hlt0NQk38aRn/wCHRNgWZl3l7uQZwlFn/ESfN27SrHZHeTM2LpYq5PG+BJ83btKsNkT8hCHBfHN38oab6Rg+/wBk9WvUc6yb6J/2RpKBpGFNz27Aj6w3vJf+8jSUBSMKbnjYFCDC6nuQTQfq7U+J/RFKZnDIXENURNqFuWdqJ8oiD+0UpmcNg8Q1RFbBiRVWRzcy22ewKS5LtblFLPm6hSPIdrcok81fJFV5ndaKtax19o4g8jgFvaXws5bujhKKJ3L+qnZA/wD10FP+kxc1mxy7UvCp/lsUURUV11XYoV9UPSa7vKrfy6MIeZ3lP/w+JsUUWdg4feQZwFEnPESnNxtKsVkBfCgjzx9kJRRM9Jwf33Jrccangkbng6NBUc97Gj042BRRRgwnUk7UE0Q/R2eHnidCUrmcMg8kaoiiisgvxVIFppDu4o8iBufJnwctyiiiVx34qvM8rD//2Q=="
}