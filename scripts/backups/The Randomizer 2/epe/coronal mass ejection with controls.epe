{
  "name": "coronal mass ejection with controls",
  "id": "QDpHoBDKYywvAKyz2",
  "sources": {
    "main": "export var speed = 8\nexport var sliderSpeed = function(v) {\n  speed = 35 - (v * 32)\n}\n\nexport var coreSize = 0.1\nexport var sliderCoreSize = function(v) {\n  coreSize = 0.1 + v\n}\n\nexport var flareAmount = 0.675\nexport var sliderFlareAmount = function(v) {\n  flareAmount = 1 - v\n}\n\nexport var zoom = 2.0 // define a variable for zoom\nexport var sliderZoom = function(v) { // define a function to update the zoom variable\n  zoom = 0.01 + v * 3.5 // maps v from [0,1] to [0.01,3.51]\n}\n\nexport var zoomSpeed = 1.0 // define a variable for zoom speed\nexport var sliderZoomSpeed = function(v) { // define a function to update the zoom speed variable\n  zoomSpeed = 0.1 + (1-v) * 3.9 // maps v from [0,1] to [0.1,4]\n}\n\nexport var autoZoom = 0\nexport var toggleAutoZoom = function(v) {\n  autoZoom = floor(v + 0.5) // toggle auto zoom mode on/off\n}\n\nexport var rotSpeed = 1.0 // define a variable for rotation speed\nexport var sliderRotSpeed = function(v) { // define a function to update the rotation speed variable\n  rotSpeed = v * 10.0 // maps v from [0,1] to [0,10]\n}\n\nvar c2 = coreSize / 4;\ntranslate(-0.5,-0.5);\nsetPerlinWrap(3,256,256);\nexport var noiseYTime\nexport var noiseTime\n\nexport function beforeRender(delta) {\n  if(autoZoom) { // if auto zoom mode is on\n    var waveform = wave(time(zoomSpeed)); // sawtooth waveform oscillates between 0.0 and 1.0\n    zoom = 0.1 + bezierQuadratic(waveform, 0, 1, 0) * 1; // use the bezierQuadratic function to get a smooth oscillation effect\n  }\n\n  t1 = time(rotSpeed * 0.2);\n  noiseTime = time(10) * 256;\n  noiseYTime = time(speed) * 256;\n}\n\nexport function render2D(index, x, y) {\n  x /= zoom; // apply the zoom factor to x\n  y /= zoom; // apply the zoom factor to y\n\n  tmp = hypot(x,y); x = atan2(y,x); y = tmp;  \n  \n  v = 1-perlinTurbulence(x,y - noiseYTime,noiseTime,1.5,.25,3)\n  \n  v = max(smoothstep(flareAmount,1,v),(1-((y*v)-c2)/coreSize));  \n  v = v * v * v;    \n\n  hsv(t1 - (0.125*v),6.5*y-v, v);\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}