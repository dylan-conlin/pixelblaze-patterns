{
  "name": "color palettes blending",
  "id": "yn2Xr3mhdmjzNijWF",
  "sources": {
    "main": "// Fast(er) palette blending demo. Switches between multiple palettes\n// at a configurable interval, and blends them while switching with\n// configurable transition time.  Also shows how to convert FastLED\n// gradient palettes for use with Pixelblaze.\n//\n// MIT License - Have fun!\n//\n// 6/03/2023 ZRanger1\n // blue purple teal pop of yellow, balanced.\n      var inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\n      //yellow-orange-red-purple-navy\n      //http://soliton.vm.bytemark.co.uk/pub/cpt-city/bhw/bhw1/tn/bhw1_04.png.index.html\n      var bhw1_04_gp = [0, 229,227,  1,   15, 227,101,  3,    142,  40,  1, 80,   198,  17,  1, 79,   255,   0,  0, 45]\n      arrayMutate(bhw1_04_gp,(v, i ,a) => v / 255);\n      // blue-purple-red\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/red/tn/Analogous_1.png.index.html\n      var Sunset_Real = [0.0, 0.471, 0.0, 0.0,    0.086, 0.702, 0.086, 0.0,   0.2, 1.0, 0.408, 0.0,   0.333, 0.655, 0.086, 0.071,   0.529, 0.392, 0.0, 0.404,   0.776, 0.063, 0.0, 0.51,    1.0, 0.0, 0.0, 0.627,];\n      // Battery Saver: black-blue-purple-pink-white Top pick.\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/basic/tn/BlacK_Blue_Magenta_White.png.index.html\n      var Analogous_1 = [0.0, 0.012, 0.0, 1.0,    0.247, 0.09, 0.0, 1.0,    0.498, 0.263, 0.0, 1.0,   0.749, 0.557, 0.0, 0.176,   1.0, 1.0, 0.0, 0.0,];\n      // this is a really good one. Orange Pink Green. Should be garish but isn't. \n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/ma/icecream/tn/rainbowsherbet.png.index.html\n      var rainbowsherbet = [0.0, 1.0, 0.129, 0.016,   0.169, 1.0, 0.267, 0.098,   0.337, 1.0, 0.027, 0.098,   0.498, 1.0, 0.322, 0.404,   0.667, 1.0, 1.0, 0.949,   0.82, 0.165, 1.0, 0.086,    1.0, 0.341, 1.0, 0.255,];\n      // really good blending, purples blues and pinks. Mild but good.\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/hult/tn/gr65_hult.png.index.html\n      var BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0,   0.165, 0.0, 0.0, 0.176,   0.329, 0.0, 0.0, 1.0,   0.498, 0.165, 0.0, 1.0,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 1.0,   1.0, 1.0, 1.0, 1.0,];\n      // Battery Saver: black magenta red yellow.\n      //better than just black magenta red.\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/basic/tn/BlacK_Red_Magenta_Yellow.png.index.html\n      var gr65_hult = [0.0, 0.969, 0.69, 0.969,   0.188, 1.0, 0.533, 1.0,   0.349, 0.863, 0.114, 0.886,   0.627, 0.027, 0.322, 0.698,   0.847, 0.004, 0.486, 0.427,   1.0, 0.004, 0.486, 0.427,];\n      // yellow to greens to blues. Very little red. \n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/gmt/tn/GMT_drywet.png.index.html\n      var GMT_drywet = [0.0, 0.184, 0.118, 0.008,   0.165, 0.835, 0.576, 0.094,   0.329, 0.404, 0.859, 0.204,   0.498, 0.012, 0.859, 0.812,   0.667, 0.004, 0.188, 0.839,   0.831, 0.004, 0.004, 0.435,   1.0, 0.004, 0.027, 0.129,];\n      // Battery Saver: an excellent fire look, but too much black in it for many patterns. Black - red - orange - yellow - white.\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/neota/elem/tn/lava.png.index.html\n      var lava = [0.0, 0.0, 0.0, 0.0,   0.18, 0.071, 0.0, 0.0,    0.376, 0.443, 0.0, 0.0,   0.424, 0.557, 0.012, 0.004,   0.467, 0.686, 0.067, 0.004,   0.573, 0.835, 0.173, 0.008,   0.682, 1.0, 0.322, 0.016,   0.737, 1.0, 0.451, 0.016,   0.792, 1.0, 0.612, 0.016,   0.855, 1.0, 0.796, 0.016,   0.918, 1.0, 1.0, 0.016,   0.957, 1.0, 1.0, 0.278,   1.0, 1.0, 1.0, 1.0,];\n      // reds to oranges to yellows to purple blue. No black in it. \n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/atmospheric/tn/Sunset_Real.png.index.html\n      var BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0,   0.165, 0.165, 0.0, 0.0,   0.329, 1.0, 0.0, 0.0,   0.498, 1.0, 0.0, 0.176,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 0.176,   1.0, 1.0, 1.0, 0.0,];\n      // as described, blue cyan yellow -- slightly blue biased. \n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/basic/tn/Blue_Cyan_Yellow.png.index.html\n      var Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0,   0.247, 0.0, 0.216, 1.0,   0.498, 0.0, 1.0, 1.0,   0.749, 0.165, 1.0, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar palettes = [\n  inferno,\n  bhw1_04_gp, \n  Sunset_Real, \n  Analogous_1, \n  rainbowsherbet, \n  BlacK_Blue_Magenta_White, \n  gr65_hult, \n  GMT_drywet, \n  lava, \n  BlacK_Red_Magenta_Yellow, ]\n\n// a bunch of fastled gradient palettes\nvar black_Blue_Magenta_White_gp = [\n    0,   0,  0,  0,\n   42,   0,  0, 45,\n   84,   0,  0,255,\n  127,  42,  0,255,\n  170, 255,  0,255,\n  212, 255, 55,255,\n  255, 255,255,255]\n// normalize palette to 0.0 to 1.0 range  \narrayMutate(black_Blue_Magenta_White_gp,(v, i ,a) => v / 255);  \n\nvar es_landscape_33_gp = [\n    0,   1,  5,  0,\n   19,  32, 23,  1,\n   38, 161, 55,  1,\n   63, 229,144,  1,\n   66,  39,142, 74,\n  255,   1,  4,  1]\n// normalize palette to 0.0 to 1.0 range    \narrayMutate(es_landscape_33_gp,(v, i ,a) => v / 255);\n\nvar heatmap_gp = [\n  0,     0,  0,  0,   \n128,   255,  0,  0,   \n224,   255,255,  0,   \n255,   255,255,255 ];\n// normalize palette to 0.0 to 1.0 range   \narrayMutate(heatmap_gp,(v, i ,a) => v / 255);\n\n// list of the palettes we'll be using\n//var palettes = [black_Blue_Magenta_White_gp,es_landscape_33_gp,heatmap_gp]\n\n// control variables for palette switch timing (these are in seconds)\nexport var paletteHoldTime = 5; // New slider for PALETTE_HOLD_TIME\nexport var paletteTransitionTime = 2; // New slider for PALETTE_TRANSITION_TIME\n\nexport function sliderPaletteHoldTime(v) { // New slider function\n  paletteHoldTime = 1 + v * 20; // Adjust range as needed, 1-21 seconds in this example\n}\n\nexport function sliderPaletteTransitionTime(v) { // New slider function\n  paletteTransitionTime = 0.1 + v * 10; // Adjust range as needed, 0.1-10.1 seconds in this example\n}\n\n// internal variables used by the palette manager.\n// Usually not necessary to change these.\nvar currentIndex = 0;\nvar nextIndex = (currentIndex + 1) % palettes.length;\n\n// arrays to hold rgb interpolation results\nvar pixel1 = array(3);\nvar pixel2 = array(3);\n\n// array to hold calculated blended palette\nvar PALETTE_SIZE = 16;\nvar currentPalette = array(4 * PALETTE_SIZE)\n\n// timing related variables\nvar inTransition = 0;\nvar blendValue = 0;\nrunTime = 0\n\n// Startup initialization for palette manager\nsetPalette(currentPalette);\nbuildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)  \n\n// user space version of Pixelblaze's paint function. Stores\n// interpolated rgb color in rgbArray\nfunction paint2(v, rgbArray, pal) {\n  var k,u,l;\n  var rows = pal.length / 4;\n\n  // find the top bounding palette row\n  for (i = 0; i < rows;i++) {\n    k = pal[i * 4];\n    if (k >= v) break;\n  }\n\n  // fast path for special cases\n  if ((i == 0) || (i >= rows) || (k == v)) {\n    i = 4 * min(rows - 1, i);\n    rgbArray[0] = pal[i+1];\n    rgbArray[1] = pal[i+2];\n    rgbArray[2] = pal[i+3];    \n  }\n  else {\n    i = 4 * (i-1);\n    l = pal[i]   // lower bound    \n    u = pal[i+4]; // upper bound\n\n    pct = 1 -(u - v) / (u-l);\n    \n    rgbArray[0] = mix(pal[i+1],pal[i+5],pct);\n    rgbArray[1] = mix(pal[i+2],pal[i+6],pct);\n    rgbArray[2] = mix(pal[i+3],pal[i+7],pct);    \n  }\n}\n\n// utility function:\n// interpolate colors within and between two palettes\n// and set the LEDs directly with the result.  To be\n// used in render() functions\nfunction paletteMix(pal1, pal2, colorPct,palettePct) {\n  paint2(colorPct,pixel1,pal1);\n  paint2(colorPct,pixel2,pal2);  \n  \n  rgb(mix(pixel1[0],pixel2[0],palettePct),\n      mix(pixel1[1],pixel2[1],palettePct),\n      mix(pixel1[2],pixel2[2],palettePct)\n   )\n}\n\n// construct a new palette in the currentPalette array by blending \n// between pal1 and pal2 in proportion specified by blend\nfunction buildBlendedPalette(pal1, pal2, blend) {\n  var entry = 0;\n  \n  for (var i = 0; i < PALETTE_SIZE;i++) {\n    var v = i / PALETTE_SIZE;\n    \n    paint2(v,pixel1,pal1);\n    paint2(v,pixel2,pal2);  \n    \n    // build new palette at currrent blend level\n    currentPalette[entry++] = v;\n    currentPalette[entry++] = mix(pixel1[0],pixel2[0],blend)\n    currentPalette[entry++] = mix(pixel1[1],pixel2[1],blend)\n    currentPalette[entry++] = mix(pixel1[2],pixel2[2],blend)    \n  }\n}\n  \nexport function beforeRender(delta) {\n  runTime = (runTime + delta / 1000) % 3600;\n\n  // Palette Manager - handle palette switching and blending with a \n  // tiny state machine  \n  if (inTransition) {\n    if (runTime >= paletteTransitionTime) {\n      // at the end of a palette transition, switch to the \n      // next set of palettes and reset everything for the\n      // normal hold period.\n      runTime = 0;\n      inTransition = 0\n      blendValue = 0\n      currentIndex = (currentIndex + 1) % palettes.length\n      nextIndex = (nextIndex + 1) % palettes.length   \n\n    }\n    else {\n      // evaluate blend level during transition\n      blendValue = runTime / paletteTransitionTime\n    }\n    \n    // blended palette is only recalculated during transition times. The rest of \n    // the time, we run with the current palette at full speed.\n    buildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)          \n  }\n  else if (runTime >= paletteHoldTime) {\n    // when hold period ends, switch to palette transition\n    runTime = 0\n    inTransition = 1\n  }\n  \n  // beforeRender() code specific to your pattern can go below this line\n\n}\n\n// Add your pattern render() code here -- just use paint to get color\n// from the current blended palette.\nexport function render(index) {\n  pct = frac(wave(time(0.1))+ index/pixelCount)\n  paint(pct);\n}\n\n\n"
  },
  "preview": "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"
}