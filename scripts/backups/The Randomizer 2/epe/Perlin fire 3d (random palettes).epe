{
  "name": "Perlin fire 3d (random palettes)",
  "id": "RKFJhG6arsqGbKubR",
  "sources": {
    "main": "/* \n   Demonstration of Perlin noise functions to generate fire \n   The first mode shows Perlin noise scaled to 0-1.\n   The second shows a fractal ridge function, creating fire tendrils.\n   The third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\n   The fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n   2022 Ben Hencke (wizard)\n*/\n\n\n\nvar fire = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0,    0.247, 0.09, 0.0, 1.0,    0.498, 0.263, 0.0, 1.0,   0.749, 0.557, 0.0, 0.176,   1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0,   0.165, 0.0, 0.0, 0.176,   0.329, 0.0, 0.0, 1.0,   0.498, 0.165, 0.0, 1.0,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 1.0,   1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0,   0.165, 0.165, 0.0, 0.0,   0.329, 1.0, 0.0, 0.0,   0.498, 1.0, 0.0, 0.176,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0,   0.247, 0.0, 0.216, 1.0,   0.498, 0.0, 1.0, 1.0,   0.749, 0.165, 1.0, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008,   0.165, 0.835, 0.576, 0.094,   0.329, 0.404, 0.859, 0.204,   0.498, 0.012, 0.859, 0.812,   0.667, 0.004, 0.188, 0.839,   0.831, 0.004, 0.004, 0.435,   1.0, 0.004, 0.027, 0.129,];\nvar bhw1_04_gp = [0, 229,227,  1,   15, 227,101,  3,    142,  40,  1, 80,   198,  17,  1, 79,   255,   0,  0, 45]\nvar black_Blue_Magenta_White_gp = [0,   0,  0,  0, 42,   0,  0, 45, 84,   0,  0,255, 127,  42,  0,255, 170, 255,  0,255, 212, 255, 55,255, 255, 255,255,255]\nvar es_landscape_33_gp = [0,   1,  5,  0, 19,  32, 23,  1, 38, 161, 55,  1, 63, 229,144,  1, 66,  39,142, 74, 255,   1,  4,  1]\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969,   0.188, 1.0, 0.533, 1.0,   0.349, 0.863, 0.114, 0.886,   0.627, 0.027, 0.322, 0.698,   0.847, 0.004, 0.486, 0.427,   1.0, 0.004, 0.486, 0.427,];\nvar heatmap_gp = [0,     0,  0,  0, 128,   255,  0,  0, 224,   255,255,  0, 255,   255,255,255 ];\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\nvar lava = [0.0, 0.0, 0.0, 0.0,   0.18, 0.071, 0.0, 0.0,    0.376, 0.443, 0.0, 0.0,   0.424, 0.557, 0.012, 0.004,   0.467, 0.686, 0.067, 0.004,   0.573, 0.835, 0.173, 0.008,   0.682, 1.0, 0.322, 0.016,   0.737, 1.0, 0.451, 0.016,   0.792, 1.0, 0.612, 0.016,   0.855, 1.0, 0.796, 0.016,   0.918, 1.0, 1.0, 0.016,   0.957, 1.0, 1.0, 0.278,   1.0, 1.0, 1.0, 1.0,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016,   0.169, 1.0, 0.267, 0.098,   0.337, 1.0, 0.027, 0.098,   0.498, 1.0, 0.322, 0.404,   0.667, 1.0, 1.0, 0.949,   0.82, 0.165, 1.0, 0.086,    1.0, 0.341, 1.0, 0.255,];\n\narrayMutate(bhw1_04_gp,(v, i ,a) => v / 255);\narrayMutate(black_Blue_Magenta_White_gp,(v, i ,a) => v / 255);\narrayMutate(es_landscape_33_gp,(v, i ,a) => v / 255);\narrayMutate(heatmap_gp,(v, i ,a) => v / 255);\n\n\n\nvar sunset = [0.0, 0.471, 0.0, 0.0,    0.086, 0.702, 0.086, 0.0,   0.2, 1.0, 0.408, 0.0,   0.333, 0.655, 0.086, 0.071,   0.529, 0.392, 0.0, 0.404,   0.776, 0.063, 0.0, 0.51,    1.0, 0.0, 0.0, 0.627,];\n// List of palettes\n// good fire palettes:\nvar palettes = [\n  fire,\n  inferno,\n  lava,\n  BlacK_Blue_Magenta_White,\n  Blue_Cyan_Yellow,\n  black_Blue_Magenta_White_gp,\n  gr65_hult,\n]\n\n// These don't look that great as fire palettes:\n// Analogous_1,\n// BlacK_Red_Magenta_Yellow,\n// GMT_drywet,\n// bhw1_04_gp,\n// es_landscape_33_gp,\n// rainbowsherbet,\n// heatmap_gp,\n\nvar currentPalette = random(palettes.length);\n//var currentPalette = 0\nsetPalette(palettes[currentPalette]);\n\nexport function showNumberPaletteMode() {\n  return currentPalette + 1;\n}\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\nexport var mode = 1\nexport var fireScale = 3\nexport var risingSpeed = 1\nexport var morphSpeed = 1\nexport var intensity = 1\n\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderIntensity(v) {\n  intensity = 0.1 + v*10 \n}\nexport function sliderScale(v) {\n  fireScale = v\n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function toggleDisableSliders(v) {\n  if (v) {\n    fireScale =\t11.000000\n    mode = 0.000000\n    morphSpeed = 1.235062\n    risingSpeed = 5.199982\n  }\n}\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\nexport function beforeRender(delta) {\n  timeCounter += delta; // Increment the time counter by the time since the last frame\n\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\n\n\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}\n\nexport function render3D(index, x, y, z) {\n  // Calculate the distance of the LED from the center of the sphere\n  var distanceFromCenter = sqrt(x*x + y*y + z*z);\n\n  // Angle relative to the y-axis (from south pole)\n  var theta = acos(y/distanceFromCenter);\n\n  // Azimuthal angle (around y-axis)\n  var phi = atan2(z, x);\n\n  // Adjust the y-coordinate to make the fire wrap around the sphere\n  yAdjusted = yTime + (1 - theta/PI) + 0.2*sin(phi);  // sin(phi) is added to make the fire wrap around\n  \n  // Call out to the noise function based on the mode\n  v = modeFn(x, yAdjusted, morphTime); \n  \n  // Modulate the intensity based on angle theta (distance from the south pole)\n  v = v * (intensity - theta/PI);\n  \n  // // Modulate the intensity further based on the vertical position\n  // v = v * (1 + y)/fireScale;  // Notice the +y instead of -y  \n\n  // Keep the palette from wrapping if noise goes past 1.0\n  v = min(v, 1);\n  paint(v, v);\n}\n\n"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCACWAGQDASIAAhEBAxEB/8QAHAAAAgMBAQEBAAAAAAAAAAAABQYABAcDCAIB/8QAMRAAAQMDAwMDAwQCAgMAAAAAAQIDBAAFEQYSITFBURMiYQcUcSMygaFCkbHxFcHh/8QAGgEAAwEBAQEAAAAAAAAAAAAAAgMEBQEABv/EAC4RAAICAQQABAUEAgMAAAAAAAECAAMRBBIhMQUTQVEiMmFxkRSBoeEjscHR8P/aAAwDAQACEQMRAD8AStO6gUuZNStZBSOhobqLUYXd4riySlK8geTivy620wri/IaGEFPP4odDiNSZofkY2NDIzVy1pnzAJssz42w3cxJvzrLrqyllj3hI81dn2p+THlsEkYAP54r90wTdLszEYThjeCr5FaNIsvo3MpcGA8oII8eKg1WtTSuKzxxmPRA4JM88t/f6ZngpW4Y7p5BydtN9o+6u0pl0ZS2hHenf6kaL9KKlaW+OD0r409bkx4iAhI4wj+TRp4hVZR51frF10FWwDxEPUrMkQ2VoHRRVgeM1dtNzdYi8L4KQee1N+q7KuNbWHEJ37CpPTqDSnbLcpExtLyfYpBOPmnU6ivUVbhyJ0oVfidlT5E+WkJBKUpycUFusnaypYJ3ZxxTta4LbQWG0jKsig98s6mmEK9P3JUUqAoq7k37BxOujbcwdbro6iGEbsgpyPipDlKbfCws788mqZhPoU0lKMBw4/FGU2kssoWvr63+xTW2D94C7j+0st3t3005OTjrmpQ27x/SmFLXCSM4qUAprYZxCLsOI0ariINlivJTlTiNpA70q3C1JDCFpBSNozg04zVLIisucpSpSgD5P/dK+t7o3DbTFY9zm3nHapdGzgBO+/wAZjLQMFjOWjbvHtVyCyQNqhk1sM+9sXVuNIYUn1ElPI/NebYqHG8PPJ/TJzg9TWyaNZbDKVoG5OAcVN4vo6nxqG7EDTtu4M1i6uR7xYxvADqEjcDWdxnEie4jo0h0kHzjijT8opiKLaylQGPzQGHHy24XMlRJx8VgaCsqjlzx1/coRNnAhbUt3gzIzMZG0beOKWZ9sKFpeR1CPaPOetJOpt8e4pLD5Q5nIGeDTXZ78bhamWXEn108H+K26tC2jrXyTkeuYCuCSsuWRlZmoLoCUpOf5pg1Bb45ZC0KCgo560BihbgUpJKewpYvmoJ7A+2Rle3PJOKBtLZqLw6NjHYhMwQcw9LtJXIjhI46j5o85aEGBlQzsPI8cdaAWLUrTtsaW+MPt8EHrmq9u1VIky5SAhXpqUdvPUV22rVucDjb/ADPBl/M+X7O5JX6ilAHpUokifHaBQ+MLB71Ko868cAT21ZxvyFGMnYfcnkK8Vmc91KpqlPHetSs5/wCBWiXeUg2v7hCxhxA48E0hWZtuVc333BuQ3wkeTVmiytZzEX8kAT8kW16VEKjlAxwKdvpfcxKQYZVh5oKR/I6UGlzGojSlun3EYSOwoNoKV6WqFqjqwHCT16nNd1VZvoZfxAUhHGPWbDIeyxsX7XQogivgrDFvkvE+1KSdx7mudyKZKEFR2LByaWdTXc/+LmMsHDaOM+eKwtPpzaAo9+fzLGbaMzPtRTnLldXXY6dzTRKcj4pu0G4l5BUf3KTn+aVtLtsuRHkFXvUonnzXbTtzFquz0FRAKfen8c19Ham6sosgrbDB29ZqYUliO64SAEg1mWq7ggPANKGDnkUavF+UuzvBB80i2OC9McWuQr1PdlJP/FI0lBrJZu4y+3OFWMtldDkUq7qH91c0zIQq4LTxhC/6pSVdhZfuYzn7ufTH5PSvmPKftc2JJAUUP8OHxmqnXcCPeKFoBH07mrXJtn7n34zipSpO1Ax9wfVUN2BUqVKHCgZlJtXMo6nlOo00x6K8KWMY8GudkZXDgMtIIL7ozk/2apalUXLS0W8laD+3PeiWk48qc4FEH2pAz2FU8KpJkwJaz9odctS7hGSwgZWpPXxQO225FrvSVIOE9R8GtW0xARGQ467/AIpJUo0naltKo63JgBw7lwDxg/8A2s+jXLZc1Pp/3KXq6b1jBLdTKhpcCtqinJwaRZ5L0eWnPsKiEjzRZ6SBbm1oV7FAZoPEQqXIIA/T5P5p+mq8oH2nrG3YEDtWpyElMhoqwoZV3AND58ht67R1tAB4IIPmtms+n202yREfSCrg89cEVlt5tCbffCnB3pyB8ii0+rS92Rex/qItpKKMSoj1H7c8lXTJ481ys0h+EHGHWzydyTRW3x1OpKEA4yTR636cXOUUPjapo4OOCaossRBljBWssQREa/GI/IjPqAK0nkHqK+L3P9dLKG0H0hjBx3ojfbEI11Lbqj7VcjyO1ErpZxEtjBW37XBuHkV3cDjHr1ANbHd6RMuIDkpRc/cABUq7c7eHpalng4A61K8VJMmatixhu7RVqkSG2+QlYwPzWj6JhtR7WkKI3q5J80lWRxM68Og8pWUKT88VpujbWlVySXf2JPAzxWb4pcK6DuOMczUpAyWjRCsjzluLjiShhZGc8ZFJf1BksNWxtCCk4Qsf1Wp6yvcWBpt5CCAUNnGPgV5Xu11lTL5lO5cMEq/9H+OaxPBdO+otOoZuFP8AOOZxrjtyw7nzFu/qQFMZ57A02Wn0orbJVjlIzSXd7d9sw3IjjjoQPFdrpcnFR0tRyfVSACB2xzX1jpvGBEq5T5pvMsK9syKdwCQFJHcUh36EJsv71SNuDtwf5q/9LLyuXblx5rhLxTlQPY196ymRoNpdWFAfqjjxzXzukR9LqDQRk8AH6SwkOm70gS0x22XkBWPcsD+6c52LfP8AUQ3lDg5A81kF11II4Qpg7ikhZx4HNafpO+tX+3sreThwJ796s8QqcYsPI5yIFVik7RAt4gC63RD6EYA7kUTet4nwFhxAHoo2pox6cdp1StwCd1UrleocCK40VAFaCQaQNRY+1al6jdoGSYir0+mW4t0DjOKlMelZrEq0pd3DlZqVdZq7EYrjqKFSMMzO4E1VlucYPA4bVgq8jtWoWLU7aGXHshJ/NIesrQZLclLY949ySPg0ptXGTEPvUrbnlJFPv09eqT4xJvNNB2nqaLrzUz1zYTDjrOXlBHHfNX4Glft7cXFp5QgDp5FLGgoa7xquM7KH6LSS4B81sk91rDjIHHpJB/NZ2r1H6Jk01A+p/MoqHmZdplN8iGLbxlOUjtivzSGnTKWpTwy47yTTJfIh+2LTnIPQ0W0w0iOhDh67eKou1ZTTll7nfKBfJme3RT2ktRIeGfQdSUnHwetArxcXr/NZZYUotqKlL8cdK1fXtjRfLOw42P1W0A5HnJzSlpHTQivuOPAle0gZ/uj02rS2rzW+YcGJepy2wfKYA05plcv1A6nKjlIrrb7k5pq6Liu5Q2CcfFadY4jcVxasdMmlf6haa+7MeRH/AHrGc15datlppbowjQa1ynYixdtUreUC06rateFAHtmhV5uL94a+3Y3JAIAPcVfg6VcW4A9njoB5pt0xpduK2t11GdruDmqnsrpXJigllnDTNX7tcLC8uE0lZQDvGAe//VStIvemI8ub6qk87QP7NShFyMM5gNp7gcK3EtyUb5TilchYOB80NumnI5hOqWkEhQA474qw2/vlLQo/tNNlut/3rTfqH2D3fk1Ldf8ApgGY8S3aH7lLQ+nVMPNPJyhCU5V+KtXmdtmyloB2AApPnHFPtrsct2zvuIbKGcYzjtSPrqE3Ejufbe5SUkEVh6fWjVaw+Z68D7QgQAQvpB8lwTLeCped3cdjX5GkbEoRnonis+09qQlT0N8n2nAzTbbVKefYTySpPP4rcfT7FIPUFLQ/Ijpb3FO2dtzbkg4Wnxzmhk5aGVp2DHKj/Bpiai/ZNIea/UYdThY+RShfZja5wQwPbg5+KxdERda2wccn+jGk4E6Il4JIPtxk0SiOJkQ2VrAUgAgUuRyXnktj/LimSCj7BxUaUj9I+5B7firNUqoOO+55TmV1IjsvJJSM+pkV1kr9KIpKRgOLzQ+9y2G5TfpEEZ6CpeJS5MVr7VBCE4JVjvXBUz7CfX3nszg88Vrzz0qUNcnhlW1SSe/FSrxUccCBuEHIjuLuUplPU4KTWn/TW2PzbmzHlHKRg8eKyTT14S9NLhPvz/ut3+nUoIubKkDKtoHHzUfjTslW0jg4igfgZl7mpXxCYmnJSGEhIS0QkCvNep740H5TDhBJOOfmvUkttD0RxDoG0p5zXkP6yWb7KY9IYJCw97gP8hmpNDXWdUA3tx+xkmksIRsdxWv9hQ081Nh9Nw3AU226SzbW2VuEFZT3pfTMKLaN5yMcg0vNTX7vd4kdClBJICj4FfRNXvXa54j961nK9mehdKzW7ja9pIKVBSuO1AtSQY7A/TADiulNWhLAGtPuFgYCeU/NZt9QruYElLajhacpx8Zr5LQVl/EHFJwuZTvABz6T7ielHd9R048U5W5TVztyFOHJSeD8Vijt0fuc9iNHJyvGT4rVNGMSm2DHdUVemcA+a0/F9Ptq8wthhOVvu66nabZYqJqFqA6/7q9c0x4dvS2lIJX0FBNR3H7eU224rapKsEVS1jcH2baw4lKlBY3DHUVLXp7rjVvbiGSACZ+RoMd5vc6QFA4qUqwtQBcdJURn81K2W012eGixYkT4DDwuu2J5UoeMZzXpX6RqQyGZEs+7Gea84WV1cG6tB8FPqe0E/NbDaL2EqbjxVDgAdaX41VZbUFr+/wCIihQylc9zbtWakQi3raiqwpQJKvArzD9Sr49McIWQtQVjjvWl6muC4enJElwkrKcCsatoTd7n6qyVIIykHpmoPA6S5bU29jgTprFS+WvZnKaNtrR6g2ubcEUKtjqIUmOWwC4Dkn+adtR21KrQRtwpCeDSta7MoxnXpAIUkYFfR12Ky5gOhDDE3zQGq1Jt6GnAA2Bt4pN+pkWM7MXIcAKXAMf7pa0bdxHSqK4779vehmsb29NLcIKKsKyCOTisajww0602ocD2+/8AccXXZu9TOEdyNbLi2WgASB0rb9HzoaoaHkKBJxmvPEOM/JSt5RPsGMn4ps0pdXG2yhaig9+etU+K+HjWU7M4IgUvg4PRjxrG3Nyr4y6OUqPt/NX9UojItDIJSS0nBHxSJddXFhaW1EKWg+05oPqS/POxkqDqipxODg8c1NV4dd/iDNwn8/8AhGtaigy5EtMF9gObU85qUtW+9mAyWHgSpKjjPipWsyPngxAsrxzL2tIey3peaIS62eDVvQExwTGUOHcVc5qVK43NRz7QeruJpeunSrTq+OA2QP8AVIugoAaszq1EFTZATjwKlSsfw74dEce//MqYf5B9owTlJfjONqHyK5WuClwkKxt5wKlSqCStZxDxkxASwW9RXIBX7U4TjtgmuOnwblcQ4rHqICkEnvjPNSpWqD8MgHzAfUxys9qQ8y6HNuwZ9o7mkOZLdiXYRmTgHJyfg4qVKTUxLsD9Id/wopEruLM1xLi+FI/d812tUhVznlg8BtQAzUqVSeJODyPrLd/taDcl7jhQAB2nrUqVK4vIhsi5PE//2Q=="
}