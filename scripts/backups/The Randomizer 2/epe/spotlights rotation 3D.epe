{
  "name": "spotlights rotation 3D",
  "id": "TPQFEG4hyQKFHDiQi",
  "sources": {
    "main": "/*\n  Spotlights / rotation 3D\n  \n  This pattern demonstrates one way to rotationally transform 3D space, which\n  results in the impression we're rotating whatever pattern was generated.\n  \n  3D example: https://youtu.be/uoAJg5J6F1Q\n  \n  This pattern assumes a 3D installation that's been mapped in the Mapper tab,\n  but degrades to somewhat less interesting projections in 2D and 1D. \n*/\n\n\nscale = 1 / (PI * PI) // How wide the \"spotlights\" are\nspeed = 1             // How fast they rotate around\n\nexport function beforeRender(delta) {\n  // We could just use sin(time()) to output -1..1, but that's almost too smooth\n  t1 = 2 * triangle(time(.03 / speed)) - 1\n  t2 = 2 * triangle(time(.04 / speed)) - 1\n  t3 = 2 * triangle(time(.05 / speed)) - 1\n  t4 = time(.02 / speed)\n  \n  // The axis we'll rotate around is a vector (t1, t2, t3) - each -1..1.\n  // The angle to rotate about it is a 0..2*PI sawtooth.\n  setupRotationMatrix(t1, t2, t3, t4 * PI2)\n}\n\nexport function render3D(index, _x, _y, _z) {\n  // Shift (0, 0, 0) to be the center of the world, not the rear-top-left\n  x = _x - 0.5; y = _y - 0.5; z = _z - 0.5\n  \n  /*\n    In beforeRender(), setupRotationMatrix() calculated a rotation matrix for\n    this frame. rotate3D() now applies it to the current pixel's [shifted]\n    position. As seen below, this sets rotated global variables rx, ry, and rz.\n    You could also return an array of [rx, ry, rz], but that adds one slightly\n    slower step to an already computationally-intense pattern.\n  */\n  rotate3D(x, y, z)\n  \n  /*\n    `dist` is the distance (in world units) from a cone's surface to this \n    pixel. Positive values are inside the cone. If you try a different scale\n    for x vs y, you'll see elliptical cones.\n  */\n  dist = abs(rz) - sqrt(rx * rx / scale + ry * ry / scale)\n\n  dist = clamp(dist, -1, 1) // Try commenting this out.. Whoa!\n  \n  //  magenta,  white center,  sub-pixel rendered border\n  hsv(0.97,     1-dist,        pow((1 + dist), 4))\n}\n\n// A planar slice of this pattern will look like a projection surface that\n// someone's waving a flashlight at.\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\n// In 1D it's a frenetic swooping region\nexport function render(index) {\n  render3D(index, index / pixelCount * 2, 0, 0)\n}\n  \n\n\n/*\n  setupRotationMatrix()\n  Takes a vector (ux, uy, uz) which will be the axis to rotate around,\n    and an angle in radians.\n  Computes a 3D rotation matrix and stores it in a global named R\n  \n  https://en.wikipedia.org/wiki/Rotation_matrix\n*/\n\nvar R = array(3); for (i=0; i<3; i++) R[i] = array(3)  // init 3x3, R[r][c]\n\nfunction setupRotationMatrix(ux, uy, uz, angle) {\n  // Rescale ux, uy, uz to make sure it's a unit vector, length = 1\n  length = sqrt(ux * ux + uy * uy + uz * uz)\n  ux /= length; uy /=length; uz /= length\n  \n  // Precompute a few reused values\n  cosa = cos(angle); sina = sin(angle)\n  ccosa = 1 - cosa\n  xyccosa = ux * uy * ccosa\n  xzccosa = ux * uz * ccosa\n  yzccosa = uy * uz * ccosa\n  xsina = ux * sina; ysina = uy * sina; zsina = uz * sina\n  \n  R[0][0] = cosa + ux * ux * ccosa\n  R[0][1] = xyccosa - zsina\n  R[0][2] = xzccosa + ysina\n  R[1][0] = xyccosa + zsina\n  R[1][1] = cosa + uy * uy * ccosa\n  R[1][2] = yzccosa - xsina\n  R[2][0] = xzccosa - ysina\n  R[2][1] = yzccosa + xsina\n  R[2][2] = cosa + uz * uz * ccosa\n}\n\n/*\n  rotate3D()\n  Takes 3 coordinates (x, y, z) and expects R to be a global rotation matrix.\n  Sets globals rx, ry, and rz as the rotated point's new coordinates.\n  (Globals are used for speed and convenience in the Pixelblaze lang)\n*/\nvar rx, ry, rz\nfunction rotate3D(x, y, z) {\n  rx = R[0][0] * x + R[0][1] * y + R[0][2] * z\n  ry = R[1][0] * x + R[1][1] * y + R[1][2] * z\n  rz = R[2][0] * x + R[2][1] * y + R[2][2] * z\n}\n"
  },
  "preview": "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"
}