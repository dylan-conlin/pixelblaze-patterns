{
  "name": "cube fire 3D (with comments)",
  "id": "6ba97v7LGEdrm2wjv",
  "sources": {
    "main": "// Set animation speed (1 means normal speed)\nspeed = 1\n\n// Calculate time values and scale before each render cycle\nexport function beforeRender(delta) {\n  t1 = time(.1/speed) // Calculate the time value for hue (based on speed)\n  t2 = time(.13/speed) // Calculate the time value for value falloff along the Y-axis (based on speed)\n  t3 = time(.085/speed) // Calculate the time value for value falloff along the X-axis (based on speed)\n  scale = (.5 + wave(time(.1)))/2 // Calculate a scale factor based on the wave function\n}\n\n// Main render function that calls render3D() with 3D coordinates\nexport function render(index) {\n // Calculate X-coordinate as index/pixelCount (Y and Z always 0 in 1D)\n  render3D(index, index/pixelCount, 0, 0)\n}\n\n// 2D render function that adds a z-value of 0 and calls render3D()\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0) // Add a Z-coordinate of 0 to the 2D coordinates and call render3D\n}\n// 3D render function that generates the LED pattern using HSV color model\nexport function render3D(index, x, y, z) {\n  // Calculate hue (h) by combining the time value (t1) with contributions from\n  // x, y, and z coordinates\n  h = t1 + x * 0.2 + y * 0.2 + z * 0.2\n\n  // Initialize saturation (s) to 1, which means fully saturated colors (0 would\n  // mean grayscale)\n  s = 1\n\n  // Calculate value (v) by multiplying wave functions based on the time values\n  // and coordinates and scaling the result by 10 to control brightness\n  v = (wave(z * scale + wave(t1)) * wave(y * scale + wave(t2)) * wave(x * scale + wave(t3))) * 10\n\n  // Update saturation (s) by subtracting 1 from the calculated value (v) to\n  // make darker colors less saturated\n  s = v - 1\n\n  // Apply power of 3 to value (v) for a smooth falloff in brightness as the\n  // value decreases\n  v = v * v * v\n\n  // Set the HSV color for the current LED using the calculated hue (h),\n  // saturation (s), and value (v)\n  hsv(h, s, v)\n}\n"
  },
  "preview": "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"
}