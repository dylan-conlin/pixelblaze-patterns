{
  "name": "Perlin fire sphere",
  "id": "QDX7nmT6TbCExNhkX",
  "sources": {
    "main": "/* \n   Demonstration of Perlin noise functions to generate fire \n   The first mode shows Perlin noise scaled to 0-1.\n   The second shows a fractal ridge function, creating fire tendrils.\n   The third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\n   The fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n   2022 Ben Hencke (wizard)\n*/\n\n\n\nvar fire = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0,    0.247, 0.09, 0.0, 1.0,    0.498, 0.263, 0.0, 1.0,   0.749, 0.557, 0.0, 0.176,   1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0,   0.165, 0.0, 0.0, 0.176,   0.329, 0.0, 0.0, 1.0,   0.498, 0.165, 0.0, 1.0,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 1.0,   1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0,   0.165, 0.165, 0.0, 0.0,   0.329, 1.0, 0.0, 0.0,   0.498, 1.0, 0.0, 0.176,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0,   0.247, 0.0, 0.216, 1.0,   0.498, 0.0, 1.0, 1.0,   0.749, 0.165, 1.0, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008,   0.165, 0.835, 0.576, 0.094,   0.329, 0.404, 0.859, 0.204,   0.498, 0.012, 0.859, 0.812,   0.667, 0.004, 0.188, 0.839,   0.831, 0.004, 0.004, 0.435,   1.0, 0.004, 0.027, 0.129,];\nvar bhw1_04_gp = [0, 229,227,  1,   15, 227,101,  3,    142,  40,  1, 80,   198,  17,  1, 79,   255,   0,  0, 45]\nvar black_Blue_Magenta_White_gp = [0,   0,  0,  0, 42,   0,  0, 45, 84,   0,  0,255, 127,  42,  0,255, 170, 255,  0,255, 212, 255, 55,255, 255, 255,255,255]\nvar es_landscape_33_gp = [0,   1,  5,  0, 19,  32, 23,  1, 38, 161, 55,  1, 63, 229,144,  1, 66,  39,142, 74, 255,   1,  4,  1]\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969,   0.188, 1.0, 0.533, 1.0,   0.349, 0.863, 0.114, 0.886,   0.627, 0.027, 0.322, 0.698,   0.847, 0.004, 0.486, 0.427,   1.0, 0.004, 0.486, 0.427,];\nvar heatmap_gp = [0,     0,  0,  0, 128,   255,  0,  0, 224,   255,255,  0, 255,   255,255,255 ];\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\nvar lava = [0.0, 0.0, 0.0, 0.0,   0.18, 0.071, 0.0, 0.0,    0.376, 0.443, 0.0, 0.0,   0.424, 0.557, 0.012, 0.004,   0.467, 0.686, 0.067, 0.004,   0.573, 0.835, 0.173, 0.008,   0.682, 1.0, 0.322, 0.016,   0.737, 1.0, 0.451, 0.016,   0.792, 1.0, 0.612, 0.016,   0.855, 1.0, 0.796, 0.016,   0.918, 1.0, 1.0, 0.016,   0.957, 1.0, 1.0, 0.278,   1.0, 1.0, 1.0, 1.0,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016,   0.169, 1.0, 0.267, 0.098,   0.337, 1.0, 0.027, 0.098,   0.498, 1.0, 0.322, 0.404,   0.667, 1.0, 1.0, 0.949,   0.82, 0.165, 1.0, 0.086,    1.0, 0.341, 1.0, 0.255,];\n\narrayMutate(bhw1_04_gp,(v, i ,a) => v / 255);\narrayMutate(black_Blue_Magenta_White_gp,(v, i ,a) => v / 255);\narrayMutate(es_landscape_33_gp,(v, i ,a) => v / 255);\narrayMutate(heatmap_gp,(v, i ,a) => v / 255);\n\n\n\nvar sunset = [0.0, 0.471, 0.0, 0.0,    0.086, 0.702, 0.086, 0.0,   0.2, 1.0, 0.408, 0.0,   0.333, 0.655, 0.086, 0.071,   0.529, 0.392, 0.0, 0.404,   0.776, 0.063, 0.0, 0.51,    1.0, 0.0, 0.0, 0.627,];\n// List of palettes\n// good fire palettes:\nvar palettes = [\n  fire,\n  inferno,\n  lava,\n  BlacK_Blue_Magenta_White,\n  Blue_Cyan_Yellow,\n  black_Blue_Magenta_White_gp,\n  gr65_hult,\n]\n\n// These don't look that great as fire palettes:\n// Analogous_1,\n// BlacK_Red_Magenta_Yellow,\n// GMT_drywet,\n// bhw1_04_gp,\n// es_landscape_33_gp,\n// rainbowsherbet,\n// heatmap_gp,\n\nvar currentPalette = random(palettes.length);\n//var currentPalette = 0\nsetPalette(palettes[currentPalette]);\n\nexport function showNumberPaletteMode() {\n  return currentPalette + 1;\n}\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\nexport var mode = 1\nexport var fireScale = 3\nexport var risingSpeed = 1\nexport var morphSpeed = 1\nexport var intensity = 1\n\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderIntensity(v) {\n  intensity = 0.1 + v*10 \n}\nexport function sliderScale(v) {\n  fireScale = v\n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function toggleDisableSliders(v) {\n  if (v) {\n    fireScale =\t11.000000\n    mode = 0.000000\n    morphSpeed = 1.235062\n    risingSpeed = 5.199982\n  }\n}\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\nexport function beforeRender(delta) {\n  timeCounter += delta; // Increment the time counter by the time since the last frame\n\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}\n\nexport function render3D(index, x, y, z) {\n  // Calculate the distance of the LED from the center of the sphere\n  var distanceFromCenter = sqrt(x*x + y*y + z*z);\n\n  // Angle relative to the y-axis (from south pole)\n  var theta = acos(y/distanceFromCenter);\n\n  // Azimuthal angle (around y-axis)\n  var phi = atan2(z, x);\n\n  // Adjust the y-coordinate to make the fire wrap around the sphere\n  yAdjusted = yTime + (1 - theta/PI) + 0.2*sin(phi);  // sin(phi) is added to make the fire wrap around\n  \n  // Call out to the noise function based on the mode\n  v = modeFn(x, yAdjusted, morphTime); \n  \n  // Modulate the intensity based on angle theta (distance from the south pole)\n  v = v * (intensity - theta/PI);\n  \n  // // Modulate the intensity further based on the vertical position\n  // v = v * (1 + y)/fireScale;  // Notice the +y instead of -y  \n\n  // Keep the palette from wrapping if noise goes past 1.0\n  v = min(v, 1);\n  paint(v, v);\n}\n\n"
  },
  "preview": "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"
}