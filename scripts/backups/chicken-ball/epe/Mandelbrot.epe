{
  "name": "Mandelbrot",
  "id": "9fnJ3o6Eq4PJQ5D96",
  "sources": {
    "main": "/*\n Mandelbrot Set 2D - brute force version!\n \n Displays and animates a view of the Mandelbrot set -- the set\n of points for which the series (z[n+1] = z[n]^2 + C) remains within\n a bounded region (at least during our relatively small number of\n iterations) rather than heading for infinity. \n \n Requires a 2D LED array and appropriate pixel mapper.\n\n This is *very* compute intensive, so be careful with the interaction between\n maxIterations and display size.  Somewhere around maxIterations=15 or 16 looks\n good on a 16x16 matrix.  Reduce iterations for higher frame rate or for larger\n displays.  Too many iterations may cause your Pixelblaze to behave \n erratically or become unresponsive.\n \n Reference:\n https://mathworld.wolfram.com/MandelbrotSet.html\n \n Version  Author        Date        \n 1.0.0    JEM(ZRanger1) 12/08/2020  \n*/ \n\n// how many roads must a man walk down, before he runs out of execution steps...\n// the answer my friend, is about 17 on a Pixelblaze 2 driving a 16x16 matrix.\nexport var maxIterations = 15\n\n// complex number describing the region of the set we're viewing. There is \n// a relationship between number of iterations and how much of the set is visible.\n// If you reduce iterations and don't see much, try changing these constants a bit.\nvar cR = -0.94299  \nvar cI = 0.3162\n\n// various variables for holding calculation results. Up here so they\n// can be easily exported for debugging if necessary\nvar cX,cY;\nvar fX,fY;\n\n// timers used to animate movement and color\nvar t1,t2\n\n//UI\n\n// range of maxIterations is 5 to 17.  You can go higher if you want, but\n// be a bit careful.\nexport function sliderIterations(v) {\n  maxIterations = 5+floor(v * 12)  \n}\n\n// The viewed portion of set moves w/timer t1. Timers and constants are hand-tuned, so\n// feel free to experiment to see different areas of the set.  \nexport function beforeRender(delta) {\n  t1 = (triangle(time(0.2)) - 0.5) * 2.4;   \n  t2 = time(0.05);\n\n  cX = cR + t1;       \n  cY = cI + (t1 / 2.5)\n}\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n// In Render2D, we iterate over every pixel until the value at that point heads\n// for infinity (er, 4 in our case) or we hit the maximum number of iterations.\n// x/y pixel coords are mapped to -0.5 to 0.5 to keep everything in 16.16 range.\n// The mapper's coordinate normalizing mechanic really helps out here.\nexport function render2D(index,x,y) {\n  x = x - 0.5; y = y - 0.5;    // scale coords to range -0.5 to 0.5\n  \n// iterate fn over the pixel 'til we hit maxIterations or the value goes\n// out of range.\n  for (var iter = 0; iter < maxIterations; iter++) {\n    x2 = x * x; y2 = y * y;\n    if ((x2 + y2) > 4) break;  // 4 is our stand-in for infinity!\n\n    var fX = x2 - y2 + cX;\n    var fY = 2 * x * y + cY;\n    x = fX; y = fY;\n  }\n// once we're out of the loop, color by how quickly the function tended towards infinity\n// quicker exits give lower hue values, a point that didn't ever break out is displayed \n// as black.  More iterations would give more detail, but we run out of CPU pretty quickly here\n//\n  (iter < maxIterations) ? hsv(t2+(iter/maxIterations),1,1) : rgb(0,0,0);  // weird, but just a hair faster... \n}"
  },
  "preview": "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"
}