{
  "name": "DNA",
  "id": "W4frQgTaYNNS7FtyW",
  "sources": {
    "main": "export var speed = .03\nexport function sliderSpeed(v) {\n  speed = 3 + (v * 10)\n}\n\nexport var strandWidth = 0.1\nexport function sliderStrandWidth(v) {\n  strandWidth = 0.05 + v\n}\n\nexport var freq = 1\nexport function sliderFrequency(v) {\n  freq = .1 + (v * 18) \n}\n\nexport var myMode = 1\nexport function sliderMode(v) {\n  myMode = ceil((v * 2))\n}\n\nexport var distance = 0.4\nexport function sliderDistance(v) {\n  distance = v\n}\n\nexport var t\nfunction beforeSinushimmer(delta) {\n  t = time(speed / (65.536))\n}\n\nexport var mode = 0.1\nexport var count = 0\n\n\n\n// put these lines near the top, outside of function declarations\nvar viridis = [ 0.0, 68/255, 1/255, 84/255, 0.1, 72/255, 36/255, 117/255, 0.2, 65/255, 68/255, 135/255, 0.3, 53/255, 95/255, 141/255, 0.4, 42/255, 120/255, 142/255, 0.5, 33/255, 145/255, 140/255, 0.6, 34/255, 168/255, 132/255, 0.7, 68/255, 191/255, 112/255, 0.8, 122/255, 209/255, 81/255, 0.9, 189/255, 223/255, 38/255, 1.0, 253/255, 231/255, 37/255,]\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\nvar magma   = [ 0.0, 0/255, 0/255, 4/25, 0.1, 20/255, 14/255, 54/255, 0.2, 59/255, 15/255, 112/255, 0.3, 100/255, 26/255, 128/255, 0.4, 140/255, 41/255, 129/255, 0.5, 183/255, 55/255, 121/255, 0.6, 222/255, 73/255, 104/255, 0.7, 247/255, 112/255, 92/255, 0.8, 254/255, 159/255, 109/255, 0.9, 254/255, 207/255, 146/255, 1.0, 252/255, 253/255, 191/255, ]\nvar plasma  = [ 0.0, 13/255, 8/255, 135/255, 0.1, 65/255, 4/255, 157/255, 0.2, 106/255, 0/255, 168/255, 0.3, 143/255, 13/255, 164/255, 0.4, 177/255, 42/255, 144/255, 0.5, 204/255, 71/255, 120/255, 0.6, 225/255, 100/255, 98/255, 0.7, 242/255, 132/255, 75/255, 0.8, 252/255, 166/255, 54/255, 0.9, 252/255, 206/255, 37/255, 1.0, 240/255, 249/255, 33/255, ]\n\n//setPalette(viridis)\n//setPalette(inferno)\n//setPalette(magma)\nsetPalette(plasma)\n\n\nfunction sinushimmer(index, r, phi, theta) {\n  \n  if (myMode === 0) {\n    //mode = wave(t*3)\n    mode = bezierQuadratic(t, 0, 18, 0)\n    \n  } else if (myMode === 1) {\n    mode = 0.2 + wave(t) \n  } else if (myMode === 2) {\n    \n    count = wave(t)\n    mode = count + freq\n    \n    /*\n    if (mode < 36) {\n     mode = count + .0002\n    } else if (mode > 36) {\n      mode = count - .0002\n    }\n    */\n    //if (mode >= .9) {\n      //mode = 1 + t\n    //}\n  }\n   \n  //freq = perlinTurbulence(r, phi, theta, 2, 0.8, line * 4)\n  \n  line = near(r, \n    0.5 + distance * cos((mode*phi - t) * (PI2))\n  , strandWidth)\n  \n  \n  //line = bezierQuadratic(t, 0, line*4, 0)\n  //perlinTurbulence(x, y, z, lacunarity, gain, offset, octaves)\n  \n  paint(line, 1)\n  //hsv(line/4, 1, line)\n}\n\n\nexport function beforeRender(delta) {\n  beforeSinushimmer(delta)\n}\n\nexport function render3D(index, r, phi, theta) {\n  sinushimmer(index, r, phi, theta)\n}\n  \nexport function render2D(index, r, phi) {\n  render3D(index, r, phi, .5) // Equatorial section\n}\n\nexport function render(index) {\n  render2D(index, index / pixelCount, 0)\n}\n\n// Utilities\n\n// Several modes define a line in space. This sets the defualt thickness of\n// those. Use a higher percentage for projects with fewer pixels.\nvar halfwidthDefault = 0.125\n\n// Returns 1 when a & b are proximate, 0 when they are more than `halfwidth`\n// apart, and a gamma-corrected brightness for distances within `halfwidth`\nfunction near(a, b, halfwidth) {\n  if (halfwidth == 0) halfwidth = halfwidthDefault\n  var v = clamp(1 - abs(a - b) / halfwidth, 0, 1)\n  return v * v\n}"
  },
  "preview": "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"
}