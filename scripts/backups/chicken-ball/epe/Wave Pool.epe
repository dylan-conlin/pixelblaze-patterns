{
  "name": "Wave Pool",
  "id": "EaqRjmexGiXbNfRzj",
  "sources": {
    "main": "// Water Caustics \n// Bright patterns made by light bouncing around and through the\n// curves made by ripples on the water's surface.  \n//\n// MIT License\n// Take this code and use it to make cool things!\n//\n// 1/27/2022 ZRanger1\n\nvar timebase = 0;\n\nexport var contrast = 1/24;\nexport var whiteLevel = 1.125;\nexport var speed = 3.5;\n\nexport function sliderSpeed(v) {\n  speed = 1 + 8*v;\n}\n\nexport function sliderWhiteLevel(v) {\n  whiteLevel = 0.8 + (1-v)\n}\n\nexport function sliderContrast(v) {\n  contrast = 1/(16+24*v);\n}\n\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase / 6;\n}\n\nexport function render2D(index,x,y) {\n  var px,py,ix,iy,c;\n  \n  // scale coords to work well as angles for sin/cos\n  px = x * PI2 - 20;  py = y * PI2 - 20;\n  ix = px; iy = py;\n  c = 1;\n\n  // build a couple of lumpy circular \"waves\"\n  var t = t1 * (1-speed);\n  tmp = px + cos(t - ix) + sin(t + iy); \n  iy = py + sin(t - iy) + cos(t + ix);\n  ix = tmp;\n\n  c += 1/hypot(px/sin(t + ix)*contrast, py/cos(t + iy)*contrast)\n\n  var t = t1 * (1-speed/2);\n  tmp = px + cos(t - ix) + sin(t + iy); \n  iy = py + sin(t - iy) + cos(t + ix);\n  ix = tmp;\n\n  c += 1/hypot(px/sin(t + ix)*contrast, py/cos(t + iy)*contrast)\n  \n  // scale, gamma correct and draw!\n  c = 1.65-sqrt(c/2);\n  c = c * c * c * c;\n  c = clamp(c,0,1);\n  \n  hsv(0.6667- (0.3 * c),whiteLevel-c,c)\n  \n}\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCACWAGQDASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAABQYABAECAwcJ/8QAUxAAAQIEAgILCQsJBgcAAAAAAQIDAAQFEQYhErIiMTVBUWFzdKGxwRMUIyQ0cXKBsyUmMjZjZIKRosPRBxYzQlJiwtLwFSeDkpOjQ0RTdeHx8v/EABkBAAMBAQEAAAAAAAAAAAAAAAECAwAEBf/EAC0RAAIBAgMHBAICAwAAAAAAAAABAhExAyFxEjJBUYGx8CJhkdFCwRMzoeHx/9oADAMBAAIRAxEAPwD5ouJuWN7RfSR/nMYxnlWZ/lu1cbubbXLjXjTGYtW6gPl+1ce3XM8jC3kcZBrSpzh4WiPtH8Y5UAXcmgf+kesRZp25bnoHrjjh5IJm1b4btDsLfpxNSzM7po5aY6zBvSvQZXnL/sDASa3SRy0x1mDSRegSx+dP+wMTluoX8lo+7BJT7+E3H/MgwXlB75KlxXv/AKhgW4LY5b5ftgvJ54kqv9frmNK3QM3Z+y7hyjbrK/wdcx5u0PdN/wA41xHpFGyrKhxNH7cedyydKrvptf8A+hC4d30NGzfnA2B2SyP2ke0MEnD75KXv7NvqTAtlQWHbfqqQD/qH8YJ/CxBS/Sb1RFnc1KS+exyxBu1NekNURIxXzeszfp9giRo2Q6sjU5lvnH3hjGNDpVupHa8YOsuMLOwTy/3hjOMc6vUT84OsuE4i4VzeRQE0p6wt4EHpEVsMi/fvE0e2CEs2UUmZBz0WUi/HeKWFk3TUOJknrguzZk6wk/ddzea3SRy0x1mDacsPSx+dP+wVAB4k1VWd7TExDCgXw/KDhmn/AGKoV5JCvJrT7Bj49/bQ+WEFZCxxFVt/YjWMC3fj8zy6YIUbZYjrR9HWgSt0Gnw0/YfpA92lcm0ftwgsi1fe9XWIf6PnW1ck37QQgNbvv+rrELh3YkbPT6KKPJ5/zp1oMg6Vcph/eSOgQJlkhTVRBFxa/SYJS6+6VOkrO2opJ+qOh5+exSe989kYr27k/wAr2CJGcQC1eqA+V7BEjRshlZHJfwEcv94YmLlBVVqVt6ZsfrXGFmyE84+8MaYozq9W53/NCUzEwln5zQXYTekzp4G+2B2FR4KoH5EwUlUhVEnyDeyLdMD8JC8tUzwMmBwYkP65ecSs8bVVfOH4YkfF+T50/wCxVC4/uovnL8MiRbD8lxzT/sVQJWQ0rrT7KMyjR/KDL/vPpNvXFugbPEFaPEnWEaTif7wJPieSeqN8M51qtniTrQsnWPQ0t3p+xgo1v7dUPkWz/uCEJKSK++OIdYh9oueIDyCPaCEgtn84ngOIdIjYd3oTTyen0DpQXbqXEntME6a3pTdLURkkJz48v/MDJEhUvVFA5aPaYMUoXdpo9CKt5FMR0b84FWvbu1Dlj1CJErp0q5UD8seyJDRsinBHJw7FPL/eRzxMfdep85/miTDhQ0ogZpc0vtn8IxiVQVV6nY3HfP8ANCq5sJZ+c0HqJ4xhqoK2tIq9V1RSwe34jVVb3cFf10xfwwNLC1R4jteuK2DU3pVWPAyrqEI7S1EeSklzQMmN1F85fhgZWVYdkb7ffUx0NrgG7ulM8u/rCDbA970hzqZ9muNKyM8/j7LE0z7/AKVVvpeTfojlhRGlV68eAJ1ovTiAnHLB4XkdkUMFXM/iA8Y1zEm/T0Qsc1KvmYwUhNsSHe8WT7RMJymyMTPDhKSP8whwpBP51LG93m2bf4kKs0nRxO6OBKT0wYXeglq+chfpnkFR9AdsHaKnTdpQ409cAab5DP8Aojthkw+NJ6j+YdZisnRMpjL1PX9AqtZ1uocsrsiRKznWp/lj2RIrFOiKKyKs1+id9L7xUZqwCq3UARcGdOR9JUaPm8u4TtkjXVHSqbuz/PjrKhRoWfnIYcI2VhqqjgSD0xywSm9FrR4GVdUdsGfF2rcl/FHLBA9xKzxtL1YlLNS1RN5bWv2C3d0pnl39YQaY+L8hzqZ9muAru6Uzy7+sINMfF+Q5zM6i4MrIXzuFqgPfuzxLSeiBmBTebxATv21jBeoJBxklR3lHoEB8A7KZrx4QNYxH8PgWFpDBSPjWvmbftIWKkkpxPMEbyB0GGij/ABrVzFHtDC3VE2r00u36mXbBhvPQSWSFam+Qz/ojthnw+PCUg8Dd+kws0vyKoeh2KhmoGQpZ+SPbFZ2K4u89f0CpuXU9U6goEeUL24kdgbzk+eGZXEiu21kRniNPIFv5y7ltrY6xjeqbuz/PjrKjm55K79HWjatKKKvU1A2InFEH6SozvQ7YLJrzgMeCjpUGrAH/AIJ1hGuDD7iVIb5Zd1YxgTOj1gcLSv4Yxg46NLnRwtui30REHaXQhPLa1+wW7ulM8u/rCDbO4sgN7vma1FwEe3TmeXf1hBpjOjyA+dTWouHdkLIOVC5xPpcC19RgJ+T/APT1vzDrVBubINefUDcocWOiAmATZ2t/R61RD8H0DG0hjpOWLyPmCPaQu1DZ1SaN/wBResYY6YLYzA+YJ9pC5MDx6bUbWCHD9oxo3JzVkhTpp8TnvR7FQzYfOnK05Y2ghSfqJELFN8mnPQPUYY8O7kyxvtFQ+0Pxi8rF8aicn7rsVGzeanT84X2RIwz5ROcursiRmcU94GL8le+jrRK3upU+dq1lRhw+LPjgCNaM1vKq1TnatZcVW8enDj5yGPAKb0yqcbSx0CNcLkJkJi22W3j1fhG+ABal1E/uLH2RHHDavFXU75ad6zEL16HLiujeoPf3UmucP6wg3J7myHOprUXAR/dSa5w/rCDcgb06Q4puaH+2qDLdXnAMrhV5fuzULbzyuuA2AlbOsk7ZUn+OL0y9oVycHC6rrgbgQ2VV+G6TrxNr0voDDzhJeXG2mJvjZA4aen2kLDp01zqvkXNYw1Uz48M/9vT7QwptjTZnlcDbnWIWN/gWbzQrU3yac9A6phhw9lRmjwKVrJhepvk056B6jDHQSU4bChlZRz+miLMtj/lquxUl03fnOXV2RIzJm7k2eF9XZEhjhxH6gU62pLLgIzWUoTxkKNxG1bQVViqptYiaWb+YrMHahUaW1Uky65EGRJSpKdNYy897wNmHFTdSelEnxRgFbKbDY5k3vtnNROfDBTda0O+M2k215kF8DrDFFn1ryTZefnAA6Y1oEk81KLfKbMpbc0lXGX9XjlOS3d5yQddUVzam0BS9oryyy8ykj1R2xEylMhS+90hCO7KIG3nccMT405kZP+SQJfzqcwd5Tz6h5tMfhBuQUlunyilmyRNTCieItqt1QXnaNIyFPE1MMB+ec8JmtQ2Sk/CsCOLLaipN02UmZNc7TmCw60kocWFFVxfPIk7cLtKSBJ1ZJ2lTiqo+8lq6XHdgdIZ39cDMEoUh2sAjNJGlxW0rwBm0Fb1OldplYB0d8XWRt7cFMPNyIrU930zpyrJUhtGkRojTNhcG8M16WiqgoRcq3HqR8FjBh9WTZp9tLjCzC6ae/J98yryNCYeS4EIuDfatmMt4wNrkuJCpJepaO5JdRoLF9K6TkfhX3hCxNPramyEqsGiUo4hfLzwIw41BGH8lKM7SAKWJ0WzCSD9RhnobDhw8zLBPh3lFbabjZC6Te+1vb8LtbmFIn0htVkIQ24i4uQShJPSY1U2H64y0sabZWgKSTbLK464dqqqVlFy3sq5h+mSTjhnCW8xMLG35okBpSQTNM90eb0nCTc5jay2okZxdbnNLYrm/8f7Cc/S1VinNOyydJbaynL9knh4iYy9TjICozJc0VmUSQL2NlaNuyKxm5zB89Mya03TmAkm4zEXJpC5yi16fWSVDvdjPi0fwjOq0KqLTSrl/w4KcU/iSjsLOkGEM6V+JIJJ9Qgm6+l5mky2jdTQXMfVn/DAXvgt1yZeWT3VCe5WO3sUgHqghLi9VpCidi5KoF943cUD1GA1aoJZ9EXcW1UsYhbaB8GmyE5/BIsOsRfwxVmXafNyyAD4NbhVwlOfZFSsYcM3TJmadd0JvTU801fNQv/7jaj4bmqN3EuZtuIUklJ3lJP4xN7DhSpLKlVcWHADiyWZI2LT6EeoKvDdP0WTlHJ2zoCmlIUscNwb29YhSlW1O4vlSRbSeQbnf2rwbmkv1GpvtJJJccUkDhsonth2nW5TFa2Yr2GFlmnvyiXknTWltTmirgG90x5hW2O9qvNtfsOFMNyQ7TJpDTgIsNE34Ns9kLtUlFTc9Un8vBhKzxk2v2xoxpxDgSSk6h6fokouZlQ6rZuMNA8eQGXqEDzTks48TJrN0pdCL/Ryi/WZdx2apLyFElphlSsr3GglXXeNZtB/PtcyNkA6U3H7QavAq6XDBpVq+DGhuj0lS3QHdEJWQBxbY64kKPjD1lpClAjMpHBl2RIXYfM5MuR2blxiSpMNvE6SnAAo8Rse2DlckUSuFZllIGi++HCBwd2SkCJEjTbUkikG6ifV3SvElVVYbBTtwBbO5v03i1L1BQdpoAt3swlQ48yR1mJEi9MkXxMl0O1RxA/Uq484RoJKwgDgGichFyRxfNSswpg7NpTKwEnMAkmJEgbMaUpwJtJPoCaZNKTiNhlQCk91CgbZg7cOElPMyBqDiWdKYQsqSo2sDmLxIkSxFYE8nGnIGTGIEVJaHJljSeQ2Rpg7Z4xAiVdL6KvLqtohkAZb5IzMSJDpJJpCQzq/LoY6c+y/SbupUVNyjQuAM/Bj8YEB1KZ/uguVGcd2+EIt1A/XEiRNXYz4hCm1SUkmC13BxVlXvpDiiRIkBxVSabP/Z"
}