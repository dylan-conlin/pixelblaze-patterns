{
  "name": "perlin wavepool",
  "id": "Jzzbk7TJJwgvn2XCe",
  "sources": {
    "main": "// We're using Perlin noise to simulate a wave pool.\n// Lacunarity, gain, and octaves control the character of the Perlin noise function.\n\nexport var lacunarity = 2 // The lacunarity controls the frequency of the octaves.\nexport var gain = 0.5 // The gain controls the amplitude of the octaves.\nexport var octaves = 4 // The number of noise functions summed together.\n\nvar fire = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\n\nvar palettes = [fire, inferno /*, ... other palettes */];\nvar currentPalette = random(palettes.length);\nsetPalette(palettes[currentPalette]);\n\nexport function showNumberPaletteMode() {\n  return currentPalette + 1;\n}\n\n\n// Zoom value, allows to control the density of the wave pool.\nexport var zoom = 1.0 \n\n// Slider for zoom value, range from 1 to 20.\nexport function sliderZoom(v) {\n  zoom = 1 + (1 - v) * 19\n}\n\n// Slider to control lacunarity, between 1.0 and 3.0\nexport function sliderLacunarity(v) {\n  lacunarity = 1 + v * 2\n}\n\n// Slider to control gain, between 0.0 and 1.0\nexport function sliderGain(v) {\n  gain = v\n}\n\n// Slider to control octaves, between 1 and 8\nexport function sliderOctaves(v) {\n  octaves = 1 + floor(v * 7)\n}\n\n// Time variable to create animation.\nvar t = 0 \n\n// Before rendering, we update our time variable.\nexport function beforeRender(delta) {\n  t += delta / 2000\n // Update the palette\n  setPalette(palettes[currentPalette]);\n\n\n}\n\n// For each pixel, we calculate its brightness and color based on Perlin noise.\nexport function render3D(index, x, y, z) {\n  // Generate Perlin noise with coordinates scaled by zoom factor.\n  var n = perlinFbm(x*zoom, y*zoom, t, lacunarity, gain, octaves)\n\n  // The output of the Perlin function is between -1 and 1, so we shift and\n  // scale it to be a brightness value between 0 and 1.\n  n = (n + 1) / 2 \n\n  // Determine hue based on brightness (Perlin noise value).\n  var hue = n * 0.6 // Adjusted to give a water-like color\n\n  // Set the current pixel to the calculated hue, saturation, and brightness.\n  //hsv(hue, 1, n)\n   paint(hue, n);  // Replace 'v' with the appropriate value based on your wave pool logic\n   \n   \n}\n"
  },
  "preview": "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"
}