{
  "name": "fast pulse with control",
  "id": "we5wH2iTAH726n39W",
  "sources": {
    "main": "/*\n  Fast pulse 2D/3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\nexport var speed = 10;\nexport var stripWidth = 1;\n\nexport function sliderStripWidth(v) {\n  stripWidth = map(v, 0, 1, 1, 0);\n}\n\n\n\nexport function sliderSpeed(v) {\n  speed = pow(10, map(v, 0, 1, 1, -1));\n}\n\nexport function map(value, fromLow, fromHigh, toLow, toHigh) {\n  return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));\n}\n\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(speed)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x \u2212 x1) + b(y \u2212 y1) + c(z \u2212 z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 3)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < stripWidth\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lengths. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}