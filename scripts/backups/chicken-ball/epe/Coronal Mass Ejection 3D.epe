{
  "name": "Coronal Mass Ejection 3D",
  "id": "ndbHq6mdicobkpCHx",
  "sources": {
    "main": "// Coronal Mass Ejection 2D\n// A demonstration of Pixelblaze's Perlin noise and smoothstep functions\n//\n// 10/09/2022 ZRanger1\n\n\nexport var speed = 8\nexport var sliderSpeed = function(v) {\n  speed = 35 - (v * 32)\n}\n\nexport var coreSize = 0.1\nexport var sliderCoreSize = function(v) {\n  coreSize = 0.1 + v\n}\n\nexport var flareAmount = 0.675\nexport var sliderFlareAmount = function(v) {\n  flareAmount = 1 - v\n}\n\nvar c2 = coreSize / 4;\ntranslate(-0.5,-0.5);\nsetPerlinWrap(3,256,256);\nexport var noiseYTime\nexport var noiseTime\n\nexport function beforeRender(delta) {\n  \n  // per-frame animation timers\n  t1 = time(0.2);\n  noiseTime = time(10) * 256;\n  noiseYTime = time(speed) * 256;\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n\nexport function render2D(index, x, y) {\n  // convert to radial coords\n  tmp = hypot(x,y); x = atan2(y,x); y = tmp;  \n  \n  // generate noise field \n  v = 1-perlinTurbulence(x,y - noiseYTime,noiseTime,1.5,.25,3)\n  \n  // convert noise field to discrete radial \"flares\"\n  v = max(smoothstep(flareAmount,1,v),(1-((y*v)-c2)/coreSize));  \n  v = v * v * v;    \n\n  // draw star + stellar flares, always white hot at center\n  // occasionally throwing off super hot flare bits\n  hsv(t1 - (0.125*v),6.5*y-v, v);\n}\n"
  },
  "preview": "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"
}