{
  "name": "Cubefire 3D",
  "id": "tf3GibYMsjRMAx4hj",
  "sources": {
    "main": "/*\n  Cube fire 3D\n  \n  3D example: https://youtu.be/iTM-7ILud4M\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully in 2D\n  and 1D.\n  \n  The base 3D variant is based on multiplying sine waves of x, y, and z \n  position. This results in a regular 3D array of spheres. The size of the\n  spheres pulses, and their position in 3D space oscillates at different\n  frequencies.\n*/\n\n\nspeed = 1  // How fast the spheres travel through 3D space\n\nexport function beforeRender(delta) {\n  t1 = time(.1 / speed)    // x offset\n  t2 = time(.13 / speed)   // y offset\n  t3 = time(.085 / speed)  // z offset\n\n  // Oscillate the scale coefficient of space between 0.25 and 0.75\n  scale = (.5 + wave(time(.1))) / 2\n}\n\nexport function render3D(index, x, y, z) {\n  // Color is 20% dependent on each axis and cycling every 6.5 seconds\n  h = x / 5 + y / 5 + z / 5 + t1\n  \n  // Since wave() returns a 0..1 sinusoid, and we multiply it by other \n  // phase-offset wave()s, the final output will be a series of spheres in space\n  // with a value of 0..10\n  v = 10 * (wave(x * scale + wave(t1)) * \n            wave(y * scale + wave(t2)) * \n            wave(z * scale + wave(t3)))\n            \n  // The outer surface of the spheres, with the lowest values, will be white. v\n  // values between 2 and 10 (the core of the spheres) will be colorful.\n  s = v - 1\n\n  /*\n    This looks like typical gamma correction here, but really it only serves to\n    increase the negative space between nearby spheres; after this the cores\n    will all have v > 1 (e.g. center v == 10^3)\n  */\n  v = v * v * v  \n  \n  hsv(h, s, v) // Recall that v is automatically capped at 1.0 by hsv()\n}\n\n// As we commonly do with 3D fields, a decent 2D rendering is a slice at z == 0\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\n/*\n  A common approach to creating 1D versions of 3D patterns is to render the line\n  in 3D where y & z = 0. To translate pixel indices to x's 0..1 world \n  coordinates, divide index by pixelCount to output a 'percent this pixel is into\n  the strip', i.e. 0..1. Evaluating this aesthetically in 1D, it seems to look\n  best scaled out so we multiply by 8 to plot a longer line from 3D space.\n*/\nexport function render(index) {\n  render3D(index, index / pixelCount * 8, 0, 0)\n}\n"
  },
  "preview": "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"
}