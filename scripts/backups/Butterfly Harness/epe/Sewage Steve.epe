{
  "name": "Sewage Steve",
  "id": "CW5RpnPnkbiAroxJe",
  "sources": {
    "main": "/*\n Darkstar 2D\n \n Playing with negative space a little...\n \n Adapted from GLSL shader \"Hexagon\" by @hintz 2013-05-07\n 11/25/2021 ZRanger1\n*/\n\n// animation control variables\nexport var offset = 0.025;\nexport var speed = 0.9;\nexport var shift = 7;\nvar timebase = 0;\n\n\n// UI - controls both speed and direction\nexport function sliderSpeed(v) {\n  speed = -1+2*v;\n}\n\nexport function sliderShifter(v) {\n  shift = 1+floor(v * 15);\n}\n\n\n// 2D rotation about origin\nvar cosT = 0;  var sinT = 0;\nvar outX,outY;\nfunction rotate2D(x,y) {\n    outX = (cosT * x) - (sinT * y);\n    outY = (sinT * x) + (cosT * y);\n}\n\ntranslate(-0.5,-0.5);\n\nexport function beforeRender(delta) {\n  var theta;\n  \n  timebase = (timebase + delta/1000) % 1000;\n  \n  // set up rotation angle\n  theta = speed*timebase*PI/3.0;\n  cosT = cos(theta); sinT = sin(theta);\n  \n  // rotation rate for individual offset components\n  offset = 0.275 * (cosT + sinT); \n}\n\nexport function render2D(index,x,y) {\n  var r,g,b;\n  var tmp;\n  \n    r = g = b = hypot(x,y)\n    \n    tmp = abs(offset-x)\n    r *= tmp; g *= tmp;\n\n    rotate2D(x,y);\n    tmp = abs(offset-outX);\n    p2 = outX;\n    g *= tmp; b *= tmp;\n    \n    rotate2D(outX,outY);\n    tmp = abs(offset-outX);\n    p3 = outX;\n    b *= tmp; r *= tmp;\n    \n    rotate2D(outX,outY);\n    tmp = abs(offset-outX);\n    r *= tmp; g *= tmp;\n    \n    rotate2D(outX,outY);\n    tmp = abs(offset-outX);\n    g *= tmp; b *= tmp;\n    \n    rotate2D(outX,outY);\n    tmp = abs(offset-outX);\n    b *= tmp; r *= tmp;\n  \n    g *= abs(x)<<shift; b *= abs(p2)<<shift; r *= abs(p3)<<shift;\n    rgb(r,g,b); \n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}