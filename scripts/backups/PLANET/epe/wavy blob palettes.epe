{
  "name": "wavy blob palettes",
  "id": "42qwBpnCvjTJJ8hZd",
  "sources": {
    "main": "// Wavy Bands Pattern for 2D/3D LED Matrix\n// Requires a correctly configured 2D map.\n// MIT License - use this code to make more cool things!\n// 6/22/2023 ZRanger1\n\n// Global variables\nvar timebase = 0; // Time accumulator for animation control\nexport var nColumns = 4; // Number of displayed columns\n\n// Speed variables with default values\nvar xSpeed = 4; // Speed of x-axis wave movement\nvar ySpeed = 2; // Speed of y-axis width variation\n\n// Parameter names that correspond to Pixelblaze UI controls\nexport var shimmer = true;\nexport var transition = 0.60;\nexport var secondsPerPalette = 10;\n\n// Internal state variables\nvar paletteIndex;\nvar lastPaletteIndex = -1;\n\n// Helper function to handle palette transitions\nfunction handlePaletteTransitions() {\n  paletteIndex = time(secondsPerPalette / 65.536 * palettes.length) * palettes.length;\n  if (frac(paletteIndex) > (1-transition)) {\n    var transitionFactor = (frac(paletteIndex) - (1-transition)) * (1/transition);\n    if (shimmer) {\n      if (wave(transitionFactor/2 - .25) > random(1)) {\n        paletteIndex = mod(paletteIndex + 1, palettes.length);\n      }\n    }\n  }\n  // Only set the palette if the floor index has changed\n  var floorPaletteIndex = floor(paletteIndex);\n  if (floorPaletteIndex != lastPaletteIndex) {\n    setPalette(palettes[floorPaletteIndex]);\n    // update the column count if the palette changes\n    // the number of columns is the number of colors in the palette\n    nColumns = palettes[floorPaletteIndex].length / 4;\n    lastPaletteIndex = floorPaletteIndex;\n  }\n}\n\n\n// Function called before each frame render. Calculates time-based variables\n// for animation.\nexport function beforeRender(delta) {\n  // Accumulate time with loop around 3600 seconds for continuous animation\n  timebase = (timebase + delta / 1000) % 3600;\n  \n  // Calculate speeds for x and y axis movements based on slider inputs\n  tx = -timebase / xSpeed;   // Speed of x-axis movement, negative for reverse direction\n  ty = timebase / ySpeed;    // Speed of y-axis movement\n}\n\n// UI slider to control the number of columns\nexport function sliderColumns(v) {\n  nColumns = floor(1 + v * 10); // Range from 1 to 10 columns\n}\n\n// UI slider to control the speed of x-axis wave movement\nexport function sliderXSpeed(v) {\n  xSpeed = 1 + v * 10; // Range from 1 to 10 for x-axis speed\n}\n\n// UI slider to control the speed of y-axis width variation\nexport function sliderYSpeed(v) {\n  ySpeed = 1 + v * 10; // Range from 1 to 10 for y-axis speed\n}\n\n// Render function for 2D LED matrices. Creates wavy column patterns.\nexport function render2D(index, x, y) {\n  handlePaletteTransitions();\n  // Distort y-coordinate with Perlin noise and x-coordinate with sine wave\n  y -= 0.3 * perlin(x * 2, y * 2, ty, 1.618); \n  x += 0.1752 * sin(4 * (tx + y));\n  \n  // Quantize x-coordinate into column bins and calculate brightness\n  var h = floor(x * nColumns);\n  var v = (x * nColumns - 0.5);\n  v = 1 - (2 * abs(v - h));\n  v = pow(v, 1.25)\n  h = h / nColumns\n\n  // Calculate final color and brightness for the pixel\n  // hsv(h / nColumns, 0.9, v);\n  paint(h, v)\n}\n\n// Function to project 2D pattern into 3D space.\nexport function render3D(index, x, y, z) {\n  var x1 = (x - cos(z / 4 * PI2)) / 2;\n  var y1 = (y - sin(z / 4 * PI2)) / 2;\n  render2D(index, x1, y1);\n}\n\nvar lava = [0.0, 68/255, 1/255, 84/255, 0.18, 0.071, 0.0, 0.0, 0.376, 0.443, 0.0, 0.0, 0.424, 0.557, 0.012, 0.004, 0.467, 0.686, 0.067, 0.004, 0.573, 0.835, 0.173, 0.008, 0.682, 1.0, 0.322, 0.016, 0.737, 1.0, 0.451, 0.016, 0.792, 1.0, 0.612, 0.016, 0.855, 1.0, 0.796, 0.016, 0.918, 1.0, 1.0, 0.016, 0.957, 1.0, 1.0, 0.278, 1.0, 1.0, 1.0, 1.0,];\nvar ib_jul01 = [0.0, 0.761, 0.004, 0.004, 0.369, 0.004, 0.114, 0.071, 0.518, 0.224, 0.514, 0.11, 1.0, 0.443, 0.004, 0.004,];\nvar es_vintage_57 = [0.0, 0.008, 0.004, 0.004, 0.208, 0.071, 0.004, 0.0, 0.408, 0.271, 0.114, 0.004, 0.6, 0.655, 0.529, 0.039, 1.0, 0.18, 0.22, 0.016,];\nvar es_vintage_01 = [0.0, 0.016, 0.004, 0.004, 0.2, 0.063, 0.0, 0.004, 0.298, 0.38, 0.408, 0.012, 0.396, 1.0, 0.514, 0.075, 0.498, 0.263, 0.035, 0.016, 0.6, 0.063, 0.0, 0.004, 0.898, 0.016, 0.004, 0.004, 1.0, 0.016, 0.004, 0.004,];\nvar es_rivendell_15 = [0.0, 0.004, 0.055, 0.02, 0.396, 0.063, 0.141, 0.055, 0.647, 0.22, 0.267, 0.118, 0.949, 0.588, 0.612, 0.388, 1.0, 0.588, 0.612, 0.388,];\nvar rgi_15 = [0.0, 0.016, 0.004, 0.122, 0.122, 0.216, 0.004, 0.063, 0.247, 0.773, 0.012, 0.027, 0.373, 0.231, 0.008, 0.067, 0.498, 0.024, 0.008, 0.133, 0.624, 0.153, 0.024, 0.129, 0.749, 0.439, 0.051, 0.125, 0.875, 0.22, 0.035, 0.137, 1.0, 0.086, 0.024, 0.149,];\nvar retro2_16 = [0.0, 0.737, 0.529, 0.004, 1.0, 0.18, 0.027, 0.004,];\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0, 0.247, 0.09, 0.0, 1.0, 0.498, 0.263, 0.0, 1.0, 0.749, 0.557, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar es_pinksplash_08 = [0.0, 0.494, 0.043, 1.0, 0.498, 0.773, 0.004, 0.086, 0.686, 0.824, 0.616, 0.675, 0.867, 0.616, 0.012, 0.439, 1.0, 0.616, 0.012, 0.439,];\nvar es_pinksplash_07 = [0.0, 0.898, 0.004, 0.004, 0.239, 0.949, 0.016, 0.247, 0.396, 1.0, 0.047, 1.0, 0.498, 0.976, 0.318, 0.988, 0.6, 1.0, 0.043, 0.922, 0.757, 0.957, 0.02, 0.267, 1.0, 0.91, 0.004, 0.02,];\nvar Coral_reef = [0.0, 0.157, 0.78, 0.773, 0.196, 0.039, 0.596, 0.608, 0.376, 0.004, 0.435, 0.471, 0.376, 0.169, 0.498, 0.635, 0.545, 0.039, 0.286, 0.435, 1.0, 0.004, 0.133, 0.278,];\nvar es_ocean_breeze_068 = [0.0, 0.392, 0.612, 0.6, 0.2, 0.004, 0.388, 0.537, 0.396, 0.004, 0.267, 0.329, 0.408, 0.137, 0.557, 0.659, 0.698, 0.0, 0.247, 0.459, 1.0, 0.004, 0.039, 0.039,];\nvar es_ocean_breeze_036 = [0.0, 0.004, 0.024, 0.027, 0.349, 0.004, 0.388, 0.435, 0.6, 0.565, 0.82, 1.0, 1.0, 0.0, 0.286, 0.322,];\nvar departure = [0.0, 0.031, 0.012, 0.0, 0.165, 0.09, 0.027, 0.0, 0.247, 0.294, 0.149, 0.024, 0.329, 0.663, 0.388, 0.149, 0.416, 0.835, 0.663, 0.467, 0.455, 1.0, 1.0, 1.0, 0.541, 0.529, 1.0, 0.541, 0.58, 0.086, 1.0, 0.094, 0.667, 0.0, 1.0, 0.0, 0.749, 0.0, 0.533, 0.0, 0.831, 0.0, 0.216, 0.0, 1.0, 0.0, 0.216, 0.0,];\nvar es_landscape_64 = [0.0, 0.0, 0.0, 0.0, 0.145, 0.008, 0.098, 0.004, 0.298, 0.059, 0.451, 0.02, 0.498, 0.31, 0.835, 0.004, 0.502, 0.494, 0.827, 0.184, 0.51, 0.737, 0.82, 0.969, 0.6, 0.565, 0.714, 0.804, 0.8, 0.231, 0.459, 0.98, 1.0, 0.004, 0.145, 0.753,];\nvar es_landscape_33 = [0.0, 0.004, 0.02, 0.0, 0.075, 0.125, 0.09, 0.004, 0.149, 0.631, 0.216, 0.004, 0.247, 0.898, 0.565, 0.004, 0.259, 0.153, 0.557, 0.29, 1.0, 0.004, 0.016, 0.004,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016, 0.169, 1.0, 0.267, 0.098, 0.337, 1.0, 0.027, 0.098, 0.498, 1.0, 0.322, 0.404, 0.667, 1.0, 1.0, 0.949, 0.82, 0.165, 1.0, 0.086, 1.0, 0.341, 1.0, 0.255,];\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969, 0.188, 1.0, 0.533, 1.0, 0.349, 0.863, 0.114, 0.886, 0.627, 0.027, 0.322, 0.698, 0.847, 0.004, 0.486, 0.427, 1.0, 0.004, 0.486, 0.427,];\nvar gr64_hult = [0.0, 0.004, 0.486, 0.427, 0.259, 0.004, 0.365, 0.31, 0.408, 0.204, 0.255, 0.004, 0.51, 0.451, 0.498, 0.004, 0.588, 0.204, 0.255, 0.004, 0.788, 0.004, 0.337, 0.282, 0.937, 0.0, 0.216, 0.176, 1.0, 0.0, 0.216, 0.176,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008, 0.165, 0.835, 0.576, 0.094, 0.329, 0.404, 0.859, 0.204, 0.498, 0.012, 0.859, 0.812, 0.667, 0.004, 0.188, 0.839, 0.831, 0.004, 0.004, 0.435, 1.0, 0.004, 0.027, 0.129,];\nvar ib15 = [0.0, 0.443, 0.357, 0.576, 0.282, 0.616, 0.345, 0.306, 0.349, 0.816, 0.333, 0.129, 0.42, 1.0, 0.114, 0.043, 0.553, 0.537, 0.122, 0.153, 1.0, 0.231, 0.129, 0.349,];\nvar Fuschia_7 = [0.0, 0.169, 0.012, 0.6, 0.247, 0.392, 0.016, 0.404, 0.498, 0.737, 0.02, 0.259, 0.749, 0.631, 0.043, 0.451, 1.0, 0.529, 0.078, 0.714,];\nvar es_emerald_dragon_08 = [0.0, 0.38, 1.0, 0.004, 0.396, 0.184, 0.522, 0.004, 0.698, 0.051, 0.169, 0.004, 1.0, 0.008, 0.039, 0.004,];\nvar Colorfull = [0.0, 0.039, 0.333, 0.02, 0.098, 0.114, 0.427, 0.071, 0.235, 0.231, 0.541, 0.165, 0.365, 0.325, 0.388, 0.204, 0.416, 0.431, 0.259, 0.251, 0.427, 0.482, 0.192, 0.255, 0.443, 0.545, 0.137, 0.259, 0.455, 0.753, 0.459, 0.384, 0.486, 1.0, 1.0, 0.537, 0.659, 0.392, 0.706, 0.608, 1.0, 0.086, 0.475, 0.682,];\nvar Magenta_Evening = [0.0, 0.278, 0.106, 0.153, 0.122, 0.51, 0.043, 0.2, 0.247, 0.835, 0.008, 0.251, 0.275, 0.91, 0.004, 0.259, 0.298, 0.988, 0.004, 0.271, 0.424, 0.482, 0.008, 0.2, 1.0, 0.18, 0.035, 0.137,];\nvar Pink_Purple = [0.0, 0.075, 0.008, 0.153, 0.098, 0.102, 0.016, 0.176, 0.2, 0.129, 0.024, 0.204, 0.298, 0.267, 0.243, 0.49, 0.4, 0.463, 0.733, 0.941, 0.427, 0.639, 0.843, 0.969, 0.447, 0.851, 0.957, 1.0, 0.478, 0.624, 0.584, 0.867, 0.584, 0.443, 0.306, 0.737, 0.718, 0.502, 0.224, 0.608, 1.0, 0.573, 0.157, 0.482,]\nvar Sunset_Real = [0.0, 0.471, 0.0, 0.0, 0.086, 0.702, 0.086, 0.0, 0.2, 1.0, 0.408, 0.0, 0.333, 0.655, 0.086, 0.071, 0.529, 0.392, 0.0, 0.404, 0.776, 0.063, 0.0, 0.51, 1.0, 0.0, 0.0, 0.627,]\nvar es_autumn_19 = [0.0, 0.102, 0.004, 0.004, 0.2, 0.263, 0.016, 0.004, 0.329, 0.463, 0.055, 0.004, 0.408, 0.537, 0.596, 0.204, 0.439, 0.443, 0.255, 0.004, 0.478, 0.522, 0.584, 0.231, 0.486, 0.537, 0.596, 0.204, 0.529, 0.443, 0.255, 0.004, 0.557, 0.545, 0.604, 0.18, 0.639, 0.443, 0.051, 0.004, 0.8, 0.216, 0.012, 0.004, 0.976, 0.067, 0.004, 0.004, 1.0, 0.067, 0.004, 0.004,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0, 0.165, 0.0, 0.0, 0.176, 0.329, 0.0, 0.0, 1.0, 0.498, 0.165, 0.0, 1.0, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 1.0, 1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Magenta_Red = [0.0, 0.0, 0.0, 0.0, 0.247, 0.165, 0.0, 0.176, 0.498, 1.0, 0.0, 1.0, 0.749, 1.0, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0, 0.165, 0.165, 0.0, 0.0, 0.329, 1.0, 0.0, 0.0, 0.498, 1.0, 0.0, 0.176, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0, 0.247, 0.0, 0.216, 1.0, 0.498, 0.0, 1.0, 1.0, 0.749, 0.165, 1.0, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar palettes = [\n  ib_jul01,\n  es_vintage_57,\n  es_vintage_01,\n  es_rivendell_15,\n  rgi_15,\n  retro2_16,\n  \n  // yes:\n  \n  Analogous_1,\n  lava,\n  Pink_Purple,\n  BlacK_Blue_Magenta_White,\n  BlacK_Magenta_Red,\n  BlacK_Red_Magenta_Yellow,\n  Blue_Cyan_Yellow,\n \n  es_pinksplash_08,\n  es_pinksplash_07,\n  Coral_reef,\n  es_ocean_breeze_068,\n  es_ocean_breeze_036,\n  departure,\n  es_landscape_64,\n  es_landscape_33,\n   rainbowsherbet,\n  gr65_hult,\n  gr64_hult,\n  GMT_drywet,\n  ib15,\n  Fuschia_7,\n  es_emerald_dragon_08,\n  Colorfull,\n  Magenta_Evening,\n  \n  Sunset_Real,\n  es_autumn_19,\n  \n];\n\n\nvar rangeSlider = function(v, minValue, maxValue, isFloored, isReversed) {var valueRange = maxValue - minValue; var scaledValue = minValue + (v * valueRange); if (isReversed) {scaledValue = maxValue - (v * valueRange);} if (isFloored) {scaledValue = floor(scaledValue);} return scaledValue;};\nexport function sliderTransitionTime(v) {\n  transition = rangeSlider(v, 0.10, 3.0, false, false);\n}\nexport function toggleShimmer(v) {\n  shimmer = v;\n}\nexport function inputNumberSecondsPerPalette(v) {\n  secondsPerPalette = v;\n}\nexport function showNumberPalette() {\n  return paletteIndex;\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEmKzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCACWAGQDASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAAAwQAAgUBBv/EAEwQAAIBAwECCQcFDQcEAwAAAAECAwAEERIFIRMxQVFhkaHB0RQiUnGBorEjMmKy8AYVJEJDU2Nyc5KjwuElMzR0gpOzBzZU0mTi8f/EABoBAAMAAwEAAAAAAAAAAAAAAAIDBAABBQb/xAA2EQABAgIGCAUDAwUAAAAAAAABAAIDERIhUWGx8AQiMUFxgcHREzKhsuEjkcIUM0JSYnKC8f/aAAwDAQACEQMRAD8AFdyAbNuxn5rTj+I3jXby5xHeYO+O9jmHUfCs2e6V4toRBuK8kTrZmrktwJPKADkTCJh1j/2rsAzC7wdMZsTG2T5TDtSJd+naMQ61au7QmMl/tNRvW4sg5/fB76EjcIm2JCcgbQgfrOO+jNFr2lKo5LOND/tBqaBNpzYiAnPNiSt9oYvNky6sZtzH1ORVba9H3uiiJ3RMHI6qVkh0/e44/uwx6sN30n50IlGT56sg9ahfGjZSa4C8YlYwuaeYxXoRtDXNO5PnT6V/iHwoaXCm72Iu75EI59ja6x7dZfKbaPUfknIY84EpHfVI3kZIZdWGlR44zzYhIHaKykQ0A3YSRUjRAN2C0LG8VoGibdi8NwfVkijbSImu9raPmy3cR4+QI4+LCsuRDGLyZRuV5I+pwe+j8JJmWV92IkeQfSPB/wD2pgaDUc+VEGzABzsWrs6+Fttbasjt8+68oB5Pxj8MV53bVuy30+nikt2mX2Rt4U1fJLHDBEDhp+Didungx/7GuX7K3AnOSuy7gEn9m3jS2sIDhYMR8pURmoWndLPqnP8Ap/YySfc/JIRgPcMV6RpUfEGpWt9xksdn9yViGAzKHf8AiMO6pUsOGA0ApcGG3w28FgREtNJneJ7pZuu1L94qkBLT7MAJw1uufZJGK5buCbRtW5uDBPT5Co+JqWDa22ew+ctm5HsaM/b/APaSx27O0JMIzqztCZt7pl2LdFvn3CW0vrOFbxrV4ZY7i6nJ4oyo/wBKmPurzMc+q0tkAI1QqOLj02/jWpNIWgaNTpaW7ZCR9K7YfCqYb9U8OyfDfqk3dk28SPbWbfjYcdaL4Uhc2yqk+fyVzKPVlgtGiux5Xb25G5EDE+xhXbmRJLDaLjidxIpzx5ZGqykA6d/5KkkTJz5kCMiO8uWYYCudPqMoNBjhAs9ijl8qXPqJfPZTN5BruVhTc0tvrG/l1kD4UkJQstgoABWZSDjfuD57qwSMgbhisJFXLFGyrW2048jUu0SQOgkeFX2i6oNtIv4qwBcc32AoMgMcO1pFGVZopBv3g4J76DfzMbu9U/Ne3ibsjP8AMaPY0ZsWF0m/fqtOSaKXacinesF7Gw9Wk+Febu7iQSzoSQFtnC+oqoPfRDdyQ8O5BMkiq46SAB/NUmRZLjLMSGspSPYpIoSacI2gY1KfSIlKEbU7ZXd42x7CO2bzYoWU+vhHPeKlN/c9wabCttZ3nXxfrsO6pSGaMXNBJTIGjUoTTPcFjbEvVaSyDasC6RSAM/ktHF7KZ2ZMBbbMYNh3t509gK+DV5/Zlx5PewZPmrKrnJwNxPVx1qbPmVJdkoWwBFKWwSeN35v1eKuY2ojOdi5cB05W/LVa1U+TbIbexlE5O7j0oFx2U1Be8UxyVj2ijYJ4xwxbvoWzJUYbBUsQIhdagNxzvPq5qXjkWDZzybtfl+Bz7mVvtmj8oMs1BPaQGzu/Fq1Igz308gBcBUAPICeEx9XsqsVyW2YVfGmRSuOPiiGPgO2u29ypG0JNRwkcPKN/myE7+TjxSkjcFY2MSMcyRh97DG+Ibjzcw9R5qqc+uefMqyd959y3EkeTb8B3Yitymc7shgeL/UKRiiE1pYXIJKrccGQd43s277c9DFy5up3jkAkhRpDjfjzU38XLj7cpfKlTYqWz6FCXSyFlLHA1txEcfLxHlFHDcJ5vRtMznO5Bldlt7mFQTq0xMC2DkIO8Y9u6ryRtNBPKuG1WUeSx3nAUdeVFX2hEfK9q+ZuDluUrvKnO8cXN6xS7TeSQzRDVkwBCMbxkMeKqIUQE62agjIkZOv6pe6iK3L4yrApglf1D1bqpJKFgaQ8YtHU5POQOKmrpNc7ynKgCIlVbVkhSpwfZnqFZ92QbQscZVFxjdxuBx+w0bzqO4JUduq6V+KZjM8WzLA20Rw8TsxVguTw0g37t+4CpUtoxLsuzBGopG6nl/KOe+pQtYXikDtzYigw3eE3gLLOC84x0AkcYXt1Vo2Uyi6hOkMIbaYEZ3E6ZTy+sbqQk+a/MF5vpVDIYpZmG7JZesEd9cR1RzeuK00XA8M+i1rCJluNnqyBhIJlUatOc6l4+6gyzF9jSsCCpvg43bzlST8BVrS5QX+zeEZmWCYBscxkY4HX20DVjYWjB33Gro3R/1rCVVVQPA4NC1JCvlu1kHBsfJlYOOLdFxj15FGhKTXWyFVsqLZ8qSNxW3Hf7eKs2SXgr3aI8464ChIbG/AHNv38lHsrhZJtkoru0ipKjBVJIJTAA9mKY1+tm2arY4B8r/wAwrNO8dptGbUQVnaPI5RlV59/tz30ZkNxdJAQ4QIJADuJDORv6+fj7VZ5EOw9pPqy8l44PLu1IR303P8n90OhSSIocSLkHOlmON3SOyiY+ocsSmNaKTeXqXJuS/jl2RLNxSXSR8RIBwpLZxvOSME4NXu4I7k3UsC5TyJGVVQbsAruHNzkcW/11kWhMlpYQbyH1kht4+YQO/wCxpyKWXyHS0pUyTNEVU7tzE6SBxjdxeqnNiT+wwCdCNITu6DuuytJDcPGRqMqppGM7yxxnfniJ376Uux+D3CqzZQIuMY/KDcOfjHVWhet5TwtyCZGg0KuFAUaeTGMcXwO/fSV7/hrsaDqOkMdOeORW3+wj7GnF5oFZpDSGu4HqrbOOmxRRgaSwIUHcdR5j9t1Sr7NBMMh4RBmQkZHQKldGA76YrT4EM+E347rzs2NMhxxrv6fPNUlxmX9t41aU5jb1fzGqynzpBzzeNebcc/deadn1XWcrLI3oyjHWaI7YtNHMxPurQJD/AH37Qd9Xc+Yw9fwWgJz91sOqOd60LjRJf7SZT5oDFeT8cAc/Pz1S1cxT7PYDOVPKQd+RyEHk56Gz5lvmODqGMjd+UFHtRm92Wn6L4lq1OtXtaHxOPV6BLOTsqZMb3uWZm5/m4GPaa0pZuE23eyI/zIHVW9uOP21mEZ2JK3Pc47KdkTTtK/C4GINXvKTWNcRJMhgkA8MHK2y5mjfZ3magpcKN4zlTnf7R0bx00zlllMRYYW+mLZH63L7Du5ems6D5FNnzAb9Ep3cuBVofOVZcg/LkAjpD0xsSUs2JsFxDQzgeUmFbWzTFIXEia3llmCaDnztYI58jAI6qFtNZH2VI2NO9CV34HnDd10naz+TLEhYDQzk6hkE6nx2qKYu5lbZ8kPmtwSJjHJvJ7jVDIs2kW9graQdALTtl0/6u7PZfJydbb2zuTV3VKU2fIy25UFtzY3DoFSrYWkUWgIYMYeGKse6w2bMZ9XeajNl2/aZoed2KKiE6zzJq7RXEpLy4m7YuousyA8uW6g1XC6hGPTcjtWrwpiVR6Vu7e61EgTds0/nJz9ZayarhwiRm1vdcI+Rv29F1Hvmm7YY2ts4c1sD2MaAy4tNq9EyD3mpyEAbZseizH1TWLoQGa7OLfe7skR/28fpXY+rWjMP7W2r9G0/lU1nrv2BEvPd/y1oSnO0trvz2xHuDwrEyB5G/6+16FbrqTZKc6TdoqlmubK3X07g/BvGmbVfwrZC80DHrWg2I+Q2aPSmc9WaxOazWHIekIdVW7GQhHK0x/dZj30zcqFs5j6WR7pPfQZBqt4G51uj20e8B+9rkcjNn/bHjTIY28EUqnuub6tHdF2RarNBMTyS491alX2RKI4Zx+lz7q1KppNBkutoUOCdHbSFa8rEhZujSx6lzTccXmSf5TV2iq2sfyannWb/jzTarhT07Oz21AF5DRoOrM5qHdc0aLm3+lYE9atXYgBBsU/pmPviiOM3Nn/kVHXu76Ar4tdmfQZj7x8K2rpBhcM+aGryjFvtgfpgff/rR4z/a9kf/AI6jtIpWVsptLmdiffU0zDGzbSthypHn2CUn4VsAlGwziCW6XvceqUhGrZUCc90vbq8KcLZl2k3pQr/xk91Bt4sWFo/pXMY6mfxoxh0vfryJCnZCwrYaVkEODGcva5Ft2xe7M6LcDrA8aFYfN2T+tN31yFmN1a440Cr7Mp41W0bR97s8SF+0E1pPa/XHEYw+yLH51hEfRguj2imbxT97Lv6IJ7AKWg3WTLyrb3HaV8afvAPvffjniz8T3U+CJki44KhrZwXf4j2/CRspCFkweNx9UVKXsXJiY85H1RUpT3TcUvRov0gq28WI4hzrKOuFfGpqAI6dm4piBPPiTpx1xIKWRdUkfTaBeyhUZbQEhb0CPboLi5gHo26DqKGlEQm2tW5t31jWhspcXEbH/wAdj1FKpbwA2VoOeYr7hNNayYzd3RmEXhptni1KvEy2d0308H90HurRA0bXfdujtWI7D31Jrf8AA9orjekv8gpqSH+0Xb07Zl91aa2HKXEYkKiFo5YZ3jFyz40xsywHL5UT1P8A1pmVB5RtYc0WOpcd9c4L8HgX83I7e8DXW3vcMT/f6194AVoCrl0KY1lFoFgHtliVS3i0Twk/m5T1FfCgw27FIyR82MY9eDWlLGFiBA3iCUdYNXWEC3LcwAovCmZZ3Jv6WZlZX6DskRFwYK+mrL1hfCjXkmbWcD8e3z7shot7HiWAr+dQdZIpJ21BkHEIGXqRvGhhtou5dFuMPCmy+SS2Wuu2Y/Sx7oqUbYKarFz+kPwFSppTrSdCg0tHYbkYLpu06JYx7qih28Pydu2OOML2CmHGLluh4z247qNBHiGHoJpkNsyi8IOfzOKFZx6BG3F+Cyjt/pRbeICK3T0J8+5irxriKP8AYyDtarQj8IC8z6uwCqmiQz/anw4YAbyw+ERkDR349NgeyuuAZ4G51Cmojakb6bDv8KE0nycbei6j40wGsZ/kVS4gCebeqoR8nN9AZ6wT3UFgStpj8dwevzu6jFhwlyv6NT7prkQBhtz6Ean+HS2tmAM7CpngOMs+YIpcO5Tm0L+8Ktwg0aAeNm+NKAmObWT8+WDsA8aDw5W4iXkOs9p8KMGRza1aOkUdvD1IT6yCYMePRh+pjSgtyjTsfSkA/dxVLCUrazhslhBLx840+NaM6abdTyuXPYaZDZSZM7ghBEdocd1fqsz7nAPve+fzp+AqUDY5KWAwcZYmpXNaDJFoEdrNGY0jcm5t00x5in1jTcQxCvQW+FSpTYO1HD85z/Iq0Y8yMdDjteuRf432d61KlUjYM/0po2N5YKkT4itzzyL9ZqXkkIt5foMhH7pqVKA7BneVJFJoDh+KqJCbxl9OJfq/1otq+bYdEaj3CKlSihbRncUphNM8Tih3bcHbROOZW6glUVdUVu/LkfBqlSmy1zwHRKifukXBHWMIZBz6l69PhTM8mqGAfoifdNSpT9jXSsVTKgQLsVhWORZRYOMg/E1KlSufDaKIXKhE+G3gMF//2Q=="
}