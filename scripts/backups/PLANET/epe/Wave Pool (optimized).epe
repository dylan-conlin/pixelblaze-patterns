{
  "name": "Wave Pool (optimized)",
  "id": "7k4hxZxgcXqoJBmmM",
  "sources": {
    "main": "var timebase = 0;\nvar t1, cos_t1, sin_t1;\n\nexport var contrast = 1/24;\nexport var whiteLevel = 1.125;\nexport var speed = 3.5;\n\n// Pre-compute repetitive values in sliders\nexport function sliderSpeed(v) {\n  speed = 1 + 8*v;\n}\n\nexport function sliderWhiteLevel(v) {\n  whiteLevel = 0.8 + (1-v)\n}\n\nexport function sliderContrast(v) {\n  contrast = 1/(16+24*v);\n}\n\nfunction updateTimedependentVariables() {\n  t1 = timebase / 6;\n  // Precompute values for cos(t1) and sin(t1) to use in render2D\n  cos_t1 = cos(t1);\n  sin_t1 = sin(t1);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  updateTimedependentVariables();\n}\n\nexport function render2D(index, x, y) {\n  var px, py, ix, iy, c;\n\n  // scale coords to work well as angles for sin/cos\n  px = x * PI2 - 20;  \n  py = y * PI2 - 20;\n  ix = px; \n  iy = py;\n  c = 1;\n\n  // Adjust speed\n  var speedAdj1 = 1 - speed;\n  var speedAdj2 = 1 - speed / 2;\n  var t1 = timebase * speedAdj1;  // Assuming timebase is defined globally as in your working example\n  var t2 = timebase * speedAdj2;\n\n  // build a couple of lumpy circular \"waves\" using adjusted speed\n  tmp = px + cos(t1 - ix) + sin(t1 + iy); \n  iy = py + sin(t1 - iy) + cos(t1 + ix);\n  ix = tmp;\n\n  c += 1/hypot(px/sin(t1 + ix)*contrast, py/cos(t1 + iy)*contrast);\n\n  tmp = px + cos(t2 - ix) + sin(t2 + iy); \n  iy = py + sin(t2 - iy) + cos(t2 + ix);\n  ix = tmp;\n\n  c += 1/hypot(px/sin(t2 + ix)*contrast, py/cos(t2 + iy)*contrast);\n  \n  // Gamma correction\n  c = 1.65 - sqrt(c/2);\n  c = c * c * c * c;\n  c = clamp(c, 0, 1);\n  \n  hsv(0.6667 - (0.3 * c), whiteLevel - c, c);\n}\n\n\nexport function render3D(index, x, y, z) {\n  var x1 = (x - cos(z / 4 * PI2)) / 2;\n  var y1 = (y - sin(z / 4 * PI2)) / 2;\n  render2D(index, x1, y1);\n}\n"
  },
  "preview": "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"
}