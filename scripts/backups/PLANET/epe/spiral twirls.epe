{
  "name": "spiral twirls",
  "id": "r8Yc59nwQWFKosCZt",
  "sources": {
    "main": "/*\n  Spiral twirls 2D\n  \n  A configurable 2D pattern that creates a variety of rotating and swirling\n  circular and spiral effects.\n  \n  Output demo: https://youtu.be/Qa7B59CbYNw\n  \n  For best results a matrix of 16x16 or greater is recommended.\n  \n  It's suggested to start with all the sliders at zero, then try each of them\n  one at a time to see what impact it has on the resultant pattern. That way it\n  should be easier to understand how to combine them all to get the effect you'd\n  like.\n  \n  There's a limited 3D and 1D projection provided.\n  \n  Generously contributed by ChrisNZ (Chris) from the Pixelblaze forums.\n    https://forum.electromage.com/u/chrisnz\n*/\n\nvar twistSpeed = .015\nvar rotateSpeed = .002\nvar startingColor = .3\nvar colorSpeed = .015\nvar twist, rotation, colorShift, arms\n\n\n// How quickly the spiral should rotate back and forth\nexport function sliderTwistSpeed(v) { twistSpeed = v = 0 ? 0 : .015 / v }\n\n// How quickly the entire pattern should rotate\nexport function sliderRotationSpeed(v) { rotateSpeed = v = 0 ? 0 : .005 / v }\n\n// What initial colors to display. If colorSpeed is zero then the pattern will\n// stay this color\nexport function sliderInitialColor(v) { startingColor = v * 2 }\n\n// How quickly the colors of the pattern should change\nexport function sliderColorSpeed(v) { colorSpeed = v = 0 ? 0 : .015 / v }\n\n// How many arms of symmetry the pattern should have (1-3)\nexport function sliderArms(v) { arms = 1 + floor(v * 2.999) }\n\n\nexport function beforeRender(delta) {\n  twist = wave(time(twistSpeed)) * 2 - 1\n  rotation = time(rotateSpeed)\n  colorShift = time(colorSpeed)\n}\n\nexport function render2D(index, x0, y0) {\n  x = (x0 - .5) * 2\n  y = (y0 - .5) * 2\n  dist = sqrt(x * x + y * y)\n  angle = (atan2shim(y, x) + PI) / PI / 2\n  angle += dist * twist / 2\n  \n  h = angle * arms - rotation + 10\n  h = h - floor(h)\n  v = (1.01 - dist) * (h < .5 ? h * h * h : h)\n  h = (h + startingColor) / 2 + colorShift\n  \n  hsv(h, 1, v)\n}\n\n// Experimentally-derived isometric projection. YMMV.\nexport function render3D(index, x0, y0, z0) {\n  x = x0 / 3\n  y = y0 / 3 + 0.68\n  z = z0 / 3 - 0.75\n  px = 0.4 * (1.71 * x - 1.71 * z)\n  py = 0.4 * (x + 2 * y + z)\n  render2D(index, px, py)\n}\n\n// Render the line sliced across the horizon, y = .5\nexport function render(index) {\n  pct = index / pixelCount\n  render2D(index, pct, 0.5)\n}\n\n// You can remove this shim if you're running v3.8 or newer\nfunction atan2shim(y, x) {\n  if (x == 0 || y == 0) {\n    return 0 \n  } else {\n    return atan2(y, x)\n  }\n}\n"
  },
  "preview": "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"
}