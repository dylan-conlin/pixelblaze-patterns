{
  "name": "Bessel Chaos",
  "id": "runhLPif8NTKN9mQN",
  "sources": {
    "main": "// It started out trying to plot Bessel functions.\n// It ended somewhere else; \n// I like trying to get chaotic behavior out of patterns without using random()\n// Jeff Vyduna / 2021 / MIT License\n\nexport var tSpeed = .84\nexport function sliderTransitionSpeed(_v) { tSpeed = _v }\nexport var rotSpeed = 0.50 // define a variable for rotation speed\nexport var s1, P, pan, colorDepth, t1\nexport var bounceRate = 0.1\nexport function sliderRateBounce(_v) { bounceRate = _v }\nexport function beforeRender(delta) {\n  P = 2 * wave(time(.1) / 2 - .25) * PI2 \n  t2 = time(.9)\n  var x = wave(time(bounceRate))\n  colorDepth = 2 + 4 * wave(time(.3))\n  pan = easeInOut(x, tSpeed)\n  t1 = time(rotSpeed * 0.2);\n}\n\n// https://www.desmos.com/calculator/ychs1aod5e\nvar eioexp = (x, p) => (pow((2 * x - 1), 1/p) + 1) / 2\n\nfunction easeInOut(x, s) {\n  var p = 1 + 40 * s * s * s\n  if (x < .5) { // Had to do it two sided, as pow(-27, 1/3) doesn't return -3\n    x = 1 - x\n    return 1 - eioexp(x, p)\n  } else {\n    return eioexp(x, p)\n  }\n}\n\nexport function render2D(index, x, y) {\n  \n  \n  var pct = 3 * (index / pixelCount - .5 - pan)\n  var pctSqueeze = 10 * pct * pct * pct\n  w1 = sin(pctSqueeze * pct + 2 * P)\n  w2 = sin(pctSqueeze -  P)\n  v = (w1 + w2) / 2\n  var h = t1 - (0.125*v)\n  hsv(h, 1, v * v * v)\n\n}\n\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n"
  },
  "preview": "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"
}