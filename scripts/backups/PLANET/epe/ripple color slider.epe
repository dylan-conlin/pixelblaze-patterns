{
  "name": "ripple color slider",
  "id": "RHkmhF5LqgJGwbpfZ",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nexport var color = 0;\nvar theta = 0;\n\n\n// This creates a color well that when clicked will open a color picker. When it\n// is changed, this function will be called with either the hue, saturation, and\n// value for hsvPicker or the red, green, and blue for rgbPicker. All values are\n// between 0.0 and 1.0, and suitable for passing to the hsv() or rgb() functions\n// later on to set a pixel color. g how quickly the waves die down\nexport function hsvPickerPrimaryColor(h, s, v){\n    color = h\n}\n\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n// early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // pick a blue/green gradient color based on \"height\", and draw the\n  // region that's inside our radius.\n  //hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n  hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n  \n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}