{
  "name": "pulse 3D",
  "id": "xqJJ9woM8Wz4QyS3q",
  "sources": {
    "main": "export var zoom = 5.8;  // Added zoom variable\n\nexport function beforeRender(delta) {\n  t1 = time(3.3 / 65.536) * PI2;  // Sawtooth 0 to 2*PI every 3.3 seconds\n  t2 = time(6.0 / 65.536) * PI2;  // Sawtooth 0 to 2*PI every 6 seconds\n  z = 1 + wave(time(13 / 65.536)) * 5;  // Sine wave, min = 1, max = 6\n}\n\n// Slider for controlling the zoom level\nexport function sliderZoom(v) {\n  zoom = 0.1 + (1-v) * 9.9;  // Adjust range as needed, currently 0.1 to 10\n}\n\nexport function render2D(index, x, y) { \n  x = x * zoom - (zoom - 1) / 2;  // Adjust for zoom, and re-center\n  y = y * zoom - (zoom - 1) / 2;  // Adjust for zoom, and re-center\n\n  h = (1 + sin(x * z + t1) + cos(y * z + t2)) * 0.5;\n  \n  v = h;\n  v = v * v * v / 2;  // Brightness scaling\n\n  hsv(h, 1, v);\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n\nexport function render(index) {\n  pct = index / pixelCount;  \n  render2D(index, 8 * pct, 0);  \n}\n"
  },
  "preview": "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"
}