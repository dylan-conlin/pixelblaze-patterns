{
  "name": "angle and radius from coordinates",
  "id": "mSwBcw8PJ79gaDkHk",
  "sources": {
    "main": "var HALF_PI = PI/2;\nvar speed = 1; // Default speed\nvar colorVariation = 0.5; // Default color variation\nvar brightnessContrast = 10; // Default contrast value\nvar depthEffectOscillation = false;  // Toggle state for depth effect oscillation\nexport var depthEffect = 0.0002;  // Default depth effect\nvar minDepthEffect = -0.0002\nvar maxDepthEffect = 0.002;  // Maximum depth effect for oscillation// Toggle for oscillating depth effect\nvar saturation = 1; // Default saturation\nexport var t, x1, y1, z1, oscillatingDepthEffect = 0.2;\n\nfunction arctan2(y, x) {\n  if (x > 0) return atan(y/x);\n  if (y > 0) return HALF_PI - atan(x/y);\n  if (y < 0) return -HALF_PI - atan(x/y);\n  if (x < 0) return PI + atan(y/x);\n  return 1.0;\n}\n\nfunction getUnitAngle(x, y) {\n  return (PI + arctan2(x - .5, y - .5))/PI2; \n}\n\nfunction getRadius2D(x, y) {\n  x -= 0.5; y -= 0.5;\n  return sqrt(x*x + y*y);\n}\n\nfunction getRadius3D(x, y, z) {\n  x -= 0.5; y -= 0.5; z -= 0.5;\n  return sqrt(x*x + y*y + z*z);\n}\n\nexport function toggleDepthEffectOscillation(v) {\n  depthEffectOscillation = (v == 1);\n}\n\nexport function sliderSpeed(v) {\n  speed = 1 + v * 2; // Range: 1 to 3\n}\n\nexport function sliderColorVariation(v) {\n  colorVariation = v; // Range: 0 to 1\n}\n\nexport function sliderBrightnessContrast(v) {\n  brightnessContrast = 1 + v * 19; // Range: 1 to 20\n}\n\nexport function sliderDepthEffect(v) {\n  depthEffect = v * 0.1; // Range: 0 to 0.1\n}\n\nexport function sliderSaturation(v) {\n  saturation = v; // Range: 0 to 1\n}\n\nvar oscillatingDepthEffect = 0.0002;\nexport function beforeRender(delta) {\n  t1 = time(0.1 * speed);\n\n  // Smooth oscillation for depthEffect\n  if (depthEffectOscillation) {\n    // Oscillate between minDepthEffect and maxDepthEffect\n    oscillatingDepthEffect = minDepthEffect - (maxDepthEffect - minDepthEffect) * \n                              (0.5 + 0.5 * sin(time(0.1) * PI2));\n  } else {\n    oscillatingDepthEffect = depthEffect;\n  }\n}\n\nexport function render3D(index, x, y, z) {\n  if (index == 0) {\n    t = getRadius3D(x, y, z);\n    x1 = x; y1 = y; z1 = z;\n  }\n\n  v = triangle(getUnitAngle(x, y) + time((0.05 + z * oscillatingDepthEffect) * speed));\n  v = pow(v, brightnessContrast); // Adjusted contrast\n  h = getRadius3D(x, y, z) * colorVariation;\n\n  hsv(h, saturation, v);\n}\n\nexport function render2D(index, x, y) {\n  render3D(index, x, y, .5);\n}\n"
  },
  "preview": "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"
}