{
  "name": "perlin (crown)",
  "id": "NBD2B8xAZE6JPpCzy",
  "sources": {
    "main": "//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\n\nexport var mode = 1\nexport var fireScale = 3\nexport var risingSpeed = 1\nexport var morphSpeed = 1\n\n// Parameter names that correspond to Pixelblaze UI controls\nexport var shimmer = true;\nexport var transition = 0.10;\nexport var secondsPerPalette = 10;\n\n// Internal state variables\nvar paletteIndex;\nvar lastPaletteIndex = -1;\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\n// Helper function to handle palette transitions\nfunction handlePaletteTransitions() {\n  paletteIndex = time(secondsPerPalette / 65.536 * palettes.length) * palettes.length;\n  if (frac(paletteIndex) > (1-transition)) {\n    var transitionFactor = (frac(paletteIndex) - (1-transition)) * (1/transition);\n    if (shimmer) {\n      if (wave(transitionFactor/2 - .25) > random(1)) {\n        paletteIndex = mod(paletteIndex + 1, palettes.length);\n      }\n    }\n  }\n  // Only set the palette if the floor index has changed\n  var floorPaletteIndex = floor(paletteIndex);\n  if (floorPaletteIndex != lastPaletteIndex) {\n    setPalette(palettes[floorPaletteIndex]);\n    lastPaletteIndex = floorPaletteIndex;\n  }\n}\n\nexport function beforeRender(delta) {\n  timeCounter += delta; // Increment the time counter by the time since the last frame\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  handlePaletteTransitions();\n  v = modeFn(x, y + yTime, morphTime ) \n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  v = v * y/fireScale \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n\n\n\n\nvar lava = [0.0, 68/255, 1/255, 84/255, 0.18, 0.071, 0.0, 0.0, 0.376, 0.443, 0.0, 0.0, 0.424, 0.557, 0.012, 0.004, 0.467, 0.686, 0.067, 0.004, 0.573, 0.835, 0.173, 0.008, 0.682, 1.0, 0.322, 0.016, 0.737, 1.0, 0.451, 0.016, 0.792, 1.0, 0.612, 0.016, 0.855, 1.0, 0.796, 0.016, 0.918, 1.0, 1.0, 0.016, 0.957, 1.0, 1.0, 0.278, 1.0, 1.0, 1.0, 1.0,];\nvar ib_jul01 = [0.0, 0.761, 0.004, 0.004, 0.369, 0.004, 0.114, 0.071, 0.518, 0.224, 0.514, 0.11, 1.0, 0.443, 0.004, 0.004,];\nvar es_vintage_57 = [0.0, 0.008, 0.004, 0.004, 0.208, 0.071, 0.004, 0.0, 0.408, 0.271, 0.114, 0.004, 0.6, 0.655, 0.529, 0.039, 1.0, 0.18, 0.22, 0.016,];\nvar es_vintage_01 = [0.0, 0.016, 0.004, 0.004, 0.2, 0.063, 0.0, 0.004, 0.298, 0.38, 0.408, 0.012, 0.396, 1.0, 0.514, 0.075, 0.498, 0.263, 0.035, 0.016, 0.6, 0.063, 0.0, 0.004, 0.898, 0.016, 0.004, 0.004, 1.0, 0.016, 0.004, 0.004,];\nvar es_rivendell_15 = [0.0, 0.004, 0.055, 0.02, 0.396, 0.063, 0.141, 0.055, 0.647, 0.22, 0.267, 0.118, 0.949, 0.588, 0.612, 0.388, 1.0, 0.588, 0.612, 0.388,];\nvar rgi_15 = [0.0, 0.016, 0.004, 0.122, 0.122, 0.216, 0.004, 0.063, 0.247, 0.773, 0.012, 0.027, 0.373, 0.231, 0.008, 0.067, 0.498, 0.024, 0.008, 0.133, 0.624, 0.153, 0.024, 0.129, 0.749, 0.439, 0.051, 0.125, 0.875, 0.22, 0.035, 0.137, 1.0, 0.086, 0.024, 0.149,];\nvar retro2_16 = [0.0, 0.737, 0.529, 0.004, 1.0, 0.18, 0.027, 0.004,];\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0, 0.247, 0.09, 0.0, 1.0, 0.498, 0.263, 0.0, 1.0, 0.749, 0.557, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar es_pinksplash_08 = [0.0, 0.494, 0.043, 1.0, 0.498, 0.773, 0.004, 0.086, 0.686, 0.824, 0.616, 0.675, 0.867, 0.616, 0.012, 0.439, 1.0, 0.616, 0.012, 0.439,];\nvar es_pinksplash_07 = [0.0, 0.898, 0.004, 0.004, 0.239, 0.949, 0.016, 0.247, 0.396, 1.0, 0.047, 1.0, 0.498, 0.976, 0.318, 0.988, 0.6, 1.0, 0.043, 0.922, 0.757, 0.957, 0.02, 0.267, 1.0, 0.91, 0.004, 0.02,];\nvar Coral_reef = [0.0, 0.157, 0.78, 0.773, 0.196, 0.039, 0.596, 0.608, 0.376, 0.004, 0.435, 0.471, 0.376, 0.169, 0.498, 0.635, 0.545, 0.039, 0.286, 0.435, 1.0, 0.004, 0.133, 0.278,];\nvar es_ocean_breeze_068 = [0.0, 0.392, 0.612, 0.6, 0.2, 0.004, 0.388, 0.537, 0.396, 0.004, 0.267, 0.329, 0.408, 0.137, 0.557, 0.659, 0.698, 0.0, 0.247, 0.459, 1.0, 0.004, 0.039, 0.039,];\nvar es_ocean_breeze_036 = [0.0, 0.004, 0.024, 0.027, 0.349, 0.004, 0.388, 0.435, 0.6, 0.565, 0.82, 1.0, 1.0, 0.0, 0.286, 0.322,];\nvar departure = [0.0, 0.031, 0.012, 0.0, 0.165, 0.09, 0.027, 0.0, 0.247, 0.294, 0.149, 0.024, 0.329, 0.663, 0.388, 0.149, 0.416, 0.835, 0.663, 0.467, 0.455, 1.0, 1.0, 1.0, 0.541, 0.529, 1.0, 0.541, 0.58, 0.086, 1.0, 0.094, 0.667, 0.0, 1.0, 0.0, 0.749, 0.0, 0.533, 0.0, 0.831, 0.0, 0.216, 0.0, 1.0, 0.0, 0.216, 0.0,];\nvar es_landscape_64 = [0.0, 0.0, 0.0, 0.0, 0.145, 0.008, 0.098, 0.004, 0.298, 0.059, 0.451, 0.02, 0.498, 0.31, 0.835, 0.004, 0.502, 0.494, 0.827, 0.184, 0.51, 0.737, 0.82, 0.969, 0.6, 0.565, 0.714, 0.804, 0.8, 0.231, 0.459, 0.98, 1.0, 0.004, 0.145, 0.753,];\nvar es_landscape_33 = [0.0, 0.004, 0.02, 0.0, 0.075, 0.125, 0.09, 0.004, 0.149, 0.631, 0.216, 0.004, 0.247, 0.898, 0.565, 0.004, 0.259, 0.153, 0.557, 0.29, 1.0, 0.004, 0.016, 0.004,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016, 0.169, 1.0, 0.267, 0.098, 0.337, 1.0, 0.027, 0.098, 0.498, 1.0, 0.322, 0.404, 0.667, 1.0, 1.0, 0.949, 0.82, 0.165, 1.0, 0.086, 1.0, 0.341, 1.0, 0.255,];\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969, 0.188, 1.0, 0.533, 1.0, 0.349, 0.863, 0.114, 0.886, 0.627, 0.027, 0.322, 0.698, 0.847, 0.004, 0.486, 0.427, 1.0, 0.004, 0.486, 0.427,];\nvar gr64_hult = [0.0, 0.004, 0.486, 0.427, 0.259, 0.004, 0.365, 0.31, 0.408, 0.204, 0.255, 0.004, 0.51, 0.451, 0.498, 0.004, 0.588, 0.204, 0.255, 0.004, 0.788, 0.004, 0.337, 0.282, 0.937, 0.0, 0.216, 0.176, 1.0, 0.0, 0.216, 0.176,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008, 0.165, 0.835, 0.576, 0.094, 0.329, 0.404, 0.859, 0.204, 0.498, 0.012, 0.859, 0.812, 0.667, 0.004, 0.188, 0.839, 0.831, 0.004, 0.004, 0.435, 1.0, 0.004, 0.027, 0.129,];\nvar ib15 = [0.0, 0.443, 0.357, 0.576, 0.282, 0.616, 0.345, 0.306, 0.349, 0.816, 0.333, 0.129, 0.42, 1.0, 0.114, 0.043, 0.553, 0.537, 0.122, 0.153, 1.0, 0.231, 0.129, 0.349,];\nvar Fuschia_7 = [0.0, 0.169, 0.012, 0.6, 0.247, 0.392, 0.016, 0.404, 0.498, 0.737, 0.02, 0.259, 0.749, 0.631, 0.043, 0.451, 1.0, 0.529, 0.078, 0.714,];\nvar es_emerald_dragon_08 = [0.0, 0.38, 1.0, 0.004, 0.396, 0.184, 0.522, 0.004, 0.698, 0.051, 0.169, 0.004, 1.0, 0.008, 0.039, 0.004,];\nvar Colorfull = [0.0, 0.039, 0.333, 0.02, 0.098, 0.114, 0.427, 0.071, 0.235, 0.231, 0.541, 0.165, 0.365, 0.325, 0.388, 0.204, 0.416, 0.431, 0.259, 0.251, 0.427, 0.482, 0.192, 0.255, 0.443, 0.545, 0.137, 0.259, 0.455, 0.753, 0.459, 0.384, 0.486, 1.0, 1.0, 0.537, 0.659, 0.392, 0.706, 0.608, 1.0, 0.086, 0.475, 0.682,];\nvar Magenta_Evening = [0.0, 0.278, 0.106, 0.153, 0.122, 0.51, 0.043, 0.2, 0.247, 0.835, 0.008, 0.251, 0.275, 0.91, 0.004, 0.259, 0.298, 0.988, 0.004, 0.271, 0.424, 0.482, 0.008, 0.2, 1.0, 0.18, 0.035, 0.137,];\nvar Pink_Purple = [0.0, 0.075, 0.008, 0.153, 0.098, 0.102, 0.016, 0.176, 0.2, 0.129, 0.024, 0.204, 0.298, 0.267, 0.243, 0.49, 0.4, 0.463, 0.733, 0.941, 0.427, 0.639, 0.843, 0.969, 0.447, 0.851, 0.957, 1.0, 0.478, 0.624, 0.584, 0.867, 0.584, 0.443, 0.306, 0.737, 0.718, 0.502, 0.224, 0.608, 1.0, 0.573, 0.157, 0.482,]\nvar Sunset_Real = [0.0, 0.471, 0.0, 0.0, 0.086, 0.702, 0.086, 0.0, 0.2, 1.0, 0.408, 0.0, 0.333, 0.655, 0.086, 0.071, 0.529, 0.392, 0.0, 0.404, 0.776, 0.063, 0.0, 0.51, 1.0, 0.0, 0.0, 0.627,]\nvar es_autumn_19 = [0.0, 0.102, 0.004, 0.004, 0.2, 0.263, 0.016, 0.004, 0.329, 0.463, 0.055, 0.004, 0.408, 0.537, 0.596, 0.204, 0.439, 0.443, 0.255, 0.004, 0.478, 0.522, 0.584, 0.231, 0.486, 0.537, 0.596, 0.204, 0.529, 0.443, 0.255, 0.004, 0.557, 0.545, 0.604, 0.18, 0.639, 0.443, 0.051, 0.004, 0.8, 0.216, 0.012, 0.004, 0.976, 0.067, 0.004, 0.004, 1.0, 0.067, 0.004, 0.004,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0, 0.165, 0.0, 0.0, 0.176, 0.329, 0.0, 0.0, 1.0, 0.498, 0.165, 0.0, 1.0, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 1.0, 1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Magenta_Red = [0.0, 0.0, 0.0, 0.0, 0.247, 0.165, 0.0, 0.176, 0.498, 1.0, 0.0, 1.0, 0.749, 1.0, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0, 0.165, 0.165, 0.0, 0.0, 0.329, 1.0, 0.0, 0.0, 0.498, 1.0, 0.0, 0.176, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0, 0.247, 0.0, 0.216, 1.0, 0.498, 0.0, 1.0, 1.0, 0.749, 0.165, 1.0, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar palettes = [\n  // ib_jul01,\n  // es_vintage_57,\n  // es_vintage_01,\n  // es_rivendell_15,\n  // rgi_15,\n  // retro2_16,\n  \n  // yes:\n  \n  Analogous_1,\n  lava,\n  Pink_Purple,\n  BlacK_Blue_Magenta_White,\n  BlacK_Magenta_Red,\n  BlacK_Red_Magenta_Yellow,\n  Blue_Cyan_Yellow,\n \n  // es_pinksplash_08,\n  // es_pinksplash_07,\n  // Coral_reef,\n  // es_ocean_breeze_068,\n  // es_ocean_breeze_036,\n  // departure,\n  // es_landscape_64,\n  // es_landscape_33,\n   // rainbowsherbet,\n  // gr65_hult,\n  // gr64_hult,\n  // GMT_drywet,\n  // ib15,\n  // Fuschia_7,\n  // es_emerald_dragon_08,\n  // Colorfull,\n  // Magenta_Evening,\n  \n  // Sunset_Real,\n  // es_autumn_19,\n  \n];\n\n\nvar rangeSlider = function(v, minValue, maxValue, isFloored, isReversed) {var valueRange = maxValue - minValue; var scaledValue = minValue + (v * valueRange); if (isReversed) {scaledValue = maxValue - (v * valueRange);} if (isFloored) {scaledValue = floor(scaledValue);} return scaledValue;};\nexport function sliderTransitionTime(v) {\n  transition = rangeSlider(v, 0.10, 0.20, false, false);\n}\nexport function toggleShimmer(v) {\n  shimmer = v;\n}\nexport function inputNumberSecondsPerPalette(v) {\n  secondsPerPalette = v;\n}\nexport function showNumberPalette() {\n  return paletteIndex;\n}\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function toggleDisableSliders(v) {\n  if (v) {\n    fireScale =\t11.000000\n    mode = 0.000000\n    morphSpeed = 1.235062\n    risingSpeed = 5.199982\n  }\n}\n"
  },
  "preview": "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"
}