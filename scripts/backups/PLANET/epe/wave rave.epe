{
  "name": "wave rave",
  "id": "J5ZdrPA8p5ivAE4Wx",
  "sources": {
    "main": "// Declare variables for sliders\nexport var myFreq = 0.314; // Initialize with a default value between 0 and 1\nexport var mySpeed = 0.5; // Initialize with a default value between 0 and 1\nexport var s1 = 0.5\nexport var oscillateS1 = false; // Initialize with a default state\nexport var delta\nexport var waveMode = 0\n\nexport var shimmer = true;\nexport var usePalette = false\nexport var transition = 0.10;\nexport var secondsPerPalette = 10;\n\n// Internal state variables\nvar paletteIndex;\nvar lastPaletteIndex = -1;\n\nvar lava = [0.0, 68/255, 1/255, 84/255, 0.18, 0.071, 0.0, 0.0, 0.376, 0.443, 0.0, 0.0, 0.424, 0.557, 0.012, 0.004, 0.467, 0.686, 0.067, 0.004, 0.573, 0.835, 0.173, 0.008, 0.682, 1.0, 0.322, 0.016, 0.737, 1.0, 0.451, 0.016, 0.792, 1.0, 0.612, 0.016, 0.855, 1.0, 0.796, 0.016, 0.918, 1.0, 1.0, 0.016, 0.957, 1.0, 1.0, 0.278, 1.0, 1.0, 1.0, 1.0,];\nvar ib_jul01 = [0.0, 0.761, 0.004, 0.004, 0.369, 0.004, 0.114, 0.071, 0.518, 0.224, 0.514, 0.11, 1.0, 0.443, 0.004, 0.004,];\nvar es_vintage_57 = [0.0, 0.008, 0.004, 0.004, 0.208, 0.071, 0.004, 0.0, 0.408, 0.271, 0.114, 0.004, 0.6, 0.655, 0.529, 0.039, 1.0, 0.18, 0.22, 0.016,];\nvar es_vintage_01 = [0.0, 0.016, 0.004, 0.004, 0.2, 0.063, 0.0, 0.004, 0.298, 0.38, 0.408, 0.012, 0.396, 1.0, 0.514, 0.075, 0.498, 0.263, 0.035, 0.016, 0.6, 0.063, 0.0, 0.004, 0.898, 0.016, 0.004, 0.004, 1.0, 0.016, 0.004, 0.004,];\nvar es_rivendell_15 = [0.0, 0.004, 0.055, 0.02, 0.396, 0.063, 0.141, 0.055, 0.647, 0.22, 0.267, 0.118, 0.949, 0.588, 0.612, 0.388, 1.0, 0.588, 0.612, 0.388,];\nvar rgi_15 = [0.0, 0.016, 0.004, 0.122, 0.122, 0.216, 0.004, 0.063, 0.247, 0.773, 0.012, 0.027, 0.373, 0.231, 0.008, 0.067, 0.498, 0.024, 0.008, 0.133, 0.624, 0.153, 0.024, 0.129, 0.749, 0.439, 0.051, 0.125, 0.875, 0.22, 0.035, 0.137, 1.0, 0.086, 0.024, 0.149,];\nvar retro2_16 = [0.0, 0.737, 0.529, 0.004, 1.0, 0.18, 0.027, 0.004,];\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0, 0.247, 0.09, 0.0, 1.0, 0.498, 0.263, 0.0, 1.0, 0.749, 0.557, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar es_pinksplash_08 = [0.0, 0.494, 0.043, 1.0, 0.498, 0.773, 0.004, 0.086, 0.686, 0.824, 0.616, 0.675, 0.867, 0.616, 0.012, 0.439, 1.0, 0.616, 0.012, 0.439,];\nvar es_pinksplash_07 = [0.0, 0.898, 0.004, 0.004, 0.239, 0.949, 0.016, 0.247, 0.396, 1.0, 0.047, 1.0, 0.498, 0.976, 0.318, 0.988, 0.6, 1.0, 0.043, 0.922, 0.757, 0.957, 0.02, 0.267, 1.0, 0.91, 0.004, 0.02,];\nvar Coral_reef = [0.0, 0.157, 0.78, 0.773, 0.196, 0.039, 0.596, 0.608, 0.376, 0.004, 0.435, 0.471, 0.376, 0.169, 0.498, 0.635, 0.545, 0.039, 0.286, 0.435, 1.0, 0.004, 0.133, 0.278,];\nvar es_ocean_breeze_068 = [0.0, 0.392, 0.612, 0.6, 0.2, 0.004, 0.388, 0.537, 0.396, 0.004, 0.267, 0.329, 0.408, 0.137, 0.557, 0.659, 0.698, 0.0, 0.247, 0.459, 1.0, 0.004, 0.039, 0.039,];\nvar es_ocean_breeze_036 = [0.0, 0.004, 0.024, 0.027, 0.349, 0.004, 0.388, 0.435, 0.6, 0.565, 0.82, 1.0, 1.0, 0.0, 0.286, 0.322,];\nvar departure = [0.0, 0.031, 0.012, 0.0, 0.165, 0.09, 0.027, 0.0, 0.247, 0.294, 0.149, 0.024, 0.329, 0.663, 0.388, 0.149, 0.416, 0.835, 0.663, 0.467, 0.455, 1.0, 1.0, 1.0, 0.541, 0.529, 1.0, 0.541, 0.58, 0.086, 1.0, 0.094, 0.667, 0.0, 1.0, 0.0, 0.749, 0.0, 0.533, 0.0, 0.831, 0.0, 0.216, 0.0, 1.0, 0.0, 0.216, 0.0,];\nvar es_landscape_64 = [0.0, 0.0, 0.0, 0.0, 0.145, 0.008, 0.098, 0.004, 0.298, 0.059, 0.451, 0.02, 0.498, 0.31, 0.835, 0.004, 0.502, 0.494, 0.827, 0.184, 0.51, 0.737, 0.82, 0.969, 0.6, 0.565, 0.714, 0.804, 0.8, 0.231, 0.459, 0.98, 1.0, 0.004, 0.145, 0.753,];\nvar es_landscape_33 = [0.0, 0.004, 0.02, 0.0, 0.075, 0.125, 0.09, 0.004, 0.149, 0.631, 0.216, 0.004, 0.247, 0.898, 0.565, 0.004, 0.259, 0.153, 0.557, 0.29, 1.0, 0.004, 0.016, 0.004,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016, 0.169, 1.0, 0.267, 0.098, 0.337, 1.0, 0.027, 0.098, 0.498, 1.0, 0.322, 0.404, 0.667, 1.0, 1.0, 0.949, 0.82, 0.165, 1.0, 0.086, 1.0, 0.341, 1.0, 0.255,];\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969, 0.188, 1.0, 0.533, 1.0, 0.349, 0.863, 0.114, 0.886, 0.627, 0.027, 0.322, 0.698, 0.847, 0.004, 0.486, 0.427, 1.0, 0.004, 0.486, 0.427,];\nvar gr64_hult = [0.0, 0.004, 0.486, 0.427, 0.259, 0.004, 0.365, 0.31, 0.408, 0.204, 0.255, 0.004, 0.51, 0.451, 0.498, 0.004, 0.588, 0.204, 0.255, 0.004, 0.788, 0.004, 0.337, 0.282, 0.937, 0.0, 0.216, 0.176, 1.0, 0.0, 0.216, 0.176,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008, 0.165, 0.835, 0.576, 0.094, 0.329, 0.404, 0.859, 0.204, 0.498, 0.012, 0.859, 0.812, 0.667, 0.004, 0.188, 0.839, 0.831, 0.004, 0.004, 0.435, 1.0, 0.004, 0.027, 0.129,];\nvar ib15 = [0.0, 0.443, 0.357, 0.576, 0.282, 0.616, 0.345, 0.306, 0.349, 0.816, 0.333, 0.129, 0.42, 1.0, 0.114, 0.043, 0.553, 0.537, 0.122, 0.153, 1.0, 0.231, 0.129, 0.349,];\nvar Fuschia_7 = [0.0, 0.169, 0.012, 0.6, 0.247, 0.392, 0.016, 0.404, 0.498, 0.737, 0.02, 0.259, 0.749, 0.631, 0.043, 0.451, 1.0, 0.529, 0.078, 0.714,];\nvar es_emerald_dragon_08 = [0.0, 0.38, 1.0, 0.004, 0.396, 0.184, 0.522, 0.004, 0.698, 0.051, 0.169, 0.004, 1.0, 0.008, 0.039, 0.004,];\nvar Colorfull = [0.0, 0.039, 0.333, 0.02, 0.098, 0.114, 0.427, 0.071, 0.235, 0.231, 0.541, 0.165, 0.365, 0.325, 0.388, 0.204, 0.416, 0.431, 0.259, 0.251, 0.427, 0.482, 0.192, 0.255, 0.443, 0.545, 0.137, 0.259, 0.455, 0.753, 0.459, 0.384, 0.486, 1.0, 1.0, 0.537, 0.659, 0.392, 0.706, 0.608, 1.0, 0.086, 0.475, 0.682,];\nvar Magenta_Evening = [0.0, 0.278, 0.106, 0.153, 0.122, 0.51, 0.043, 0.2, 0.247, 0.835, 0.008, 0.251, 0.275, 0.91, 0.004, 0.259, 0.298, 0.988, 0.004, 0.271, 0.424, 0.482, 0.008, 0.2, 1.0, 0.18, 0.035, 0.137,];\nvar Pink_Purple = [0.0, 0.075, 0.008, 0.153, 0.098, 0.102, 0.016, 0.176, 0.2, 0.129, 0.024, 0.204, 0.298, 0.267, 0.243, 0.49, 0.4, 0.463, 0.733, 0.941, 0.427, 0.639, 0.843, 0.969, 0.447, 0.851, 0.957, 1.0, 0.478, 0.624, 0.584, 0.867, 0.584, 0.443, 0.306, 0.737, 0.718, 0.502, 0.224, 0.608, 1.0, 0.573, 0.157, 0.482,]\nvar Sunset_Real = [0.0, 0.471, 0.0, 0.0, 0.086, 0.702, 0.086, 0.0, 0.2, 1.0, 0.408, 0.0, 0.333, 0.655, 0.086, 0.071, 0.529, 0.392, 0.0, 0.404, 0.776, 0.063, 0.0, 0.51, 1.0, 0.0, 0.0, 0.627,]\nvar es_autumn_19 = [0.0, 0.102, 0.004, 0.004, 0.2, 0.263, 0.016, 0.004, 0.329, 0.463, 0.055, 0.004, 0.408, 0.537, 0.596, 0.204, 0.439, 0.443, 0.255, 0.004, 0.478, 0.522, 0.584, 0.231, 0.486, 0.537, 0.596, 0.204, 0.529, 0.443, 0.255, 0.004, 0.557, 0.545, 0.604, 0.18, 0.639, 0.443, 0.051, 0.004, 0.8, 0.216, 0.012, 0.004, 0.976, 0.067, 0.004, 0.004, 1.0, 0.067, 0.004, 0.004,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0, 0.165, 0.0, 0.0, 0.176, 0.329, 0.0, 0.0, 1.0, 0.498, 0.165, 0.0, 1.0, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 1.0, 1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Magenta_Red = [0.0, 0.0, 0.0, 0.0, 0.247, 0.165, 0.0, 0.176, 0.498, 1.0, 0.0, 1.0, 0.749, 1.0, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0, 0.165, 0.165, 0.0, 0.0, 0.329, 1.0, 0.0, 0.0, 0.498, 1.0, 0.0, 0.176, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0, 0.247, 0.0, 0.216, 1.0, 0.498, 0.0, 1.0, 1.0, 0.749, 0.165, 1.0, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar palettes = [\n  // ib_jul01,\n  // es_vintage_57,\n  // es_vintage_01,\n  // es_rivendell_15,\n  // rgi_15,\n  // retro2_16,\n  \n  // yes:\n  \n   Analogous_1,\n  //lava,\n  //Pink_Purple,\n  BlacK_Blue_Magenta_White,\n  BlacK_Magenta_Red,\n  //BlacK_Red_Magenta_Yellow,\n  //Blue_Cyan_Yellow,\n  \n  // es_pinksplash_08,\n  // es_pinksplash_07,\n  // Coral_reef,\n  // es_ocean_breeze_068,\n  // es_ocean_breeze_036,\n  // departure,\n  // es_landscape_64,\n  // es_landscape_33,\n  // rainbowsherbet,\n  // gr65_hult,\n  // gr64_hult,\n  // GMT_drywet,\n  // ib15,\n  // Fuschia_7,\n  // es_emerald_dragon_08,\n  // Colorfull,\n  // Magenta_Evening,\n  \n  // Sunset_Real,\n  // es_autumn_19,\n  \n];\n\n\n// var rangeSlider = function(v, minValue, maxValue, isFloored, isReversed) {var valueRange = maxValue - minValue; var scaledValue = minValue + (v * valueRange); if (isReversed) {scaledValue = maxValue - (v * valueRange);} if (isFloored) {scaledValue = floor(scaledValue);} return scaledValue;};\nexport function sliderTransitionTime(v) {\n  transition = rangeSlider(v, 0.10, 0.20, false, false);\n}\nexport function toggleUsePalette(v) {\n  usePalette = v;\n}\nexport function toggleShimmer(v) {\n  shimmer = v;\n}\nexport function inputNumberSecondsPerPalette(v) {\n  secondsPerPalette = v;\n}\nexport function showNumberPalette() {\n  return paletteIndex;\n}\n// Helper function to handle palette transitions\nfunction handlePaletteTransitions() {\n  paletteIndex = time(secondsPerPalette / 65.536 * palettes.length) * palettes.length;\n  if (frac(paletteIndex) > (1-transition)) {\n    var transitionFactor = (frac(paletteIndex) - (1-transition)) * (1/transition);\n    if (shimmer) {\n      if (wave(transitionFactor/2 - .25) > random(1)) {\n        paletteIndex = mod(paletteIndex + 1, palettes.length);\n      }\n    }\n  }\n  // Only set the palette if the floor index has changed\n  var floorPaletteIndex = floor(paletteIndex);\n  if (floorPaletteIndex != lastPaletteIndex) {\n    setPalette(palettes[floorPaletteIndex]);\n    lastPaletteIndex = floorPaletteIndex;\n  }\n}\n\nvar rangeSlider = function(v, minValue, maxValue, isFloored, isReversed) {\n  var valueRange = maxValue - minValue;\n  var scaledValue = minValue + (v * valueRange);\n\n  if (isReversed) {\n    scaledValue = maxValue - (v * valueRange);\n  }\n\n  if (isFloored) {\n    scaledValue = floor(scaledValue);\n  }\n\n  return scaledValue;\n};\n\nexport function sliderMode(v) {\n  waveMode = rangeSlider(v, 0, 4, true, false)\n}\n\n\nexport function sliderS1(v) {\n  s1 = v;\n}\nexport function toggleOscillateS1(isEnabled) {\n  oscillateS1 = isEnabled;\n}\n\n// Create exported slider functions\nexport function sliderFrequency(v) {\n  myFreq = v;\n}\n\nexport function sliderSpeed(v) {\n  mySpeed = v;\n}\nexport var tf, f, t1, t2, t3, t4, s1Time\n\nexport function beforeRender(delta) {\n  // Map slider values to actual parameters\n  tf = map(mySpeed, 0, 1, 2, 10); // Map mySpeed to tf, from 2 to 10\n  f = map(myFreq, 0, 1, 40, 1);    // Map myFreq to f, from 2 to 7\n  t1 = wave(time(tf * 9.8 / 65.536)) * PI2;\n  t2 = wave(time(tf * 12.5 / 65.536)) * PI2;\n  t3 = wave(time(tf * 9.8 / 65.536));\n  t4 = time(tf * 0.66 / 65.536);\n\n  if(oscillateS1) { // if auto zoom mode is on\n    var waveform = wave(time(0.3)); // sawtooth waveform oscillates between 0.0 and 1.0\n    s1 = 0.2 + bezierQuadratic(waveform, 0, 1, 0) * 1; // use the bezierQuadratic function to get a smooth oscillation effect\n  }\n}\n\n// Map function to convert a value within a given range to another range\nfunction map(value, start1, stop1, start2, stop2) {\n  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n}\n\nexport var sumComponents, z\n\n// Calculate the Z value based on the given x and y coordinates.\nfunction calcZ(x, y, f, t1, t2, s1) {\n  var waveComponent3 = 0\n  if (waveMode == 0) {\n    // Calculate the sine component influenced by x, frequency f, and time oscillation t1\n    waveComponent1 = sin(x * f + t1);\n\n    // Calculate the cosine component influenced by y, frequency f, and time oscillation t2\n    waveComponent2 = cos(y * f + t2);\n  } else if (waveMode == 1) {\n    // Calculate the sine component influenced by x, frequency f, and time oscillation t1\n    waveComponent1 = wave(x * f + t1);\n\n    // Calculate the cosine component influenced by y, frequency f, and time oscillation t2\n    waveComponent2 = wave(y * f + t2);\n\n  } else if (waveMode == 2) {\n    // Calculate the sine component influenced by x, frequency f, and time oscillation t1\n    waveComponent1 = triangle(x * f + t1);\n\n    // Calculate the cosine component influenced by y, frequency f, and time oscillation t2\n    waveComponent2 = triangle(y * f + t2);\n  } else if (waveMode == 3) {\n    // Calculate the sine component influenced by x, frequency f, and time oscillation t1\n    waveComponent1 = bezierQuadratic(x * f + t1, 0, 1, 0);\n    waveComponent2 = bezierQuadratic(y * f + t3, 0, 1, 0)\n\n    // waveComponent1 = bezierCubic(x * f + t1, 0, 0.25, 0.25, 0);\n    // waveComponent2 = bezierCubic(y * f + t2, 0, 0.25, 0.25, 0)\n    // waveComponent2 = bezierQuadratic(y * f + t3, 0, 1, 0)\n    // waveComponent3 = (y * f + t3);\n    // waveComponent1 = waveComponent1 * waveComponent1// * waveComponent1;\n  } else if (waveMode == 4) {\n    waveComponent1 = bezierCubic(x * f + t1, 0, 0.25, 0.25, 0);\n    waveComponent2 = bezierCubic(y * f + t2, 0, 0.25, 0.25, 0)\n  }\n  // Calculate the sum of the constant 1, sine component, and cosine component\n  sumComponents = 1 + waveComponent1 + waveComponent2 + waveComponent3;\n\n  // Scale the sum by s1 to get the final z value\n  z = sumComponents * s1;\n\n  return z;\n\n}\n\n// Calculate the brightness based on the Z value and t4.\nfunction calcBrightness(z, t4) {\n  var v = wave(z + t4);\n  return v * v * v; // Apply concave-upward brightness scaling.\n}\n\n// Calculate the hue based on the Z value and t3.\nfunction calcHue(z, t3) {\n  return triangle(z) / 2 + t3;\n}\n\nfunction renderHoneycomb(index, x, y) {\n\n  if (usePalette) {\n    handlePaletteTransitions();\n  }\n\n  handlePaletteTransitions();\n  // Calculate the Z value for the current x, y point.\n  var z = calcZ(x, y, f, t1, t2, s1);\n\n  // Calculate brightness based on Z.\n  var v = calcBrightness(z, t4);\n\n  // Calculate hue based on Z.\n  var h = calcHue(z, t3);\n\n  // Set the color using HSV values.\n  if (usePalette) {\n    paint(h,v)  \n  } else {\n    hsv(h, 1, v);  \n  }\n  \n  \n}\n\nexport function render2D(index, x, y) {\n  renderHoneycomb(index, x, y);\n}\n\n/*\n  When there's no map defined, Pixelblaze will call render() instead of \n  render2D() or render3D(), so it's nice to define a graceful degradation for 1D\n  strips. For many geometric patterns, you'll want to define a projection down a\n  dimension. \n*/\nexport function render(index) {\n  pct = index / pixelCount  // Transform index..pixelCount to 0..1\n  // render2D(index, pct, pct)  // Render the diagonal of a matrix\n  // render2D(index, pct, 0)    // Render the top row of a matrix\n  render2D(index, 5 * pct, 0)   // Render 3 top rows worth to make it denser\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n"
  },
  "preview": "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"
}