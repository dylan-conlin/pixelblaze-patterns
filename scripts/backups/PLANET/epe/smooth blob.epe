{
  "name": "smooth blob",
  "id": "kgYB4Na9AmPrGHb8e",
  "sources": {
    "main": "// Wavy Bands\n//\n// Requires a correctly configured 2D map\n//\n// MIT License - use this code to make more cool things!\n//\n// 6/22/2023 ZRanger1\n\n// number of displayed columns. Could easily have a UI control\nexport var nColumns = 4\n\ntimebase = 0;\nexport function beforeRender(delta) {\n  timebase = (timebase + delta / 1000) % 3600\n  \n  tx = -timebase / 4    // speed of x axis movement\n  ty = timebase / 2    // speed of y axis movement\n}\n\nexport function render2D(index,x,y) {\n  // distort y coord with perlin noise to vary width of individual columns\n  // (constant multipliers are hand-tuned)\n  y -= 0.3 * perlin(x * 2, y * 2, ty, 1.618) \n  \n  // distort x coord to create wave patterns\n  x += 0.1752 * sin(4 * (tx + y))\n  \n  // quantize color into the specified number of column bins\n  h = floor(x * nColumns)\n  \n  // the original shader colors column edges black. Here, we darken\n  // and antialias them, which looks better at low resolution\n  v = (x * nColumns - 0.5)\n  v =  1-(2*abs(v - h));\n\n  // calculate the final column color, adjust brightness\n  // gradient bit and display the pixel\n  hsv(h / nColumns, 0.9, pow(v,1.25))\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}