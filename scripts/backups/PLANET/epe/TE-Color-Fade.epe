{
  "name": "TE-Color-Fade",
  "id": "wZpmXhxPwF2v97H7E",
  "sources": {
    "main": "// Animated Palette cross fade in TE colors\n// 8/2023 ZRanger1\n\nvar TE_Cyan_Blue_Purple = [\n  0.0, 0.1326, 0.0038, 0.16,  \n  0.1666, 0.1059, .0055, 0.4818, \n  0.3333, 0.061, 0.0246, 0.5610, \n  0.5, 0.4086, 0.25196, 0.9006,   \n  0.6667, 0.1964, 0.6029, 1.0,        \n  1.0, 0.1246, 0.6275, 0.8277,      \n  ]\n\nvar TE_Pink_Purple = [\n    0.0, 0.1059, 0.0055, 0.4818,    \n    0.3333, 0.1059, 0.02977, 0.5610, \n    0.6667, 0.3986, 0.0246, 0.2034, \n    1.0, 0.9006, 0.2105, 0.4603,\n]\n\nvar TE_Cyan_Green = [\n    0.0, 0.0038, 0.3888, 0.2214,    \n    0.3333, 0.0055, 0.7924, 0.346,\n    0.6667, 0.1273, 0.9006, 0.7924, \n    1.0, 0.1569, 0.609, 0.8277, \n]\n\nvar TE_Orange_Green = [\n    0.0, 0.1301, 0.9231, 0.0015,    \n    0.5, 0.5206, 0.9156, 0.0339, \n    1.0, 0.9231, 0.5206, 0.0629,\n]\n\nvar TE_Cyan_Ice = [\n    0.0, 0.0024, 0.1164, 0.9006,    \n    0.1667, 0.0465, 0.2599, 0.9006, \n    0.3333, 0.0517, 0.4982, 0.8277, \n    0.5, 0.1963, 0.6029, 1.0,       \n    0.6667, 0.1246, 0.6275, 0.8277,  \n    1.0, 0.6275, 0.7108, 1.0,      \n]\n\nvar pal = TE_Cyan_Blue_Purple;\n\nvar palettes = [TE_Cyan_Blue_Purple,TE_Pink_Purple,TE_Cyan_Green,TE_Orange_Green,TE_Cyan_Ice]\nexport var repeats = 4;\nvar speed = 1.25;\nvar freeze = 0;\n\nvar pal = TE_Cyan_Blue_Purple;\n\nvar palettes = [TE_Cyan_Blue_Purple,TE_Pink_Purple,TE_Cyan_Green,TE_Orange_Green,TE_Cyan_Ice]\n// control variables for palette switch timing (these are in seconds)\nexport var PALETTE_HOLD_TIME = 1\nexport var PALETTE_TRANSITION_TIME = 1;\nvar PALETTE_HOLD = 0;\n\n// internal variables used by the palette manager.\n// Usually not necessary to change these.\nexport var currentIndex = 0;\nvar nextIndex = (currentIndex + 1) % palettes.length;\n\n// arrays to hold rgb interpolation results\nvar pixel1 = array(3);\nvar pixel2 = array(3);\n\n// array to hold calculated blended palette\nvar PALETTE_SIZE = 16;\nvar currentPalette = array(4 * PALETTE_SIZE)\n\n// timing related variables\nvar inTransition = 0;\nvar blendValue = 0;\nrunTime = 0\n\n// Startup initialization for palette manager\nsetPalette(currentPalette);\nbuildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)  \n\n// UI Controls\nexport function sliderSpeed(v) {\n  speed = clamp(-2 + 4 * v,-2,2);\n}\n\nexport function sliderRepeats(v) {\n  repeats = clamp(v * 8,1,8);\n}\n\n// how long we stick with a palette before transitioning to\n// the next one\nexport function sliderHoldTime(v) {\n  PALETTE_HOLD_TIME = 20 * v * v;\n}\n\n// time to cross-blend between palettes when switching\nexport function sliderTransitionTime(v) {\n  PALETTE_TRANSITION_TIME = 10 * v * v;\n}\n\n// stay  with the current palette\nexport function togglePaletteHold(v) {\n  PALETTE_HOLD = v;\n}\n\n// stop animation\nexport function toggleFreeze(v) {\n  freeze = v; \n}\n\n// user space version of Pixelblaze's paint function. Stores\n// interpolated rgb color in rgbArray\nfunction paint2(v, rgbArray, pal) {\n  var k,u,l;\n  var rows = pal.length / 4;\n\n  // find the top bounding palette row\n  for (i = 0; i < rows;i++) {\n    k = pal[i * 4];\n    if (k >= v) break;\n  }\n\n  // fast path for special cases\n  if ((i == 0) || (i >= rows) || (k == v)) {\n    i = 4 * min(rows - 1, i);\n    rgbArray[0] = pal[i+1];\n    rgbArray[1] = pal[i+2];\n    rgbArray[2] = pal[i+3];    \n  }\n  else {\n    i = 4 * (i-1);\n    l = pal[i]   // lower bound    \n    u = pal[i+4]; // upper bound\n\n    pct = 1 -(u - v) / (u-l);\n    \n    rgbArray[0] = mix(pal[i+1],pal[i+5],pct);\n    rgbArray[1] = mix(pal[i+2],pal[i+6],pct);\n    rgbArray[2] = mix(pal[i+3],pal[i+7],pct);    \n  }\n}\n\n// utility function:\n// interpolate colors within and between two palettes\n// and set the LEDs directly with the result.  To be\n// used in render() functions\nfunction paletteMix(pal1, pal2, colorPct,palettePct) {\n  paint2(colorPct,pixel1,pal1);\n  paint2(colorPct,pixel2,pal2);  \n  \n  rgb(mix(pixel1[0],pixel2[0],palettePct),\n      mix(pixel1[1],pixel2[1],palettePct),\n      mix(pixel1[2],pixel2[2],palettePct)\n   )\n}\n\n// construct a new palette in the currentPalette array by blending \n// between pal1 and pal2 in proportion specified by blend\nfunction buildBlendedPalette(pal1, pal2, blend) {\n  var entry = 0;\n  \n  for (var i = 0; i < PALETTE_SIZE;i++) {\n    var v = i / (PALETTE_SIZE - 1);\n    \n    paint2(v,pixel1,pal1);\n    paint2(v,pixel2,pal2);  \n    \n    // build new palette at currrent blend level\n    currentPalette[entry++] = v;\n    currentPalette[entry++] = mix(pixel1[0],pixel2[0],blend)\n    currentPalette[entry++] = mix(pixel1[1],pixel2[1],blend)\n    currentPalette[entry++] = mix(pixel1[2],pixel2[2],blend)    \n  }\n}\n  \nexport function beforeRender(delta) {\n  runTime = (runTime + delta / 1000) % 3600;\n\n  // Palette Manager - handle palette switching and blending with a \n  // tiny state machine  \n  if (inTransition) {\n    if (runTime >= PALETTE_TRANSITION_TIME) {\n      // at the end of a palette transition, switch to the \n      // next set of palettes and reset everything for the\n      // normal hold period.\n      runTime = 0;\n      inTransition = 0\n      blendValue = 0\n      currentIndex = (currentIndex + 1) % palettes.length\n      nextIndex = (nextIndex + 1) % palettes.length   \n\n    }\n    else {\n      // evaluate blend level during transition\n      blendValue = runTime / PALETTE_TRANSITION_TIME\n    }\n    \n    // blended palette is only recalculated during transition times. The rest of \n    // the time, we run with the current palette at full speed.\n    buildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)          \n  }\n  else if (runTime >= PALETTE_HOLD_TIME) {\n    // when hold period ends, switch to palette transition\n    if (!PALETTE_HOLD) {\n      runTime = 0\n      inTransition = 1\n    }\n  }\n  \n  // pattern-specific code below this line\n  timebase = (timebase + ((delta * speed) / 1000)) % 3600;  \n  t1 = (freeze) ? 0: frac(timebase);\n}\n\nexport function render(index) {\n  paint(t1 + triangle(repeats * index/pixelCount));\n}"
  },
  "preview": "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"
}