{
  "name": "cubefire 3d",
  "id": "PTLJyzHvyZn7tMPdL",
  "sources": {
    "main": "/*\n  Cube fire 3D\n  \n  3D example: https://youtu.be/iTM-7ILud4M\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully in 2D\n  and 1D.\n  \n  The base 3D variant is based on multiplying sine waves of x, y, and z \n  position. This results in a regular 3D array of spheres. The size of the\n  spheres pulses, and their position in 3D space oscillates at different\n  frequencies.\n*/\n\n\nspeed = 1  // How fast the spheres travel through 3D space\n\nexport function beforeRender(delta) {\n  t1 = time(.1 / speed)    // x offset\n  t2 = time(.13 / speed)   // y offset\n  t3 = time(.085 / speed)  // z offset\n\n  // Oscillate the scale coefficient of space between 0.25 and 0.75\n  scale = (.5 + wave(time(.1))) / 2\n}\n\nexport function render3D(index, x, y, z) {\n  // Color is 20% dependent on each axis and cycling every 6.5 seconds\n  h = x / 5 + y / 5 + z / 5 + t1\n  \n  // Since wave() returns a 0..1 sinusoid, and we multiply it by other \n  // phase-offset wave()s, the final output will be a series of spheres in space\n  // with a value of 0..10\n  v = 10 * (wave(x * scale + wave(t1)) * \n            wave(y * scale + wave(t2)) * \n            wave(z * scale + wave(t3)))\n            \n  // The outer surface of the spheres, with the lowest values, will be white. v\n  // values between 2 and 10 (the core of the spheres) will be colorful.\n  s = v - 1\n\n  /*\n    This looks like typical gamma correction here, but really it only serves to\n    increase the negative space between nearby spheres; after this the cores\n    will all have v > 1 (e.g. center v == 10^3)\n  */\n  v = v * v * v  \n  \n  hsv(h, s, v) // Recall that v is automatically capped at 1.0 by hsv()\n}\n\n// As we commonly do with 3D fields, a decent 2D rendering is a slice at z == 0\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\n/*\n  A common approach to creating 1D versions of 3D patterns is to render the line\n  in 3D where y & z = 0. To translate pixel indices to x's 0..1 world \n  coordinates, divide index by pixelCount to output a 'percent this pixel is into\n  the strip', i.e. 0..1. Evaluating this aesthetically in 1D, it seems to look\n  best scaled out so we multiply by 8 to plot a longer line from 3D space.\n*/\nexport function render(index) {\n  render3D(index, index / pixelCount * 8, 0, 0)\n}\n"
  },
  "preview": "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"
}