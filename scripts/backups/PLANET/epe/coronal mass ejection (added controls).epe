{
  "name": "coronal mass ejection (added controls)",
  "id": "o9jXm3MW5gHxnwn7S",
  "sources": {
    "main": "export var speed = 8\nexport var sliderSpeed = function(v) {\n  speed = 35 - (v * 32)\n}\n\nexport var coreSize = 0.1\nexport var sliderCoreSize = function(v) {\n  coreSize = 0.1 + v\n}\n\nexport var flareAmount = 0.675\nexport var sliderFlareAmount = function(v) {\n  flareAmount = 1 - v\n}\n\nexport var zoom = 2.0 // define a variable for zoom\nexport var sliderZoom = function(v) { // define a function to update the zoom variable\n  zoom = 0.01 + v * 3.5 // maps v from [0,1] to [0.01,3.51]\n}\n\nexport var zoomSpeed = 1.0 // define a variable for zoom speed\nexport var sliderZoomSpeed = function(v) { // define a function to update the zoom speed variable\n  zoomSpeed = 0.1 + (1-v) * 3.9 // maps v from [0,1] to [0.1,4]\n}\n\nexport var autoZoom = 0\nexport var toggleAutoZoom = function(v) {\n  autoZoom = floor(v + 0.5) // toggle auto zoom mode on/off\n}\n\nexport var rotSpeed = 1.0 // define a variable for rotation speed\nexport var sliderRotSpeed = function(v) { // define a function to update the rotation speed variable\n  rotSpeed = v * 10.0 // maps v from [0,1] to [0,10]\n}\n\nvar c2 = coreSize / 4;\ntranslate(-0.5,-0.5);\nsetPerlinWrap(3,256,256);\nexport var noiseYTime\nexport var noiseTime\n\nexport function beforeRender(delta) {\n  if(autoZoom) { // if auto zoom mode is on\n    var waveform = wave(time(zoomSpeed)); // sawtooth waveform oscillates between 0.0 and 1.0\n    zoom = 0.1 + bezierQuadratic(waveform, 0, 1, 0) * 1; // use the bezierQuadratic function to get a smooth oscillation effect\n  }\n\n  t1 = time(rotSpeed * 0.2);\n  noiseTime = time(10) * 256;\n  noiseYTime = time(speed) * 256;\n}\n\nexport function render2D(index, x, y) {\n  x /= zoom; // apply the zoom factor to x\n  y /= zoom; // apply the zoom factor to y\n\n  tmp = hypot(x,y); x = atan2(y,x); y = tmp;  \n  \n  v = 1-perlinTurbulence(x,y - noiseYTime,noiseTime,1.5,.25,3)\n  \n  v = max(smoothstep(flareAmount,1,v),(1-((y*v)-c2)/coreSize));  \n  v = v * v * v;    \n\n  hsv(t1 - (0.125*v),6.5*y-v, v);\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}