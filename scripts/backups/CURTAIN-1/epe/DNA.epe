{
  "name": "DNA",
  "id": "W4frQgTaYNNS7FtyW",
  "sources": {
    "main": "// Palette arrays\nvar viridis = [0.0, 68/255, 1/255, 84/255, 0.1, 72/255, 36/255, 117/255, 0.2, 65/255, 68/255, 135/255, 0.3, 53/255, 95/255, 141/255, 0.4, 42/255, 120/255, 142/255, 0.5, 33/255, 145/255, 140/255, 0.6, 34/255, 168/255, 132/255, 0.7, 68/255, 191/255, 112/255, 0.8, 122/255, 209/255, 81/255, 0.9, 189/255, 223/255, 38/255, 1.0, 253/255, 231/255, 37/255,];\nvar plasma  = [0.0, 13/255, 8/255, 135/255, 0.1, 65/255, 4/255, 157/255, 0.2, 106/255, 0/255, 168/255, 0.3, 143/255, 13/255, 164/255, 0.4, 177/255, 42/255, 129/255, 0.5, 204/255, 71/255, 120/255, 0.6, 225/255, 100/255, 98/255, 0.7, 242/255, 132/255, 75/255, 0.8, 252/255, 166/255, 54/255, 0.9, 252/255, 206/255, 37/255, 1.0, 240/255, 249/255, 33/255, ];\nsetPalette(plasma);\n\n// Default values\nexport var speed = .03;\nexport var strandWidth = 0.1;\nexport var freq = 1;\nexport var myMode = 1;\nexport var distance = 0.4;\nvar t;\n\n// Slider functions\nexport function sliderSpeed(v) { speed = 3 + ((1-v) * 10); }\nexport function sliderStrandWidth(v) { strandWidth = 0.05 + v; }\nexport function sliderFrequency(v) { freq = .1 + (v * 18); }\nexport function sliderMode(v) { myMode = ceil((v * 2)); }\nexport function sliderDistance(v) { distance = v; }\n\n// Reset toggle\nexport function toggleResetToDefaults(v) {\n  if (v) {\n    speed = .03;\n    strandWidth = 0.1;\n    freq = 1;\n    myMode = 1;\n    distance = 0.4;\n  }\n}\n\nfunction beforeSinushimmer(delta) {\n  t = time(speed / (65.536));\n}\n\n// Sinushimmer function\nfunction sinushimmer(index, r, phi, theta) {\n  var mode, line;\n  \n  // Determine mode based on myMode\n  if (myMode === 0) {\n    mode = bezierQuadratic(t, 0, 18, 0);\n  } else if (myMode === 1) {\n    mode = 0.2 + wave(t);\n  } else if (myMode === 2) {\n    var count = wave(t);\n    mode = count + freq;\n  }\n  \n  // Generate line\n  line = near(r, 0.5 + distance * cos((mode*phi - t) * (PI2)), strandWidth);\n  \n  // Paint line\n  paint(line, 1);\n}\n\n// Render functions\nexport function beforeRender(delta) { beforeSinushimmer(delta); }\nexport function render3D(index, r, phi, theta) {\n  sinushimmer(index, r, phi, theta)\n}\nexport function render2D(index, r, phi) {\n  render3D(index, r, phi, .5) // Equatorial section\n}\n\nexport function render(index) {\n  render2D(index, index / pixelCount, 0)\n}\n\n// Utilities\n\n// Several modes define a line in space. This sets the defualt thickness of\n// those. Use a higher percentage for projects with fewer pixels.\nvar halfwidthDefault = 0.125\n\n// Returns 1 when a & b are proximate, 0 when they are more than `halfwidth`\n// apart, and a gamma-corrected brightness for distances within `halfwidth`\nfunction near(a, b, halfwidth) {\n  if (halfwidth == 0) halfwidth = halfwidthDefault\n  var v = clamp(1 - abs(a - b) / halfwidth, 0, 1)\n  return v * v\n}\n\n"
  },
  "preview": "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"
}