{
  "name": "coronal mass ejection (added controls)",
  "id": "o9jXm3MW5gHxnwn7S",
  "sources": {
    "main": "export var speed = 8\nexport var sliderSpeed = function(v) {\n  speed = 35 - (v * 32)\n}\n\nexport var coreSize = 0.1\nexport var sliderCoreSize = function(v) {\n  coreSize = 0.1 + v\n}\n\nexport var flareAmount = 0.675\nexport var sliderFlareAmount = function(v) {\n  flareAmount = 1 - v\n}\n\nexport var zoom = 2.0 // define a variable for zoom\nexport var sliderZoom = function(v) { // define a function to update the zoom variable\n  zoom = 0.01 + v * 3.5 // maps v from [0,1] to [0.01,3.51]\n}\n\nexport var zoomSpeed = 1.0 // define a variable for zoom speed\nexport var sliderZoomSpeed = function(v) { // define a function to update the zoom speed variable\n  zoomSpeed = 0.1 + (1-v) * 3.9 // maps v from [0,1] to [0.1,4]\n}\n\nexport var autoZoom = 0\nexport var toggleAutoZoom = function(v) {\n  autoZoom = floor(v + 0.5) // toggle auto zoom mode on/off\n}\n\nexport var rotSpeed = 1.0 // define a variable for rotation speed\nexport var sliderRotSpeed = function(v) { // define a function to update the rotation speed variable\n  rotSpeed = v * 10.0 // maps v from [0,1] to [0,10]\n}\n\nvar c2 = coreSize / 4;\ntranslate(-0.5,-0.5);\nsetPerlinWrap(3,256,256);\nexport var noiseYTime\nexport var noiseTime\n\nexport function beforeRender(delta) {\n  if(autoZoom) { // if auto zoom mode is on\n    var waveform = wave(time(zoomSpeed)); // sawtooth waveform oscillates between 0.0 and 1.0\n    zoom = 0.1 + bezierQuadratic(waveform, 0, 1, 0) * 1; // use the bezierQuadratic function to get a smooth oscillation effect\n  }\n\n  t1 = time(rotSpeed * 0.2);\n  noiseTime = time(10) * 256;\n  noiseYTime = time(speed) * 256;\n}\n\nexport function render2D(index, x, y) {\n  x /= zoom; // apply the zoom factor to x\n  y /= zoom; // apply the zoom factor to y\n\n  tmp = hypot(x,y); x = atan2(y,x); y = tmp;  \n  \n  v = 1-perlinTurbulence(x,y - noiseYTime,noiseTime,1.5,.25,3)\n  \n  v = max(smoothstep(flareAmount,1,v),(1-((y*v)-c2)/coreSize));  \n  v = v * v * v;    \n\n  hsv(t1 - (0.125*v),6.5*y-v, v);\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCACWAGQDASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAABQYAAwQHAgH/xABOEAABAwMABAgICgcECwAAAAABAgMEAAURBhIhwRMiMTJxkaHRM0FRUoGisbIUFSNCU2GSk6PCJENiY5Sk8HKCs+EWJSZUc3W0w9Li8f/EABsBAAMAAwEBAAAAAAAAAAAAAAIDBAEFBgAH/8QAMBEAAQMCBAMHBAIDAAAAAAAAAQACAxEhBBIx8EGBwQUiUWFxobETFJHRQrJi4fH/2gAMAwEAAhEDEQA/AOjNyykIyeacdhrS3OQWypXKTgdVY34+q26R4lZHRWB4LbWhG3bg18dEbXp+ctR5+MxJRwQA5dag82wtvSJLyUjCmVJH2cVlRdlNOlRPixW+NeUqaZSo8qtU0Qjmiu1eL2P1SXcdGSIMFIRt4ZR6yO6gU6yrRKuqtTx/nzXYiGJJUCBhhWR1VgmWRp1EtQSMubaug7Ve2z93qlOw/Fq46m3KQ5ByDsCc/aNa4UDZLSU7VJT7DT7K0eCVtYTzUj21nj2bUkrGrytjfWwPaTXtN91SPpOBQ20xymTo2ojl4p+7J3UULaU6PaQ7PBSVEfdpVvrRBh8GixLI8G5+RQqyUziz6RNfSqcV+AioJJs0n4/snNbQb8ERkEI0iJHz4i09TjY/NQxtYTCtw8UeYB0fLrTWu4OYu7DudgQ8g/fMULUohi4N52sy0rHR8MVupETasby6jqjcbnfmhV7lcDc1KJ8KhDnWkDdUrHpHGclO299tRAXCb5PLlQqVuoI4zGKlSPJzFdGZe4Zxts8haV15FenYyXXkKHIAU9RxUailtxKvGM+0VqQgpbTnl1j71cu5wB7qvArqlCbCWmOFJ88ihyi6y66Nvyas9opxkNJU1q+Ree2hUmAlfDKT89P9eytjDiBSjlO+PwUgTF60sEnjoyOsimOPI4RtjPzm+6l6LFKJLafEUYP2jRiHn4NFP1Y7D3VJiQ03CbESEQWhK1JyPEazBhHCqXgbBir9bDqeisZf1W3z5DipWg8E5xCr+DBMeGANqFZH2VVjmtcWSjGx5LmfuUit6Xwr4Anzx+U1U+kLU4rxNlYP3Yp7HEOvu6WQKWS7dJBSxMdz4F5aet1vurKt0m7XFrxOxuFHTwyl1ovbBTZr4rHJIyPtoNY1gjSyM0f1tsz6qzW1iAMduFfahUziarbbIIn2S3rIyW2eDPoUrvqVdoZNSLEUKAOq6oDqB31KlnllZK5o8SmMa1zQSmZyVwaVEjm5B6hVDtxSF8vIo+8BWRuezcGm0NqGZDJcG3lOU1mlMFctlKOapO0/WFHPsqZkIrR1kTpDwXty4JwvbyEH21UmcnVY284j2UuvPOJYU5+0lPvGsqZ60ORUk8mD6tbFuEBFlMZSn2O42t93k+SArcylKYzeORO0dR76TIFz41yVrcid1MsWXrxIKc7XWz7lQzwOYd+CojkBW193VW0fOc1fWAoPIfw3chnmKQesq7q2zCQ7HT5r4z9tJ30HdJLl8HkS17zgrEDBSvp8hZe6+/BWMyyZ1gRnwjYV+Eo1aiaDab8+T4J1aR90nvoTGX+n6Hq8+Mkn+GWaxOyVN6I6TKztMtwfgNnfVn0A5wHp/YhLzUB3wCabzFDkWZGA2voW5joU330OegE6Z25wDiogrbPSAoUWdfS7pQ1HUeKIT2fvGhVsRKXlNzDyhbzYPS6RUrJHRs9QfcU6JhaHO3wSdoe058TuZzkPqHUEjdUpsstqRFhutgcr6z21KziMUHSuIQsiOULi1h0okR7rbkOrIQwhTZ9JHdT9ZdK2n4PCOEFSJOqCfIVmlS86GOQ49ymNoI1H0lGPIST7KBBEu2BEQhQK9R/furp5YMNjG5o9dk/KiDnMK61KhMvw1MsEKUFpd2eQg/16aDz7SpNxe1RxWm9YEfUgUGtOki2pq1KXlPAgdSTTfbrtGmxY4cI4R9BaUehP/wArVPjmwx8Rv9JgLXpYZQ6w0+SD8sMUetlz+UtYWeZlB9IIom7aG3W2UIwdRakqx5dnfQSbbHIQdcSDhl5OOj+jQ/WjnsddhYyuZdN0d9uUmU4T4NZUOpOPZVD0PHxkvxPhAHocV/5UtQ7i5GMhpRIK0oV2GmeLcm5LUFBIy6BnsNQyQviNtNlUMkDtUIYjFMjQ/PzGUoP8K6KE3Fko0U0nTjmy3D/LNGm15pAfjLTyQllPR8ksb6D3SODZNJ2seE4R0fwzYp8M1ZAfT+1eqw4WO+C+yJCm9NZB8yC8fxWTV1puObTFTnwkkn+YXVFxZzpS64P1lte7C0d1AocksWu0bedKI6nid9G2JskTeXw5AXlrjzXQfjFtAABxka3XtqUhTLupp1Cdf5g7qlLHZpIqs/copb9Iol4jQoT2qPhLQCyfOCTg+rXqbo5Eu10blsapabZUycDxhOB7wri1vuz0V6KsKI4JaU9i6cbHps7Gs8pBXt4YLG39hJ3Vt8R2VLA4uw52dhIEoNnrE/Z5FvtiZK0kZeU11Jq+K+/EfaaJILSj7BXSZrUK+k21kJGAmSPSSD7RS9drBrXa5SWE/IiOHkdSf86CLtAS92UUP/KfKw6Mi4RC0XpWrP1zyKKh1imeUy1NgOJAGs83wg9Fc7hpU3Hd1hgvpOOvG6ni2P68mGnPF4BQ6yK1mMhDHZ2boE2F9e6UFutsU3dWwkbFMDsyKFwJTjPwBRJ4ign1D3U+vsJfeZdI5CU+tSo9beDaAA2odB7FCiw+ID2ZX71WJGFpqEQZmlyJdlE7Ur1vVHfV84BbFwb+khuk9PBIG6hjLRTHuI8S2s+onuojKSoMOr86G77gG6lOaA8U3YIw4kL7JQHLrFc86LKb7UClCS2W4FpSPFcHU9TqRTcV4mREnxfCv8Zob6X56Eli1geO7OgfxSRT8K6hA3/JDIK79En3eYRcHE55pKeompQm+Pat3kjyOr99VSuoigGQKVCrtAXCMwY8DLSnsXQ5Lq2mnkAkZQk/h0/aUQApq6qCdplhXUcb6S5ENQfWMbOBH+FVWExAljqd6L1eBTzo1pG61fQ6VnbFWnl8mqd9P9oubMuwQkrxwr+tGUT5OMO6uNWxK2p6FDPglDsRTrZH3G4UXBOGpqv8TG+tH2lg2HvN1t1RRyFqcpFnQh23MpAyk6q/SsK31ptjamyytXKk6vvd1fWJmvOkKXt1QlSeo91XMOIPJ5Sr+uuufe55blduqpGWtQiRWEtN/wDFA9YUNUlK3loxyFOetfdUMn9EjqzzpiR+KBXhpWtcpqPMS2e1ylMYWgneqNzq0VTTaVQUqH68BI9IrbNQDD6WFI69lYberXs1gV9MpvP3KjurVJczbkK8rqW+s0b65wPP/XRCNFlkI1buyjzWZK+t5k0uylZj2A+denf+uFM8vH+k7iPMt7qutbZ3UpPKJtej7nkvLh651WYW4b6/Ichedd8Quc6Q7L7MHkec981K9aUJLd/k/tLWr11VK7OC8TT5KSoTxemuFXObxzpCvfFL7lqK1KXq/MCfUIptda4e5LTjnOLVvrXGtgXEkEp2pdIHoH+dc6zFfRYAvZSSlCPaFIfSdX5ix6qaPQYKm4T2zmys/jppoTaEF5ICdoSdw3VpatyTDUQnY4+FD70HdUk3aOcDkmNiKxpaUlTqscrW9dWR9ZMhKPK0T1avfRdyGA2dnKjHvd9ZlshuYk/ulp9PFNa4TByfkIWBRIt0I+SanP8AECroWTpFdUeRlo+s7VMhOra0/up//fSa1xE6ultwH0kRs9S3O+jce47n8heGo3wWS0qJ0f0SP1t5+4crQ+T8VMfXNR7wquzN/wCz2jQ+jKextwVvfY/QEJxzX0r6iDQyOAl5n5KyLt5dAsjwK9MJX/LiPWTSstsnRm0OY5l1PbNFOgaB0jcd86KUesKAriY0PjjG1u5g/wA4KdBKBlHm34chcNefyFzTTyEWr8jA57Ov+IupTZp5bOGvUZQHJGA9ddSuowWMb9uyvgpH2cQmSLbiH48lQ4pbKz9ijHANxVqbIGHVn1lJFVSZjSIcmOnGuzxU9A1Umhz90Sr4JrK45fSn0CRj8tckRJKQeXVUjKyyOtuITPezjCW0dq191eozqBDipJGQkKP2SaTVX4cHId19pLaexZ31Q7pIEhHH2BpI9QDfR/YSOtvRY+4AT4ZaHHWUAjjHvFClSg4mI5nwjpT1tk7qW4V81rxEQVbNVK+tahuqm3XJUiz2Y54ypDfay5RDAuZUneq8ZsyYJS/9X3f90+pwdaFUQSOD0lS94lwsdS//AGoaQX4mkezYEY9JjIPtrbdn0xzHfSeQqZJ9KTupThWjRx6gIgaX3qpDIjW1pr/dUlXRhKu+tpeDjzTOee0tfYKX5srg5V8bB2NxtnSW099aIsom7WvJ2KjEH7WN1efCSM/P2qvB9O6izLoUUSP7aT9tNY30p+KjGHzppWPRJKt1VMOKTa5oPKypXaod1etcGXa0E7HQpZ9IUqhDKH0NfxdZzVC+zICLlNeWRnglcH2A76lZGrymNLnIUeWRreqmpTKTtADdEFYzcoFcrmIz09ZWDqpczt8ZdbHfSxM0hSzLgkr2c8/fLNKl30lckPXJKVcV51WOjWCt1L701x3jFRISCB0ZzXX4XsmjRn3ZTZXvumc35xSFt63OKVdQUN9VfGjjkZRKtoUlI+0BQVhlxckJIPMKurFGbfaH5MdjiH5STqj6/lAKtfHFHcpTmhqPW2Q6u7BWT8kw2PxFd9NejUBZjaNBYIQtaXD0BpzvqWTRoM3C6pf4qg0hDefGolSu6jqHmWbOzHRhL9taQkDx7U6h7TXNYzFNfVkfl7j9lNY2lyikdKGn7pCVyyXFY+scChI9lL8+cqVYG1A5UJ3ZqE1cu4qfuNrlo/WaiFdJWUbqzwbe4825GIPFU07jpQ4N1QRxhnffwp7W/SY5+awUlEvz7wRt4VkAfXhtB3URjtq1re9ja2VI7Qd9fY0VtDEWWsjVeShK/S1q+0UQZLIkmOnbnVWj+9s3UEktqDh+qLLW3qVWtOom7oHItWR1mqCpXwyynzEtg+kFNbcByA299Pq63Uazymi3dYiByI1D6AuktdcjelER8d6pDvE4t3R4A4zg9lSvsyAqbJU+kZCuQ+mpXQxmIMAOqiJNVyNqOXX0Ann8tEotrSuK8SobFY9WpUrpZnuGibM9w0KfrFom0/dghxaSPg5VyeXVFNNugxYduQyG8vQwqXr+UglWPZUqVx+Mmkc6hNrdUMYFKrFcb465ampqAUvNLXrq87V1cdhogiOpzSaY0VcV1h1R6Q633mpUoZGhjO7/AJdFlpqb+S0R4iWtH47/ACqYmHH92UTvoo9IRAvyNRHFeZQkj+y4RvqVKgd3nkHxd0ThYCnklpy4ufFs5jbiO6gJ9D4T7DRO1yFLntuHlbYaHT8u4N1SpVczGiM0HHoEphOYI2CGbJHTjJQ02fTgD81ZZ72dIpCcbGoJcHTkndUqVrohUk+vRUO0/CwaLwUS9Hory8ayk5NSpUr2JkcJngHiV6NoLAv/2Q=="
}