{
  "name": "Fast Palette Blending (more palettes)",
  "id": "2v6F9FbfMbSjQaCZE",
  "sources": {
    "main": "// Fast(er) palette blending demo. Switches between multiple palettes\n// at a configurable interval, and blends them while switching with\n// configurable transition time.  Also shows how to convert FastLED\n// gradient palettes for use with Pixelblaze.\n//\n// MIT License - Have fun!\n//\n// 6/03/2023 ZRanger1\n // blue purple teal pop of yellow, balanced.\n      var inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\n      //yellow-orange-red-purple-navy\n      //http://soliton.vm.bytemark.co.uk/pub/cpt-city/bhw/bhw1/tn/bhw1_04.png.index.html\n      var bhw1_04_gp = [0, 229,227,  1,   15, 227,101,  3,    142,  40,  1, 80,   198,  17,  1, 79,   255,   0,  0, 45]\n      arrayMutate(bhw1_04_gp,(v, i ,a) => v / 255);\n      // blue-purple-red\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/red/tn/Analogous_1.png.index.html\n      var Sunset_Real = [0.0, 0.471, 0.0, 0.0,    0.086, 0.702, 0.086, 0.0,   0.2, 1.0, 0.408, 0.0,   0.333, 0.655, 0.086, 0.071,   0.529, 0.392, 0.0, 0.404,   0.776, 0.063, 0.0, 0.51,    1.0, 0.0, 0.0, 0.627,];\n      // Battery Saver: black-blue-purple-pink-white Top pick.\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/basic/tn/BlacK_Blue_Magenta_White.png.index.html\n      var Analogous_1 = [0.0, 0.012, 0.0, 1.0,    0.247, 0.09, 0.0, 1.0,    0.498, 0.263, 0.0, 1.0,   0.749, 0.557, 0.0, 0.176,   1.0, 1.0, 0.0, 0.0,];\n      // this is a really good one. Orange Pink Green. Should be garish but isn't. \n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/ma/icecream/tn/rainbowsherbet.png.index.html\n      var rainbowsherbet = [0.0, 1.0, 0.129, 0.016,   0.169, 1.0, 0.267, 0.098,   0.337, 1.0, 0.027, 0.098,   0.498, 1.0, 0.322, 0.404,   0.667, 1.0, 1.0, 0.949,   0.82, 0.165, 1.0, 0.086,    1.0, 0.341, 1.0, 0.255,];\n      // really good blending, purples blues and pinks. Mild but good.\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/hult/tn/gr65_hult.png.index.html\n      var BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0,   0.165, 0.0, 0.0, 0.176,   0.329, 0.0, 0.0, 1.0,   0.498, 0.165, 0.0, 1.0,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 1.0,   1.0, 1.0, 1.0, 1.0,];\n      // Battery Saver: black magenta red yellow.\n      //better than just black magenta red.\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/basic/tn/BlacK_Red_Magenta_Yellow.png.index.html\n      var gr65_hult = [0.0, 0.969, 0.69, 0.969,   0.188, 1.0, 0.533, 1.0,   0.349, 0.863, 0.114, 0.886,   0.627, 0.027, 0.322, 0.698,   0.847, 0.004, 0.486, 0.427,   1.0, 0.004, 0.486, 0.427,];\n      // yellow to greens to blues. Very little red. \n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/gmt/tn/GMT_drywet.png.index.html\n      var GMT_drywet = [0.0, 0.184, 0.118, 0.008,   0.165, 0.835, 0.576, 0.094,   0.329, 0.404, 0.859, 0.204,   0.498, 0.012, 0.859, 0.812,   0.667, 0.004, 0.188, 0.839,   0.831, 0.004, 0.004, 0.435,   1.0, 0.004, 0.027, 0.129,];\n      // Battery Saver: an excellent fire look, but too much black in it for many patterns. Black - red - orange - yellow - white.\n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/neota/elem/tn/lava.png.index.html\n      var lava = [0.0, 0.0, 0.0, 0.0,   0.18, 0.071, 0.0, 0.0,    0.376, 0.443, 0.0, 0.0,   0.424, 0.557, 0.012, 0.004,   0.467, 0.686, 0.067, 0.004,   0.573, 0.835, 0.173, 0.008,   0.682, 1.0, 0.322, 0.016,   0.737, 1.0, 0.451, 0.016,   0.792, 1.0, 0.612, 0.016,   0.855, 1.0, 0.796, 0.016,   0.918, 1.0, 1.0, 0.016,   0.957, 1.0, 1.0, 0.278,   1.0, 1.0, 1.0, 1.0,];\n      // reds to oranges to yellows to purple blue. No black in it. \n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/atmospheric/tn/Sunset_Real.png.index.html\n      var BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0,   0.165, 0.165, 0.0, 0.0,   0.329, 1.0, 0.0, 0.0,   0.498, 1.0, 0.0, 0.176,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 0.176,   1.0, 1.0, 1.0, 0.0,];\n      // as described, blue cyan yellow -- slightly blue biased. \n      // http://soliton.vm.bytemark.co.uk/pub/cpt-city/nd/basic/tn/Blue_Cyan_Yellow.png.index.html\n      var Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0,   0.247, 0.0, 0.216, 1.0,   0.498, 0.0, 1.0, 1.0,   0.749, 0.165, 1.0, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar palettes = [\n  inferno,\n  bhw1_04_gp, \n  Sunset_Real, \n  Analogous_1, \n  rainbowsherbet, \n  BlacK_Blue_Magenta_White, \n  gr65_hult, \n  GMT_drywet, \n  lava, \n  BlacK_Red_Magenta_Yellow, ]\n\n// a bunch of fastled gradient palettes\nvar black_Blue_Magenta_White_gp = [\n    0,   0,  0,  0,\n   42,   0,  0, 45,\n   84,   0,  0,255,\n  127,  42,  0,255,\n  170, 255,  0,255,\n  212, 255, 55,255,\n  255, 255,255,255]\n// normalize palette to 0.0 to 1.0 range  \narrayMutate(black_Blue_Magenta_White_gp,(v, i ,a) => v / 255);  \n\nvar es_landscape_33_gp = [\n    0,   1,  5,  0,\n   19,  32, 23,  1,\n   38, 161, 55,  1,\n   63, 229,144,  1,\n   66,  39,142, 74,\n  255,   1,  4,  1]\n// normalize palette to 0.0 to 1.0 range    \narrayMutate(es_landscape_33_gp,(v, i ,a) => v / 255);\n\nvar heatmap_gp = [\n  0,     0,  0,  0,   \n128,   255,  0,  0,   \n224,   255,255,  0,   \n255,   255,255,255 ];\n// normalize palette to 0.0 to 1.0 range   \narrayMutate(heatmap_gp,(v, i ,a) => v / 255);\n\n// list of the palettes we'll be using\n//var palettes = [black_Blue_Magenta_White_gp,es_landscape_33_gp,heatmap_gp]\n\n// control variables for palette switch timing (these are in seconds)\nexport var paletteHoldTime = 5; // New slider for PALETTE_HOLD_TIME\nexport var paletteTransitionTime = 2; // New slider for PALETTE_TRANSITION_TIME\n\nexport function sliderPaletteHoldTime(v) { // New slider function\n  paletteHoldTime = 1 + v * 20; // Adjust range as needed, 1-21 seconds in this example\n}\n\nexport function sliderPaletteTransitionTime(v) { // New slider function\n  paletteTransitionTime = 0.1 + v * 10; // Adjust range as needed, 0.1-10.1 seconds in this example\n}\n\n// internal variables used by the palette manager.\n// Usually not necessary to change these.\nvar currentIndex = 0;\nvar nextIndex = (currentIndex + 1) % palettes.length;\n\n// arrays to hold rgb interpolation results\nvar pixel1 = array(3);\nvar pixel2 = array(3);\n\n// array to hold calculated blended palette\nvar PALETTE_SIZE = 16;\nvar currentPalette = array(4 * PALETTE_SIZE)\n\n// timing related variables\nvar inTransition = 0;\nvar blendValue = 0;\nrunTime = 0\n\n// Startup initialization for palette manager\nsetPalette(currentPalette);\nbuildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)  \n\n// user space version of Pixelblaze's paint function. Stores\n// interpolated rgb color in rgbArray\nfunction paint2(v, rgbArray, pal) {\n  var k,u,l;\n  var rows = pal.length / 4;\n\n  // find the top bounding palette row\n  for (i = 0; i < rows;i++) {\n    k = pal[i * 4];\n    if (k >= v) break;\n  }\n\n  // fast path for special cases\n  if ((i == 0) || (i >= rows) || (k == v)) {\n    i = 4 * min(rows - 1, i);\n    rgbArray[0] = pal[i+1];\n    rgbArray[1] = pal[i+2];\n    rgbArray[2] = pal[i+3];    \n  }\n  else {\n    i = 4 * (i-1);\n    l = pal[i]   // lower bound    \n    u = pal[i+4]; // upper bound\n\n    pct = 1 -(u - v) / (u-l);\n    \n    rgbArray[0] = mix(pal[i+1],pal[i+5],pct);\n    rgbArray[1] = mix(pal[i+2],pal[i+6],pct);\n    rgbArray[2] = mix(pal[i+3],pal[i+7],pct);    \n  }\n}\n\n// utility function:\n// interpolate colors within and between two palettes\n// and set the LEDs directly with the result.  To be\n// used in render() functions\nfunction paletteMix(pal1, pal2, colorPct,palettePct) {\n  paint2(colorPct,pixel1,pal1);\n  paint2(colorPct,pixel2,pal2);  \n  \n  rgb(mix(pixel1[0],pixel2[0],palettePct),\n      mix(pixel1[1],pixel2[1],palettePct),\n      mix(pixel1[2],pixel2[2],palettePct)\n   )\n}\n\n// construct a new palette in the currentPalette array by blending \n// between pal1 and pal2 in proportion specified by blend\nfunction buildBlendedPalette(pal1, pal2, blend) {\n  var entry = 0;\n  \n  for (var i = 0; i < PALETTE_SIZE;i++) {\n    var v = i / PALETTE_SIZE;\n    \n    paint2(v,pixel1,pal1);\n    paint2(v,pixel2,pal2);  \n    \n    // build new palette at currrent blend level\n    currentPalette[entry++] = v;\n    currentPalette[entry++] = mix(pixel1[0],pixel2[0],blend)\n    currentPalette[entry++] = mix(pixel1[1],pixel2[1],blend)\n    currentPalette[entry++] = mix(pixel1[2],pixel2[2],blend)    \n  }\n}\n  \nexport function beforeRender(delta) {\n  runTime = (runTime + delta / 1000) % 3600;\n\n  // Palette Manager - handle palette switching and blending with a \n  // tiny state machine  \n  if (inTransition) {\n    if (runTime >= paletteTransitionTime) {\n      // at the end of a palette transition, switch to the \n      // next set of palettes and reset everything for the\n      // normal hold period.\n      runTime = 0;\n      inTransition = 0\n      blendValue = 0\n      currentIndex = (currentIndex + 1) % palettes.length\n      nextIndex = (nextIndex + 1) % palettes.length   \n\n    }\n    else {\n      // evaluate blend level during transition\n      blendValue = runTime / paletteTransitionTime\n    }\n    \n    // blended palette is only recalculated during transition times. The rest of \n    // the time, we run with the current palette at full speed.\n    buildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)          \n  }\n  else if (runTime >= paletteHoldTime) {\n    // when hold period ends, switch to palette transition\n    runTime = 0\n    inTransition = 1\n  }\n  \n  // beforeRender() code specific to your pattern can go below this line\n\n}\n\n// Add your pattern render() code here -- just use paint to get color\n// from the current blended palette.\nexport function render(index) {\n  pct = frac(wave(time(0.1))+ index/pixelCount)\n  paint(pct);\n}\n\n\n"
  },
  "preview": "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"
}