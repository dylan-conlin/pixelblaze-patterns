{
  "name": "ripple color slider 2D",
  "id": "7bAHFwbcGjzZW9ien",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nexport var color = 0;\nvar theta = 0;\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\n// how quickly the waves die down\nexport function sliderColor(v) {\n  color = v;\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n// early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // pick a blue/green gradient color based on \"height\", and draw the\n  // region that's inside our radius.\n  hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n}"
  },
  "preview": "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"
}