{
  "name": "ripple color slider 2D",
  "id": "7bAHFwbcGjzZW9ien",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nexport var color = 0;\nvar theta = 0;\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\n// how quickly the waves die down\nexport function sliderColor(v) {\n  color = v;\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\nvar fire = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nvar sunset = [0.0, 0.471, 0.0, 0.0,    0.086, 0.702, 0.086, 0.0,   0.2, 1.0, 0.408, 0.0,   0.333, 0.655, 0.086, 0.071,   0.529, 0.392, 0.0, 0.404,   0.776, 0.063, 0.0, 0.51,    1.0, 0.0, 0.0, 0.627,];\n\n// List of palettes\nvar palettes = [fire, sunset];\nvar currentPalette = 0; // Default palette\n\nsetPalette(palettes[currentPalette])\n\n// Rest of the code...\n\nexport function sliderPaletteMode(v) {\n  currentPalette = round(v*(palettes.length - 1));\n  setPalette(palettes[currentPalette]);\n}\n\nexport function showNumberPaletteMode() {\n  return currentPalette + 1;\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n  // early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // Compute a palette index based on brightness or some other suitable metric\n  var paletteIndex = smoothstep(0,1,pr/poolRadius)*s*s*s*s;\n  \n  // Use the computed palette index as the hue, which will be mapped to the current palette color\n  hsv(paletteIndex, 1.9-s, 1);\n  \n  // Use the current palette by setting the hue to a value between 0 and 1.\n  // Pixelblaze will map this hue value to the current palette color.\n  //hsv(color % 1, 1.9-s, smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n}"
  },
  "preview": "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"
}