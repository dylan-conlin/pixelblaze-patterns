{
  "name": "nebula",
  "id": "3tHNaPt4TmywLqRGY",
  "sources": {
    "main": "export var speed = 0.01;\nexport var hueShift = 0.5;\nexport var scale = 0.3;\nexport var zoom = 1.2;\nexport var autoZoom = 0;\nexport var zoomSpeed = 0.2;\n\nexport var sliderSpeed = function(v) { speed = 0.1 * (1-v); }\nexport var sliderHueShift = function(v) { hueShift = 1 * v; }\nexport var sliderScale = function(v) { scale = v; }\nexport var sliderZoom = function(v) { zoom = v * 1.5; }\nexport var toggleAutoZoom = function(v) { autoZoom = floor(v + 0.5); }\nexport var sliderZoomSpeed = function(v) { zoomSpeed = v; }\n\nvar t1;\n\nexport function beforeRender(delta) {\n  t1 = time(speed);\n  if(autoZoom) {\n    zoom = 0.2 + wave(time(zoomSpeed)) * 1.8; \n  }\n    // sets the wrapping intervals for perlin noise, creating a seamless loop\n  setPerlinWrap(50, 50, 50); \n}\n\nexport function render2D(index, x, y) {\n  x /= zoom; // apply the zoom factor to x\n  y /= zoom; // apply the zoom factor to y\n\n  // 3D perlin noise to create a complex, organic flow\n  var noise = perlinTurbulence(x * scale, y * scale, t1 * scale, 1.5, 0.5, 3); \n\n  var hue = t1 + hueShift * noise; // shift hue based on noise and time\n  var saturation = noise; // vary saturation based on noise\n  var value = 1;\n\n  hsv(hue, 1, value);\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}