{
  "name": "honeycomb spiral",
  "id": "wtqeXDHPNx4nYWKPu",
  "sources": {
    "main": "var timebase = 0;\n\nexport var speed = 0.04;\nexport var numArms = 2;\nexport var direction = 1;\nexport var zoom = 10;  // Added zoom variable\n\n// Slider for controlling the speed\nexport function sliderSpeed(v) {\n  speed = 0.01 + 8*v;\n}\n\n// Slider for controlling the number of arms\nexport function sliderArms(v) {\n  numArms = round(v * 30);  // up to 25 arms\n}\n\n// Slider for controlling the direction\nexport function sliderDirection(v) {\n  direction = v > 0.5 ? 1 : -1;\n}\n\n// Slider for controlling the zoom level\nexport function sliderZoom(v) {\n  zoom = 0.1 + v*10;  // Adjust range as needed, currently 0.1 to 10.1\n}\n\n// Pre-calculate some common numbers\nexport function beforeRender(delta) {\n  timebase += delta / 1000 * speed * direction;\n  while (timebase < 0) timebase += PI2;\n  while (timebase >= PI2) timebase -= PI2;\n  \n  tf = 5; // Overall animation duration constant. A smaller duration runs faster.\n  t1 = wave(time(tf * 9.8 / 65.536)); // Shift h: wavelength of tf * 9.8 s\n  t4 = time(tf * 0.66 / 65.536); // Shift v: 0 to 1 every 0.66 sec\n}\n\nexport function render2D(index, x, y) {\n  // Calculate the polar coordinates of the LED relative to the center\n  var dx = (x - 0.5) * zoom;  // Adjusted for zoom\n  var dy = (y - 0.5) * zoom;  // Adjusted for zoom\n  var radius = sqrt(dx * dx + dy * dy);\n  var angle = atan2(dy, dx);\n  \n  // Calculate the color based on the radius and angle\n  var color = ((angle + numArms * radius + timebase) % PI2) / PI2;\n  \n  // Use the color to set the LED\n  if (color >= 0.2 && color <= 0.99) {\n    hsv(0, 0, 0);  // make the honeycomb portion non-visible\n  } else {\n    // Set the visible part to use the honeycomb colors\n    var z = (1 + sin(x * 5 + t1) + cos(y * 5 + t1)) * .5;\n    var v = wave(z + t4);\n    v = v * v * v;  // brightness scaling\n    var h = triangle(z) / 2 + t1;\n    hsv(h, 1, v);  // Show colors with varying brightness\n  }\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n"
  },
  "preview": "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"
}