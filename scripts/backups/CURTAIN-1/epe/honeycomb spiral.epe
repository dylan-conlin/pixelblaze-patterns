{
  "name": "honeycomb spiral",
  "id": "wtqeXDHPNx4nYWKPu",
  "sources": {
    "main": "var timebase = 0;\n\nexport var speed = 0.04;\nexport var numArms = 2;\nexport var direction = 1;\nexport var zoom = 10;  // Added zoom variable\n\n// Slider for controlling the speed\nexport function sliderSpeed(v) {\n  speed = 0.01 + 8*v;\n}\n\n// Slider for controlling the number of arms\nexport function sliderArms(v) {\n  numArms = round(v * 30);  // up to 25 arms\n}\n\n// Slider for controlling the direction\nexport function sliderDirection(v) {\n  direction = v > 0.5 ? 1 : -1;\n}\n\n// Slider for controlling the zoom level\nexport function sliderZoom(v) {\n  zoom = 0.1 + v*10;  // Adjust range as needed, currently 0.1 to 10.1\n}\n\n// Pre-calculate some common numbers\nexport function beforeRender(delta) {\n  timebase += delta / 1000 * speed * direction;\n  while (timebase < 0) timebase += PI2;\n  while (timebase >= PI2) timebase -= PI2;\n  \n  tf = 5; // Overall animation duration constant. A smaller duration runs faster.\n  t1 = wave(time(tf * 9.8 / 65.536)); // Shift h: wavelength of tf * 9.8 s\n  t4 = time(tf * 0.66 / 65.536); // Shift v: 0 to 1 every 0.66 sec\n}\n\nexport function render2D(index, x, y) {\n  // Calculate the polar coordinates of the LED relative to the center\n  var dx = (x - 0.5) * zoom;  // Adjusted for zoom\n  var dy = (y - 0.5) * zoom;  // Adjusted for zoom\n  var radius = sqrt(dx * dx + dy * dy);\n  var angle = atan2(dy, dx);\n  \n  // Calculate the color based on the radius and angle\n  var color = ((angle + numArms * radius + timebase) % PI2) / PI2;\n  \n  // Use the color to set the LED\n  if (color >= 0.2 && color <= 0.99) {\n    hsv(0, 0, 0);  // make the honeycomb portion non-visible\n  } else {\n    // Set the visible part to use the honeycomb colors\n    var z = (1 + sin(x * 5 + t1) + cos(y * 5 + t1)) * .5;\n    var v = wave(z + t4);\n    v = v * v * v;  // brightness scaling\n    var h = triangle(z) / 2 + t1;\n    hsv(h, 1, v);  // Show colors with varying brightness\n  }\n}\n"
  },
  "preview": "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"
}