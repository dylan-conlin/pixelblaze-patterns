{
  "name": "pride 2015 2D",
  "id": "yQgChhjNZk74Lqybf",
  "sources": {
    "main": "// Pride pattern\n// based on Pride2015 by Mark Kriegsman: https://gist.github.com/kriegsman/964de772d64c502760e5\n// modified by Ben Hencke to run on Pixelblaze\n\nvar fibonacciToPhysical = [ 0, 39, 19, 58, 29, 9, 48, 20, 59, 38, 10, 49, 28, 1, 40, 18, 57, 30, 8, 47, 21, 60, 37, 11, 50, 27, 2, 41, 17, 56, 31, 7, 46, 22, 61, 36, 12, 51, 26, 3, 42, 16, 55, 32, 6, 45, 23, 62, 35, 13, 52, 25, 4, 43, 15, 54, 33, 5, 44, 24, 63, 34, 14, 53 ]\n\n// beatsin8( BPM, uint8_t low, uint8_t high) returns an 8-bit value that\n// rises and falls in a sine wave, 'BPM' times per minute,\n// between the values of 'low' and 'high'.\nfunction beatsin8(bpm, low, high) {\n  return wave(time(0.91552734375/bpm)) * (high - low) + low\n}\n\nfunction beatsin88(bpm, low, high) {\n  return beatsin8(bpm>>8, low, high);\n}\n\nvar sPseudotime = 0; //was uint16_t modified to be a value between 0 and 1\n// var sLastMillis = 0; //uint16_t\nexport var sHue16 = 0; //was uint16_t seems to work fine as-is\nexport var ledarray = array(pixelCount*3);\n\nfunction pride(deltams, useFibonacciOrder) {\n  // var sat8 = beatsin88( 87, 220, 250); //uint8_t\n  // var brightdepth = beatsin88( 341, 96, 224); //uint8_t\n  var brightdepth = beatsin88(171, 96, 224); //uint8_t\n  // var brightnessthetainc16 = beatsin88( 203, (25 * 256), (40 * 256)); //uint16_t\n  var brightnessthetainc16 = beatsin88( 102, (25 * 256), (40 * 256)); //uint16_t\n  // var msmultiplier = beatsin88(147, 23, 60); //uint8_t\n  var msmultiplier = beatsin88(74, 23, 60); //uint8_t\n\n  var hue16 = sHue16;//gHue * 256; //uint16_t\n  // var hueinc16 = beatsin88(113, 300, 1500); //uint16_t\n  // var hueinc16 = beatsin88(57, 1, 128); //uint16_t\n  var hueinc16 = beatsin88(57, 1, 128*3); //varies a bit more\n\n  // var ms = millis(); //uint16_t\n  // var deltams = ms - sLastMillis ; //uint16_t\n  // sLastMillis  = ms;\n  sPseudotime += (deltams * msmultiplier) >>16;\n  // sHue16 += deltams * beatsin88( 400, 5, 9);\n  sHue16 += deltams * beatsin88( 200, 5, 9);\n  var brightnesstheta16 = sPseudotime; //uint16_t\n\n  for ( var i = 0 ; i < pixelCount; i++) { //uint16_t\n    hue16 += hueinc16;\n    var hue8 = hue16 / 256; //uint8_t\n    //this is doing a triangle\n    var h16_128 = hue16 >> 7; //uint16_t\n    if ( h16_128 & 0x100) {\n      hue8 = 255 - (h16_128 >> 1);\n    } else {\n      hue8 = h16_128 >> 1;\n    }\n\n    brightnesstheta16  += brightnessthetainc16>>16;\n    brightnesstheta16 = mod(brightnesstheta16 + (brightnessthetainc16>>16), 1)\n    var b16 = wave( brightnesstheta16); //uint16_t\n\n    //var bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536; //uint16_t\n    var bri16 = b16 * b16\n    //var bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536; //uint8_t\n    var bri8 = bri16 * (brightdepth>>8)\n    bri8 += (1 - (brightdepth>>8));\n\n    var index = hue8; //uint8_t\n    //index = triwave8( index);\n    index = index/256 * 240;\n\n    // CRGB newcolor = ColorFromPalette( palette, index, bri8);\n\n    var pixelnumber = useFibonacciOrder ? fibonacciToPhysical[i] : i; //uint16_t\n\n    // nblend( ledarray[pixelnumber], newcolor, 8);\n    //TODO palletes, blending in RGB. For now use the 3 byte pixel for hue and value\n    ledarray[pixelnumber*3] = hue8 / 128;\n    ledarray[pixelnumber*3 + 2] = bri8;\n  }\n}\n\nexport function beforeRender(delta) {\n  pride(delta, 0)\n}\n\nexport function render(index) {\n  v = ledarray[index*3+2]\n  hsv(ledarray[index*3], 1, v*v)\n}\n"
  },
  "preview": "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"
}