{
  "name": "2D Spiral Twirls",
  "id": "tTBvpe6yG2kuCYdP9",
  "sources": {
    "main": "/**\r\n * A configurable 2D pattern that creates a variety of\r\n * rotating and swirling circular and spiral effects.\r\n * For best results a matrix of 16x16 or greater is recommended.\r\n * \r\n * I'd suggest starting with all the sliders at zero, then trying\r\n * each of them one at a time to see what impact it has on the\r\n * resultant pattern. That way it should be easier to understand\r\n * how to combine them all to get the effect you'd like.\r\n * \r\n * Pattern by @ChrisNZ\r\n */\r\nexport var twistSpeed = 0.015\r\nexport var rotateSpeed = 0.002\r\nexport var startingColor = 0.3\r\nexport var colorSpeed = 0.015\r\nexport var twist\r\nexport var rotation\r\nexport var colorShift\r\nexport var arms\r\n\r\n\r\n// How quickly the spiral should rotate back and forth\r\nexport function sliderTwistSpeed(v) { twistSpeed = v = 0 ? 0 : 0.015 / v }\r\n\r\n// How quickly the entire pattern should rotate\r\nexport function sliderRotationSpeed(v) { rotateSpeed = v = 0 ? 0 : 0.005 / v }\r\n\r\n// What initial colors to display. If colorSpeed is zero then the pattern will\r\n// stay this color\r\nexport function sliderInitialColor(v) { startingColor = v * 2 }\r\n\r\n// How quickly the colors of the pattern should change\r\nexport function sliderColorSpeed(v) { colorSpeed = v = 0 ? 0 : 0.015 / v }\r\n\r\n// How many arms of symmetry the pattern should have\r\nexport function sliderArms(v) { arms = v * 10 + 1; arms = arms - (arms - floor(arms)) }\r\n\r\nexport function beforeRender(delta) {\r\n  twist = wave(time(twistSpeed)) * 2 - 1\r\n  rotation = time(rotateSpeed)\r\n  colorShift = time(colorSpeed)\r\n}\r\n\r\nexport function render2D(index, x, y) {\r\n  xNorm = (x - 0.5) * 2\r\n  yNorm = (y - 0.5) * 2\r\n  dist = sqrt(xNorm * xNorm + yNorm * yNorm)\r\n  angle = (arctan2(yNorm, xNorm) + PI) / PI / 2\r\n  t = twist < 0 ? dist * twist : dist * twist\r\n  angle += t / 2\r\n  \r\n  setColor(angle, rotation, dist)\r\n}\r\n\r\nfunction setColor(angle, rotation, dist) {\r\n  h = angle * arms - rotation + 10\r\n  h = h - floor(h)\r\n  s = 1\r\n  v = (1.01 - dist) * (h < 0.5 ? h * h * h : h)\r\n  hsv((h + startingColor) / 2 + colorShift, s, v)\r\n}\r\n\r\n// Temporary fix/workaround until the built in atan2() is fixed\r\nfunction arctan2(y, x) {\r\n  if (x > 0) return atan(y/x)\r\n  if (y > 0) return PI / 2 - atan(x/y)\r\n  if (y < 0) return -PI / 2 - atan(x/y)\r\n  if (x < 0) return PI + atan(y/x)\r\n  return 1.0\r\n}\r\n\r\n// You can also project up a dimension. Think of this as mixing in the z value\r\n// to x and y in order to compose a stack of matrices.\r\nexport function render3D(index, x, y, z) {\r\n  x1 = (x - cos(z / 4 * PI2)) / 2\r\n  y1 = (y - sin(z / 4 * PI2)) / 2\r\n  render2D(index, x1, y1)\r\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAA0JCgsKCA0LCgsODg0PEyAVExISEyccHhcgLikxMC4pLSwzOko+MzZGNywtQFdBRkxOUlNSMj5aYVpQYEpRUk//2wBDAQ4ODhMREyYVFSZPNS01T09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0//wAARCACWAGQDASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAAAwQAAgUBBgf/xABGEAACAQMBAwgFCAYJBQAAAAABAgMABBEhBRIxEyJBUXGBkbEUMmGhwRUjJDNCcsLRUmKSsvDxJTQ1Q2NzgqLhU5Ojs8P/xAAaAQADAQEBAQAAAAAAAAAAAAACAwQBAAUG/8QAMhEAAQMBBQcCBQQDAAAAAAAAAQACEfADITFBsRJRYYGhwdEEcRMikbLhFDLC8TNCUv/aAAwDAQACEQMRAD8A+awxcpKiZ0bj2U1HCiwzyBRljuR+VJI5Q5HHGBTEZk5i4O7Bz28c0t4K25aaLDFMvApaRn9o/wAGupuNHb2x3c3DmaTXORne8gBSCRTyKqZ5122ewDP55ovJsBcXALEQDkIxnifV8j76nLONf2iBCalvR6Ld3SnnyuIl04Aa/HyojXCQ37rvErY2xCEni2AvxocOzgt3DbyANHCnLSnUgsej3DwqJbNJYxKcibaE4Z8DUJqf+e+lnYqtwW7arEOVj2ZaGPJlkM0obTeG9xOf1RViZprS8mVSzX1wsUOdCcE9fRwHd7Kbd0iO0rxSFWNBbw7ugGmox24osMccN3ZWrbgFjA00oPOG9jzyc0JtMwKx1gLto1W9USEQ3tzKGB+TbQRpgY3mKHXz8aNaWyRnY9uU3lRWuptMENuggnsJA7hSRkMuzI494B9p3ZOelVyFxnt86LdXhe42zdhzmJBboPvNqf8AbSyHG7l21JRXJphy2zrqJnUNtC9IRgdSu+q+YNNSX0fylPe72TEI4OP6UrZ/drIgaJdobIgZsxw2/pBxphsGTzxSYV32KRukTy3LSHeGMoke/nwYnvrPgg3GgT4C0OArmmL3aLWi2kFruoi20bMMfaZd4n35qUefYD7VvruS2mSKOCX0cKw15igdFSnNtfSgAPxWfqdm5ect2QTIz8FGTTUciciFxzriTX2DOKTijMkiqD61MpBhZZdcLlYwOurHgJEhOC8jEk8wxiFQkfaf5VeK4Tfs4GJKKvLSH24LedBSyXlIYCeaoMkuuhNW5AtbSyL9bdSbsenBc+WPdikEMr6eSu2hVblZrx3sZnVTyt1LuL7VHV44plrlUv55VQclZQbidSsdB8aiQRR3Zf8AubOLA04trnv/ADqkVsGtrO0ckvcyctKNfVxnB6ugUs7FVuHVdt8KqFyJGZNnWbKu9JIbiYMOIz09wxVnlle1v7pQS15KIYdNSMn+XdRJJVA2jfDUn6PDgnvx3+VGSKNL+ysyV3LKEzSe1uvxOaEnOKxPYLts1W8q0cSR7TBOsWy7YdWrYJzjx76pb2qmz2ZbOEL3c3pEhOoYAFsHPsIFLlzJs3eDBZdp3O7nHBQcY8fOm5brG0Nozr9XZwckmnqscDTvBoC11cLtSunKt3lFlZBbbaukXUt6OqgcN1Qun7Rp3k7VNqW9qYwYoLVgCetmWMa9eARWTA8zSbItdOUmY3Ehz6wL72vtwtDXaE/od7eKMh7mNU04YZ5DQGxccK/17FdcarILYs9rQWtnGZhuvO0k2g4hpGx7qlea20Ln0qGHk3PIW0UZ3VOh3QT51KY30DHjaOaYLRkXrKRmVgVzkjAo8TPzUxzITvNjpNCgcJIrNwUGmY5FMKpjnTPzh7M16LvZKJKsHnKNje5S6OB7FH8/CjJMUm5TXkrNN0e1sYqyzx8tLKQN2Bd1e3pxV0CNHbWzDnTNykg6+nXvpJIzFf0hJdnVYIQErQxWZYiS6flZCT0fwKYN3zru/DEBRyMOvj2dfjXfSEHpd8DkqOSj/jt8qMsSCezskbmwDlWOcZI4HxOcUBg4isT0gIS8jGqMKsSbs9nZM3NtwZ5ud08e/U1zlXexuZwcS38ojj5/2c4/MVwszWd1dICZbuQRRcOGcDs6fdTAiQbRhizmCxh3myg1bGnfjXuoSMzWZ6wEJdFbvyUWNY12iAFzDs6DIG9wY658AaFHDv2FnEyqZb2cSSnProCW1PTpjSlMyfJYZT8/tCfAPDThg9+vfTjTAX15IgAhsICsYz6jEADA7iKEscK3fkrjGVZDumfm45L+7G6FtIxDCSNUKoeHe1d+TwFtrIOUzE7y4+0eTWPI8fOs8OTbWttIHztCQvMOllLrgjq5oo638ZuLm6J+odY1weIMpJ9woCx4wqLtZWFs4Gjd2WzY7n0mV5FJluHIy3QDuD92pXl7+8a1W1jilc70AkY5+0xLHzqUs+ie4yCjHp7Jw2iMVjxIHkRTwPGmY4huSyjGWO6gGOvFKLvAjdzk8MUxGxDLEfViJZiDxxXqmUbhxTQtMvFBnKqN+Q9B/jhXcSCKe6BLNIeTjA1yM4/jsoa3DLHLN9qXmoMdA0plJMXEEO8CsC5c9gxSyTnVYJR2hVZrqwfSIbXPMhXlJCOBb+furgmlFpNdYJkum5OMDU44adPWMdlWE7ehTSKo37hysYGpI9UDz8aZ3ImvY03cRWqbwHQrdGe7J7qG441mewQF7m41HklcUAXkNucGOzj32O76xxjPb091V5RmsJZEI5a/l3F1xgZ3cfx11Xd3tnyOhAlvZgoJJAAzgd3E99GMKfKcaAH0eyiBOddejv6e6s2RnWZQ7ccu12pTSFflHRQIbOHGP0Ser/SCKDGC9hEGhUy3k4aQY1kTeLZ7N2kVeT5LMq5M97NuqAdWHADxz4040ix7SkjjkISwgZowTn7IGD3H3UOw4VzPWFhaMBUXDqSm0SNb9pVQKtjGojwc6brZXwYeFLei/wBGwwJCGkuiZAuMEMIcan7+vfQ/SJjYMFPOvpH3MdByq/n4076a0m0uAO4GUnHqsZFXyHnQy5uNRfqgLHC9p4fS4db0WKzsZpp+UtFkEbiNC36IRRjxzUpT5X5GNeTQAOXbo/6jfACpQG1t23NAhYfRPeZ2yOa8vAwEqk9ANMoVNtgaNM+D40mqFmVV1LUeNSJHPFIckZ91XwVa8BPpHGbkcAluoIHtP8s1QQv6Gd0HlbpwQM8B0e7NLK7rCWAzJcHAx4fnTkcgF3EgcbtuhyT0/Z+NZfmkkEYVH5RBEovVQD5m1j3icaZ6O/poSyOtg0wBMt0+FA1JA0GB258auJX+T5sZ3p5DuAeHwpzdik2jDHjmW0e8o6iMAZroBxrMpZeW45dvyVQMBfRwhgUs4ySTqTgBfiPCuCaQ7OmZR85cyERgHJPBceIPjQiu7s65uVyZLqTdQDU4Bxjxz7qLyDLtGysxoLeMSOV4AjUnvbzodia33lZLRjl2/JTwMT7Shi5NSlvEWQYzunIA93CgLHbSWMko3ke9m5Nm44G+R5UpDdOtlc3RYHlJBH2YBP4qYEoSS1tZVK8modx1MI97zrPmzqbylmzLbgcOwnUpg7O+nWkUTcyyVGYrpnic49rKPGlBHMLS8feBWV0kznPBTKf3hTaXEYW9uVbDPlP2VHxajPEHSxsnJ5NFZJOvhucf9VECHVvPhLFq9mNQJPVIS7IudpJBJDlBHCiMMD1t0MeJ/WqVrw3GJ7tiwAaYkZPUAPMGpRi0sRcUl3q/UtMNw9l4m3YLKpPQDTCFWtFXgZZMHHbSNMRkiVUPCMk6Vy9l7ZvWiI1e8XhuW6Age3o8qX3WSxlnIO/O43eyuRzYiuJc6ud0D+O2m1Pz1lAwzujJHYKIX1vUxltbr9VQR7t7b2w4QoHfHAEa+dSK4Zba5uSfXYIPZgZ+NFBXdv7o+trGD1aChT2zLb2NlnV2JfHt/KuLJwqVgcDAdw8lNo3zthbsMGMBnGOBC586IsicntC7ON/JiBHEAAfnSfKE3t/P0RIVB6QSQB5VwHe2fBANDcuc97YHw8Ky+uNyWWTHLyU5Ps7MVhs9SCAxeU9Yzr56UOQyNe7UuSmUWIovaSBp4Gm4ZuU2u7g82OHdJzpkkH4GuRShtkw8qMma4Cno4yGj+V3XwEkPeInh1MnRZpBaxs4k3le7L5z1lgo8hTi3R9NnkzzIyQSD1zL/AM009lG+0LdI8Ktrybbvs558cgVmrE62t5od12ifI01CNIaF1jF44+E0WjbQdfqfC7d37BYTkDeVjjGf7x6lVmsPSkgZFlIWFPVHAkbx6P1qlD+kLr4VDLWxaIKx4l3pYwaMq824kPtUUK2Pzy+wUdedZHPF2x76Nqc83qhT5m3j4coTk9pFMxylbyaQ6iNSPfpUKZvoFA0Rc0FW+j3cn6TADxoi2OqWfmFZlMK2dmKgOs8uvjj8q0UO/tfThHDg9pNZYB5SyjHDCt780zbT70l5MdOYAPfXNOyayCRaMkEjj1MKrADY88oBMlzLg46ecaIYgNq7PtzqI41Jx1jJ86sADZWEeNXcN8aNjG1bqbpiiAH7OaYGCuAlAXY8/ASFvM62t1KD67qme5ifOnY5lIsbfoULIdOnc3vzrNbMewlzxkn3u7GKamGNqyKOEcJP/ix8aXsERy7lMe0Enn0AC1opsXe0Zgc4QY7VU586E8edm2kAAWSdCD28iRr7qz4rkpZXDFtZDINenRP+a0iw5a0UabjSDH+oLR2Znp5UjmFhrIJ6xVUM8ajSN1Ud0aVKUiuWimusAc6Zjr7MD4VKb8bZuUj7JxMryMZ3WJ9hphD9GhHXJ8aUplfqrf7/AMajC+ieE6mPTmJ+ygpYrjZpx9qQd+lHVvpM5HQg8qoo3rKIZ15QHwBqkDaEViksF45K667Sg6kjGfZpQomxZTsOlwD7dDRM42ix6BF8KAObsw5+1Jn3YoX5n31WxIHLVaKN9I2fF+iv4aKr4XaTseBZfdS8J/pOLJACxgnP3RUQn5LvmPS2fKiN0j3U72Xjl1KtdQg21lH+sTw7Ko+flHaMmNBC6+7HwpibWa0i10XPvH5UKVQHvW6WLA/tiqXsD5I4noAjs/mEHj1clSc7OtwOMjSfhFaCSFtqMDwRyB/3l/Os+RdyCwXv8Tn4UZXBkvnY87eA4dcoPwqUtitwRWlnN3vqpeS70iyDTf3m/wB7VKVvSQlvnpjJ/wB7VKmfMo2WdyRpkH5qD7/xpdRnI9lGz8xEepqJoTnJpTi5nHWnwrkWsEQ6m/DXM5uXI6VA91WjIEUWese8GqmCK4rLJt4PsrcbmVujkx+6aA/9mJ974mirpNJr/djyoL/2enb8TWPFx9j9y0Nho9hqm1P04/5P4RUyfkqUAetIRXBpeN/k/AVYH+jlH+J+I1xEzz1Sy2YHtqmZP7Qtv8r40OFsx3Ddb/8A0FQvm/tz/h499Bh/q8ntkH79VMMTz1CVYt7fcjSRAz2qrgBSAAernflSqMC91vZOQvjnNPYzcwn9E5Pi9JmPmysoAyBr2ID8ay1ZfI3lWuZMkb/5FDu4WlW3ZCAORHE+0n41KNGskkMZVGYBANBnoqUs+na4zCps7AETCy49XA69KLH9UB+sDUqVIzCuCkzR4/rCfYo8xUDDkYmxpvL7jUqVRl9dUbcPpqurrdv9z4ihtrs5fYce81KlC/A89QsdcDWaZJxduf8ADx5Cuj+pqP1vxNUqUf8A1z1CCO33KxObuA9SDzFUT6lB1yfiqVKfmeeoWWQGn3J6An0lx1Kv7xpQ/wBWfsP/AKhUqUx+HM6q12HP+ZTuz1CQFRwDY9wqVKlW2X7V63pv8QX/2Q=="
}