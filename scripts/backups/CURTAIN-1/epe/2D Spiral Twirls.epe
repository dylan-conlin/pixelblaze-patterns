{
  "name": "2D Spiral Twirls",
  "id": "tTBvpe6yG2kuCYdP9",
  "sources": {
    "main": "/**\r\n * A configurable 2D pattern that creates a variety of\r\n * rotating and swirling circular and spiral effects.\r\n * For best results a matrix of 16x16 or greater is recommended.\r\n * \r\n * I'd suggest starting with all the sliders at zero, then trying\r\n * each of them one at a time to see what impact it has on the\r\n * resultant pattern. That way it should be easier to understand\r\n * how to combine them all to get the effect you'd like.\r\n * \r\n * Pattern by @ChrisNZ\r\n */\r\nexport var twistSpeed = 0.015\r\nexport var rotateSpeed = 0.002\r\nexport var startingColor = 0.3\r\nexport var colorSpeed = 0.015\r\nexport var twist\r\nexport var rotation\r\nexport var colorShift\r\nexport var arms\r\n\r\n\r\n// How quickly the spiral should rotate back and forth\r\nexport function sliderTwistSpeed(v) { twistSpeed = v = 0 ? 0 : 0.015 / v }\r\n\r\n// How quickly the entire pattern should rotate\r\nexport function sliderRotationSpeed(v) { rotateSpeed = v = 0 ? 0 : 0.005 / v }\r\n\r\n// What initial colors to display. If colorSpeed is zero then the pattern will\r\n// stay this color\r\nexport function sliderInitialColor(v) { startingColor = v * 2 }\r\n\r\n// How quickly the colors of the pattern should change\r\nexport function sliderColorSpeed(v) { colorSpeed = v = 0 ? 0 : 0.015 / v }\r\n\r\n// How many arms of symmetry the pattern should have\r\nexport function sliderArms(v) { arms = v * 10 + 1; arms = arms - (arms - floor(arms)) }\r\n\r\nexport function beforeRender(delta) {\r\n  twist = wave(time(twistSpeed)) * 2 - 1\r\n  rotation = time(rotateSpeed)\r\n  colorShift = time(colorSpeed)\r\n}\r\n\r\nexport function render2D(index, x, y) {\r\n  xNorm = (x - 0.5) * 2\r\n  yNorm = (y - 0.5) * 2\r\n  dist = sqrt(xNorm * xNorm + yNorm * yNorm)\r\n  angle = (arctan2(yNorm, xNorm) + PI) / PI / 2\r\n  t = twist < 0 ? dist * twist : dist * twist\r\n  angle += t / 2\r\n  \r\n  setColor(angle, rotation, dist)\r\n}\r\n\r\nfunction setColor(angle, rotation, dist) {\r\n  h = angle * arms - rotation + 10\r\n  h = h - floor(h)\r\n  s = 1\r\n  v = (1.01 - dist) * (h < 0.5 ? h * h * h : h)\r\n  hsv((h + startingColor) / 2 + colorShift, s, v)\r\n}\r\n\r\n// Temporary fix/workaround until the built in atan2() is fixed\r\nfunction arctan2(y, x) {\r\n  if (x > 0) return atan(y/x)\r\n  if (y > 0) return PI / 2 - atan(x/y)\r\n  if (y < 0) return -PI / 2 - atan(x/y)\r\n  if (x < 0) return PI + atan(y/x)\r\n  return 1.0\r\n}"
  },
  "preview": "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"
}