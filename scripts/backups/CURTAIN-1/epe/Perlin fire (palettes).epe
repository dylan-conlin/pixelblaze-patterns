{
  "name": "Perlin fire (palettes)",
  "id": "Zctt6BgiHNb25xhwT",
  "sources": {
    "main": "/* \n   Demonstration of Perlin noise functions to generate fire \n   The first mode shows Perlin noise scaled to 0-1.\n   The second shows a fractal ridge function, creating fire tendrils.\n   The third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\n   The fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n   2022 Ben Hencke (wizard)\n*/\n\nvar fire = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0,    0.247, 0.09, 0.0, 1.0,    0.498, 0.263, 0.0, 1.0,   0.749, 0.557, 0.0, 0.176,   1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0,   0.165, 0.0, 0.0, 0.176,   0.329, 0.0, 0.0, 1.0,   0.498, 0.165, 0.0, 1.0,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 1.0,   1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0,   0.165, 0.165, 0.0, 0.0,   0.329, 1.0, 0.0, 0.0,   0.498, 1.0, 0.0, 0.176,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0,   0.247, 0.0, 0.216, 1.0,   0.498, 0.0, 1.0, 1.0,   0.749, 0.165, 1.0, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008,   0.165, 0.835, 0.576, 0.094,   0.329, 0.404, 0.859, 0.204,   0.498, 0.012, 0.859, 0.812,   0.667, 0.004, 0.188, 0.839,   0.831, 0.004, 0.004, 0.435,   1.0, 0.004, 0.027, 0.129,];\nvar bhw1_04_gp = [0, 229,227,  1,   15, 227,101,  3,    142,  40,  1, 80,   198,  17,  1, 79,   255,   0,  0, 45]\nvar black_Blue_Magenta_White_gp = [0,   0,  0,  0, 42,   0,  0, 45, 84,   0,  0,255, 127,  42,  0,255, 170, 255,  0,255, 212, 255, 55,255, 255, 255,255,255]\nvar es_landscape_33_gp = [0,   1,  5,  0, 19,  32, 23,  1, 38, 161, 55,  1, 63, 229,144,  1, 66,  39,142, 74, 255,   1,  4,  1]\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969,   0.188, 1.0, 0.533, 1.0,   0.349, 0.863, 0.114, 0.886,   0.627, 0.027, 0.322, 0.698,   0.847, 0.004, 0.486, 0.427,   1.0, 0.004, 0.486, 0.427,];\nvar heatmap_gp = [0,     0,  0,  0, 128,   255,  0,  0, 224,   255,255,  0, 255,   255,255,255 ];\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\nvar lava = [0.0, 0.0, 0.0, 0.0,   0.18, 0.071, 0.0, 0.0,    0.376, 0.443, 0.0, 0.0,   0.424, 0.557, 0.012, 0.004,   0.467, 0.686, 0.067, 0.004,   0.573, 0.835, 0.173, 0.008,   0.682, 1.0, 0.322, 0.016,   0.737, 1.0, 0.451, 0.016,   0.792, 1.0, 0.612, 0.016,   0.855, 1.0, 0.796, 0.016,   0.918, 1.0, 1.0, 0.016,   0.957, 1.0, 1.0, 0.278,   1.0, 1.0, 1.0, 1.0,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016,   0.169, 1.0, 0.267, 0.098,   0.337, 1.0, 0.027, 0.098,   0.498, 1.0, 0.322, 0.404,   0.667, 1.0, 1.0, 0.949,   0.82, 0.165, 1.0, 0.086,    1.0, 0.341, 1.0, 0.255,];\n\narrayMutate(bhw1_04_gp,(v, i ,a) => v / 255);\narrayMutate(black_Blue_Magenta_White_gp,(v, i ,a) => v / 255);\narrayMutate(es_landscape_33_gp,(v, i ,a) => v / 255);\narrayMutate(heatmap_gp,(v, i ,a) => v / 255);\n\n\n\nvar sunset = [0.0, 0.471, 0.0, 0.0,    0.086, 0.702, 0.086, 0.0,   0.2, 1.0, 0.408, 0.0,   0.333, 0.655, 0.086, 0.071,   0.529, 0.392, 0.0, 0.404,   0.776, 0.063, 0.0, 0.51,    1.0, 0.0, 0.0, 0.627,];\n// List of palettes\n// good fire palettes:\nvar palettes = [\n  fire,\n  inferno,\n  lava,\n  BlacK_Blue_Magenta_White,\n  Blue_Cyan_Yellow,\n  black_Blue_Magenta_White_gp,\n  gr65_hult,\n]\n\n// These don't look that great as fire palettes:\n// Analogous_1,\n// BlacK_Red_Magenta_Yellow,\n// GMT_drywet,\n// bhw1_04_gp,\n// es_landscape_33_gp,\n// rainbowsherbet,\n// heatmap_gp,\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\n\nexport var mode = 1\nexport var fireScale = 3\nexport var risingSpeed = 1\nexport var morphSpeed = 1\nexport var currentPalette = 0\n\nsetPalette(palettes[currentPalette]);\n\nexport function sliderPalette(v) {\n  currentPalette = round(v*(palettes.length - 1))\n  setPalette(palettes[currentPalette]);\n}\n\nexport function showNumberPaletteMode() {\n  return currentPalette + 1;\n}\n\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function toggleDisableSliders(v) {\n  if (v) {\n    fireScale =\t11.000000\n    mode = 0.000000\n    morphSpeed = 1.235062\n    risingSpeed = 5.199982\n  }\n}\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\nexport function beforeRender(delta) {\n  timeCounter += delta; // Increment the time counter by the time since the last frame\n\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}