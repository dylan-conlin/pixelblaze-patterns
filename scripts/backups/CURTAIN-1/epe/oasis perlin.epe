{
  "name": "oasis perlin",
  "id": "dkvCYi3LgvmG6T3T5",
  "sources": {
    "main": "/*\n Oasis -- peaceful light dances on waves.\n \n A quiet space to rest and reflect on what we've \n lost in this strangest of years, and to remember\n the beauty that remains, and the tasks that \n must still be begun and finished...\n \n Inspired by FASTLEd's Pacifica effect\n\n Version  Author        Date        Comment\n 1.0.0    JEM(ZRanger1) 10/20/2020 \n 1.0.1    JEM(ZRanger1) 11/27/2020  Updated wavelength scaling method\n 1.0.2    JEM(ZRanger1) 11/30/2020  Fixed phase offset bug\n*/ \n\n// constant wave descriptor array indices.\n// !!!Be extremely careful when changing or adding indices to this list!!!\n// Not used in beforeRender() or render() -- it makes enough of a performance\n// difference here to matter.  Static numbers are a hair faster.\nvar _speed = 0;        // base wave movement speed \nvar _direction = 1;    // direction - 0 = down, 1 = up\nvar _divisor = 2;      // wavelength divisor \nvar _tSpeed = 3;       // speed timer;\nvar _cSpeed = 4;       // current speed, based on UI slider\nvar _cWlen = 5;        // current wavelength divisor\n\nvar descriptorSize = 6;\n\n// wave descriptors\nvar layer1 = array(descriptorSize);\nvar layer2 = array(descriptorSize);\nvar layer3 = array(descriptorSize);\nvar layer4 = array(descriptorSize);\n\n// brightness adjustment lookup table\nvar gamma = array(512);\n\n// UI control variables\nexport var speed = 1;\nexport var whiteCaps = 1.46; \nexport var depth = 0.65;\nexport var aura = 0.66667\nexport var wavelenScale = 1\n\nvar baseHue;  \n\n// UI functions\nexport function sliderHue(v) {\n  aura = v\n}\n\nexport function sliderSpeed(v) {\n  speed = 1.5+(4.5 * (1-v))\n}\n\nexport function sliderWhitecaps(v) {\n  whiteCaps = 1+(1-v);\n}\n\nexport function sliderDepth(v) {\n  depth = (1-v);\n}\n\nexport function sliderWavelength(v) {\n  wavelenScale = 0.15+(2 * (1-v));\n  setup();\n}\n\n// short functions that calculate brightness for a waveform moving\n// in either direction\nfunction waveReverse(n) {\n  return 1-time(n);\n}  \nfunction waveForward(n) {\n  return time(n);\n}\n\nfunction gammatron(index) {\n  var v, n, idx;\n\n  n = ((index + layer1[3]) * layer1[5]) / pixelCount;\n  idx = floor(abs(511 * (n % 1)));\n  v = gamma[idx];\n\n  n = ((index + layer2[3]) * layer2[5]) / pixelCount;\n  idx = floor(abs(511 * (n % 1)));\n  v += gamma[idx];\n\n  n = ((index + layer3[3]) * layer3[5]) / pixelCount;\n  idx = floor(abs(511 * (n % 1)));\n  v += gamma[idx];\n\n  n = ((index + layer4[3]) * layer4[5]) / pixelCount;\n  idx = floor(abs(511 * (n % 1)));\n  v += gamma[idx];\n  \n  return v / 4;\n}\n\n// make sure that the overall wave density stays about\n// the same regardless of strip size\nfunction scaleWaveToStrip(divisor) {\n  return  divisor * (pixelCount / 150);\n}\n\n// makes sure movment speed stays about the same no matter\n// how many LEDs we're displaying\n// Param <seconds> - number of seconds to traverse the strip.\nfunction scaleSpeedToStrip(seconds) {\n  return (seconds / 65.356) * (pixelCount / 150);\n}\n\nfunction initWave(w,spd,dir,divisor) {\n  w[_speed] = scaleSpeedToStrip(spd * speed);\n  w[_direction] = (dir) ? waveForward : waveReverse;\n  w[_divisor] = divisor * wavelenScale;\n  w[_cSpeed] = w[_speed];\n  w[_cWlen] = w[_divisor];\n}\n\n// configure wavelengths and speeds  \nfunction setup() {\n  initWave(layer1,10, 1, 21);\n  initWave(layer2,6,  1, 9);\n  initWave(layer3,15, 0, 11);\n  initWave(layer4,22, 0, 5);  \n}\n\n// initialize gamma lookup table\nvar offs = -PI / 2\nfor (var i = 0; i < 512; i++) {\n  gamma[i] = pow(wave(offs+(i / 512)),4);\n}\n\n// initialize all waves\nsetup();\nvar perlinSeed = random(256); // New Perlin seed for randomness\n\n// Added function to use Perlin noise\nfunction perlinWave(index, w) {\n  return perlin(index / pixelCount, w[_tSpeed], 0, perlinSeed);\n}\n\n// Update the waveReverse and waveForward functions to use Perlin noise\nfunction waveReverse(n) {\n  return perlinWave(n, layer1) - perlinWave(n, layer3);\n}  \nfunction waveForward(n) {\n  return perlinWave(n, layer2) - perlinWave(n, layer4);\n}\n\nexport function beforeRender(delta) {\n    var t = triangle(time(0.3))\n\n    layer1[3] = pixelCount * layer1[1](layer1[4]); \n    layer2[3] = pixelCount * layer2[1](layer2[4]);\n    layer3[3] = pixelCount * layer3[1](layer3[4]);\n    layer4[3] = pixelCount * layer4[1](layer4[4]); \n    layer4[5] = layer4[2] * (0.9 + ( t * 0.2))    \n\n    // Increase the speed of hue rotation, add some randomness and use Perlin noise\n    baseHue = aura + (0.1 * t) + perlin(time(0.3), 0, 0, perlinSeed);\n}\n\nexport function render(index) {\n  var h,s,v;\n\n  v = gammatron(index);\n\n  // Add some randomness and Perlin noise to the hue based on the current brightness\n  h = baseHue - (depth * v * 0.3) + perlin(index / pixelCount, v, 0, perlinSeed);  \n\n  s = whiteCaps - v;\n  \n  hsv(h, s, v)\n}"
  },
  "preview": "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"
}