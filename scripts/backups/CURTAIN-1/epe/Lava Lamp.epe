{
  "name": "Lava Lamp",
  "id": "3MNrTrqgij6ih5oRD",
  "sources": {
    "main": "// We're using the Perlin FBM function to generate a star field that we can fly through.\n// Lacunarity, gain, and octaves control the character of the Perlin FBM function.\n\nexport var lacunarity = 2 // The lacunarity controls the frequency of the octaves.\nexport var gain = 0.5 // The gain controls the amplitude of the octaves.\nexport var octaves = 4 // The number of noise functions summed together.\n\n// Zoom value, allows to control the density of the star field.\nexport var zoom = 1.0 \n\n// Slider for zoom value, range from 1 to 20.\n// The slider is reversed, i.e., moving the slider to the right (towards 1), decreases zoom,\n// creating an effect of being further from the stars.\nexport function sliderZoom(v) {\n  zoom = 1 + (1 - v) * 19 // Subtract v from 1 to reverse the slider.\n}\n\n// Slider to control lacunarity, between 1.0 and 3.0\nexport function sliderLacunarity(v) {\n  lacunarity = 1 + v * 2\n}\n\n// Slider to control gain, between 0.0 and 1.0\nexport function sliderGain(v) {\n  gain = v\n}\n\n// Slider to control octaves, between 1 and 8\nexport function sliderOctaves(v) {\n  octaves = 1 + floor(v * 7)\n}\n\n// Time variable to create animation.\nvar t = 0 \n\n// Before rendering, we update our time variable.\nexport function beforeRender(delta) {\n  t += delta / 2000 // Adjust speed of travel.\n}\n\n// For each pixel, we calculate its brightness and color based on Perlin noise.\nexport function render3D(index, x, y, z) {\n  // Generate Fractal Brownian Motion with coordinates scaled by zoom factor.\n  var n = perlinFbm(x*zoom, y*zoom, t, lacunarity, gain, octaves) \n\n  // The output of the Perlin function is between -1 and 1, so we shift and\n  // scale it to be a brightness value between 0 and 1.\n  n = (n + 1) / 2 \n\n  // Determine hue based on brightness (Perlin noise value).\n  var hue = n \n\n  // Set the current pixel to the calculated hue, saturation, and brightness.\n  hsv(hue, 1, n)\n}\n"
  },
  "preview": "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"
}