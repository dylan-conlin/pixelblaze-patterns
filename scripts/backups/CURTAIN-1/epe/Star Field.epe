{
  "name": "Star Field",
  "id": "3MNrTrqgij6ih5oRD",
  "sources": {
    "main": "// We're using the Perlin FBM function to generate a star field that we can fly through.\n// Lacunarity, gain, and octaves control the character of the Perlin FBM function.\n\nexport var lacunarity = 2 // The lacunarity controls the frequency of the octaves.\nexport var gain = 0.5 // The gain controls the amplitude of the octaves.\nexport var octaves = 4 // The number of noise functions summed together.\n\n// Zoom value, allows to control the density of the star field.\nexport var zoom = 1.0 \n\n// Slider for zoom value, range from 1 to 20.\n// The slider is reversed, i.e., moving the slider to the right (towards 1), decreases zoom,\n// creating an effect of being further from the stars.\nexport function sliderZoom(v) {\n  zoom = 1 + (1 - v) * 19 // Subtract v from 1 to reverse the slider.\n}\n\n// Slider to control lacunarity, between 1.0 and 3.0\nexport function sliderLacunarity(v) {\n  lacunarity = 1 + v * 2\n}\n\n// Slider to control gain, between 0.0 and 1.0\nexport function sliderGain(v) {\n  gain = v\n}\n\n// Slider to control octaves, between 1 and 8\nexport function sliderOctaves(v) {\n  octaves = 1 + floor(v * 7)\n}\n\n// Time variable to create animation.\nvar t = 0 \n\n// Before rendering, we update our time variable.\nexport function beforeRender(delta) {\n  t += delta / 2000 // Adjust speed of travel.\n}\n\n// For each pixel, we calculate its brightness and color based on Perlin noise.\nexport function render3D(index, x, y, z) {\n  // Generate Fractal Brownian Motion with coordinates scaled by zoom factor.\n  var n = perlinFbm(x*zoom, y*zoom, t, lacunarity, gain, octaves) \n\n  // The output of the Perlin function is between -1 and 1, so we shift and\n  // scale it to be a brightness value between 0 and 1.\n  n = (n + 1) / 2 \n\n  // Determine hue based on brightness (Perlin noise value).\n  var hue = n \n\n  // Set the current pixel to the calculated hue, saturation, and brightness.\n  hsv(hue, 1, n)\n}\n"
  },
  "preview": "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"
}