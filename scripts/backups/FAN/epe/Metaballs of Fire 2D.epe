{
  "name": "Metaballs of Fire 2D",
  "id": "8CPXmyxmS5S9KTew6",
  "sources": {
    "main": "/*\n Metaballs - blobs of fire that combine and split as\n they move around the display.  \n \n Requires 2D display and appropriate mapping function.\n\n Version  Author        Date        Comment\n 1.0.0    JEM(ZRanger1) 07/30/2021  MIT License\n\n*/ \n\n// array of vectors for each point\nvar maxPoints = 8;\nvar Points = array(maxPoints);\n\n// current settings\nexport var numPoints = 5;\nexport var speed = 0.05;\nexport var splatter = 1.75; \n\n// UI\nexport function sliderNumberOfPoints(v) {\n  var n;\n  n = floor(4 + (v * (maxPoints - 4)));\n  if (n != numPoints) {\n    numPoints = n;\n    splatter = 1.5+(numPoints - 4)/7.8;\n    initPoints();\n  }\n}\n\nexport function sliderSpeed(v) {\n  speed = 0.15 * v;\n}\n\n// create control point vectors with random position,\n// direction and speed\nfunction initPoints() {\n  for (var i = 0; i < numPoints; i++) {\n    var b = Points[i];  \n    \n    b[0] = random(1);   // x position \n    b[1] = random(1);   // y position\n\n    b[2] = -0.5+random(1);   // x velocity\n    b[3] = -0.5+random(1);   // y velocity\n  }\n}\n\n// allocate and initialize control point descriptors\nfunction createPoints() {\n  for (var i = 0; i < maxPoints; i++) {  \n    Points[i] = array(4);\n  }\n  \n  initPoints();\n}\n\n// move points, bouncing them off the \"walls\" of the display.\nfunction bounce() {\n  for (var i = 0; i < numPoints; i++) {\n    var b = Points[i];\n    \n// move point according to velocity component of its vector \n    b[0] += b[2] * speed;\n    b[1] += b[3] * speed;\n\n// bounce off walls by flipping vector element sign when we hit.\n// If we hit a wall, we exit early, trading precision in\n// corners for speed.  We'll catch it in a frame or two anyway\n    if (b[0] < 0) { b[0] = 0; b[2] = -b[2]; continue; } \n    if (b[1] < 0) { b[1] = 0; b[3] = -b[3]; continue; }\n\n    if (b[0] > 1) { b[0] = 1; b[2] = -b[2]; continue; }\n    if (b[1] > 1) { b[1] = 1; b[3] = -b[3]; continue; }\n  }\n}\n\n// initialize animated points\ncreatePoints();\n\n// move the control points around the display.\nexport function beforeRender(delta) {\n  bounce();\n}\n\n// calculate voronoi distance field -- for every pixel, find the distance\n// to the nearest control point, and choose to color (or not) based on the\n// minimum distances. \nexport function render2D(index,x,y) {\n  var minDistance,i,r,h,v;\n  \n  \n  // this is just like normal voronoi distance, except instead of comparing pairs\n  // of control points, we compare their product to build the metaball distance field.\n  minDistance = 1;   \n  for (i = 0; i < numPoints; i++) {\n    r = minDistance * hypot(Points[i][0] - x,Points[i][1] - y) * splatter;\n    minDistance = min(r,minDistance);\n  }\n  \n  if (minDistance >= 0.082) {\n    rgb(0,0,0);\n  } else {\n    hsv(0.082-minDistance,1,1.2-(wave(5*minDistance)));\n  }\n}\n"
  },
  "preview": "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"
}