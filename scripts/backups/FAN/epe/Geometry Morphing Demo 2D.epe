{
  "name": "Geometry Morphing Demo 2D",
  "id": "hp7RgYQDwpfQFu9Yk",
  "sources": {
    "main": "/* Geometry Morphing Demo 2D\n\n Smooth transitions between animated geometric shapes.  \n \n This pattern shows how to draw and dynamically modify geometric\n objects using a pixel shader and signed distance functions.  Since this \n method scales automatically with the number of available processors, it \n is most often used on GPU-based systems.  It's also very well suited to\n the Pixelblaze's architecture.\n \n For more information, see:\n   Basic tutorial on this style of rendering:\n     https://www.shadertoy.com/view/Xl2XWt\n   Distance functions for many 2D shapes:\n     https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\n\n MIT License\n Take this code and use it to make cool things!\n \n Version  Author        Date      \n 1.0.0    ZRanger1 08/09/2021\n*/ \n\n// UI control variables\nexport var objectSize = 0.45;\nexport var lineWidth = 0.05;\nvar filled = 1;\n\n// shape function selection \nvar numShapes = 6;\nvar shapeSdf = array(numShapes)\nvar shapeCompare = array(2);\n\n// animation control\nvar shape = 0;\nvar nextShape = 1;\nvar hue = 0;\nvar morphClock = 0;\nvar wait = 0; \nvar lerpPct = 0;\n\nshapeCompare[0] = (f) => (abs(f) > lineWidth); // unfilled shapes\nshapeCompare[1] = (f) => (f > lineWidth);      // filled shapes\n\nshapeSdf[0] = circle;\nshapeSdf[1] = cross;\nshapeSdf[2] = hexStar;\nshapeSdf[3] = square;\nshapeSdf[4] = triangle;\nshapeSdf[5] = hexagon;\n\nfunction signum(a) {\n  return (a > 0) - (a < 0)\n}\n\n// signed distance functions for various shapes, adapted for 2D. \n// Math from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm\nfunction circle(x,y,r) {\n  return hypot(x,y) - r;\n}\n\nfunction square(x,y,size) {\n  dx = abs(x) - size;  d1 = max(dx,0);\n  dy = abs(y) - size;  d2 = max(dy,0);\n\treturn min(max(dx, dy), 0.0) + hypot(d1,d2);\n}\n\nfunction triangle(x,y,r) {\n\treturn max((abs(x) * 0.866025) - (y * 0.5), y) - r / 2;\n}\n\nfunction hexagon(x,y,r){\n     x = abs(x); y = abs(y);\n     return  max((x * 0.5 + y * 0.866025),x) - r;\n}\n\nfunction hexStar(x,y,r) {\n  // rescale to pointy parts of star\n  x = abs(x*1.73205); y = abs(y*1.73205); \n  dot = 2 * min(-0.5*x + 0.866025 * y,0);\n  x -= dot * -0.5; y -= dot * 0.866025;\n  \n  dot = 2 * min(0.866025*x + -0.5 * y,0);\n  x -= dot * 0.866025; y -= dot * -0.5;\n  \n  x -= clamp(x, r * 0.57735, r * 1.73205);\n  y -= r;\n  return signum(y) * hypot(x,y) / 1.73205;\n}\n\n// interior distance on this is slightly weird. Still\n// looking for a reasonable fix.\nfunction cross(x,y,size) {\n  x = abs(x); y = abs(y);\n  \n  if (y > x) { tmp = x; x = y; y = tmp; }\n  qx = x - size; qy = y - size / 5;\n  k = max(qy,qx);\n  if (k > 0) {\n    wx = max(qx,0); wy = max(qy,0);\n    return hypot(wx,wy);\n  } else {\n    wx = max(size - x,0); wy = max(-k,0);\n    return -hypot(wx,wy);\n  }\n}\n\n// UI\nexport function sliderSize(v) {\n  objectSize = 0.4 * v;\n}\n\nexport function sliderFilled(v) {\n  filled = (v >= 0.5);\n}\n\nexport function sliderLineWidth(v){\n  lineWidth = 0.25 * v * v;\n}\n\nexport function beforeRender(delta) {\n  morphClock += delta\n\n// morph to a new shape every other second...\n  if (morphClock > 1000) {\n    if (!wait) {\n      shape = nextShape;                      // set to next shape\n      nextShape = (nextShape+1) % numShapes;  \n    }\n    morphClock = 0;    \n    wait = !wait;\n  }\n\n  lerpPct = morphClock / 1000;\n\n// rotate entire scene\n  theta = PI2 * time(0.1);\n  resetTransform();\n  translate(-0.5,-0.5);  \n  rotate(theta);  \n}\n\nexport function render2D(index,x,y) {\n  var d;\n  var v = 0;\n\n  // draw one our shapes, interpolating between two SDFs when switching shapes\n  if (wait) {\n    d = shapeSdf[shape](x,y,objectSize);\n  } else {\n    d = shapeSdf[shape](x,y,objectSize) * (1-lerpPct) + shapeSdf[nextShape](x,y,objectSize) * lerpPct;\n  }\n  \n  // fill or just draw boundary based on UI seting.  \n  if (!shapeCompare[filled](d)) {;\n    v = 1-(d/lineWidth);\n    s = 1.5-abs(d)/objectSize\n    h = d + time(0.1);      \n  }\n\n  hsv(h, s, v*v)\n}\n\n"
  },
  "preview": "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"
}