{
  "name": "Perlin fire",
  "id": "Zctt6BgiHNb25xhwT",
  "sources": {
    "main": "/* \nDemonstration of Perlin noise functions to generate fire \nThe first mode shows Perlin noise scaled to 0-1.\nThe second shows a fractal ridge function, creating fire tendrils.\nThe third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\nThe fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n2022 Ben Hencke (wizard)\n*/\n\nvar rgbGradient = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nsetPalette(rgbGradient)\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\nexport var mode = 1, fireScale = 3, risingSpeed = 1, morphSpeed = 1\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function beforeRender(delta) {\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}"
  },
  "preview": "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"
}