{
  "name": "xorcery 3D",
  "id": "M5y6ieXMuhfJgmHAJ",
  "sources": {
    "main": "/*\n  Xorcery 2D/3D\n\n  An XOR in 2D/3D space based on the 'block reflections' pattern. To think\n  through the math, start with the comments on that pattern. The `^` operator is\n  bitwise exclusive-or (XOR). Combined with modulus (`%`) and `triangle()`, this\n  pattern renders interesting kaleidoscopic blocks in 1D/2D/3D.\n  \n  Output demo: https://youtu.be/7PQGV59N5hM\n*/\n\nexport function beforeRender(delta) {\n  t1 = time(.1)\n  t2 = time(.1) * PI2\n  t3 = time(.5)\n  t4 = time(.2) * PI2\n}\n\nexport function render3D(index, x, y, z) {\n  m = .3 + triangle(t1) * .2\n  h = sin(t2)\n  h += (wave((5 * (x - .5) ^ 5 * (y - .5) ^ 5 * (z - .5)) / 50 * \n    (triangle(t3) * 10 + 4 * sin(t4)) % m))\n  v = (abs(h) + abs(m) + t1) % 1\n  v = triangle(v * v)\n  h = triangle(h) / 5 + (x + y + z) / 3 + t1\n  v = v * v * v\n\n  hsv(h, 1, v)\n}\n\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\n// Repeat the top line of the matrix 4X for a more granular 1D\nexport function render(index) {\n  pct = index / pixelCount\n  render3D(index, 4 * pct, 0, 0)\n}\n"
  },
  "preview": "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"
}