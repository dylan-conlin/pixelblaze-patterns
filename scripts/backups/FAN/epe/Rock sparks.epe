{
  "name": "Rock sparks",
  "id": "rJbFahy5ukYjxgSA4",
  "sources": {
    "main": "/*This is a combination of Rok Star written by Zranger-\"The LED Guru\". and\n2d fireworks fade. I take no credit just adjusted some values. I'm sure there's some things in the code that don't make sense\n free to clean it up but I thought it looked pretty neat on my LED rings. \nTwilight \n\n\n*/secondsPerMode = 3\nxFadePct = 0.33 // Percentage of the time we spend in crossfades\n\nmodeCount = 3\nbeforeRenders = array(modeCount)\nrenderers = array(modeCount)\n\npinMode(26, OUTPUT)\n\nexport function render(delta) {\n\n}\n\nexport function beforeRender(delta) {\n  if(clockHour() < 21 || clockHour() >= 23){\n    digitalWrite(26,LOW)\n  }else{\n    digitalWrite(26,HIGH)\n  }\n  modeTime = time(secondsPerMode * modeCount/ 65.536) * modeCount\n  \n  // 0 when not crossfading; 0..0.999 when crossfading\n  pctIntoXfFade = max(((modeTime %2) - (1 - xFadePct)) / xFadePct, 0)\n  \n  for (var m = 0; m < modeCount; m++) {\n    beforeRenders[m](delta) // computes ALL beforeRenders\n  }\n  // ToDo: For many patterns combined, enhance that to just call the 2 needed\n}\n\nexport function render2D(i, x, y) {\n  /* \n    If we're crossfading mode 1 to mode 2, we randomly pick that this pixel will\n    come from either mode 1's renderer or mode 2's. Which one it comes from \n    is probabilistically related to the percentage we're into this crossfade.\n  */\n  skew = random(2) < wave((pctIntoXfFade - 0.5) / 2 ) // wave makes it \"tween\"\n\n  thisPixelMode = floor((modeTime + skew) % modeCount)\n  renderers[thisPixelMode](i, x, y)\n}\n\n// fireworks Dust___________________________________________________________________\nbeforeRenders[0] = (delta) => {}\n\nrenderers[0] = (index, x, y) => {\n   // Every pixel is given a random hue from 0 to 1, IE the entire hue wheel\n  rnum = time(.06)*4\n  if(rnum <= 1){\n    if(random(1) >.3)\n      h = 1-random(.011)\n    else\n     h = 0+random(.015)\n  }else if(rnum <= 2){\n    h = .35-random(.03)-.015\n    if (h > .65) { h = h%.65} \n  }\n  \n  /*\n    If a random number between 0 and 100 is less than 90 (i.e. most of the \n    time), this comparison will return \"true\", which is also the value 1. A \n    saturation of 1 is a color, while saturation of 0 is white. So this makes \n    10% of the dust white.\n  */\n  if(rnum > 2 && rnum <= 3){\n    s=1\n  }else{\n    s = random(100) < 85\n  }\n  \n  /* \n    If a random decimal between 0 and 1 is over 0.995, then the value is 1 and \n    the pixel is on. Otherwise it's zero (off). Another way of thinking about\n    this: The odds of a pixel being on are ~ 5-in-1000, or 1-in-200. \n  */\n  v = random(1) > .91\n  v =v*v*v\n  hsv24(h, s, v)\n}\n// fast pulse 2D___________________________________________________________________\n    \n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  \n  \n\n// house lights R W B____________________________________________\n\n\nexport var width = PI/2;\nvar horizontalSpacing = 3;\nvar verticalSpacing = 2.3;\nexport var verticalSweep = 5;\nexport var focus = 0.18;\nexport var speed = 80;\nexport var drive = 1.2;\n\n// set default colors\nvar centerR = 0.0; var centerG = 0.7; var centerB = 0.12;\nvar edgeR = 0.34; var edgeG = .00; var edgeB = 0.98;\n\ntranslate(-0.5,-0.5);\n\n\nexport function rgbPickerCenter(r,g,b) {\n centerR = r; centerG = g; centerB = b;  \n}\nexport function rgbPickerEdge(r,g,b) {\n  edgeR = r; edgeG = g; edgeB = b;\n}\n// controls brightness/desaturation of center beam\nexport function sliderWidth(v) {\n  width = 0.00015+(v * PI/2)\n}\n// overall brightness & dispersion of each source\nexport function sliderFocus(v) {\n  focus = .00015+v;\n}\n// goes to 11...\nexport function sliderDrive(v) {\n  drive = 1 + (10*v*v);\n}\nexport function sliderSpeed(v) {\n  speed = 50+(100*v);\n}\n// vertical vs horizontal motion \nexport function sliderVerticalSweep(v) {\n  verticalSweep = 1+(5*v);\n}\n\n\nbeforeRenders[1]=function(delta) {\n  t1 = time(.1) * speed;\n  t2 = 0.4*(-0.5+wave(time(0.08)));\n  xOffset = t1 * 0.5;\n  yOffset = t1 * 0.2;\n}\n\nvar r,g,b,v;\nvar px,py,dx,dy;\nvar c,k0,k1;\nrenderers[1]=function(index,x,y) {\n  r = 0;g = 0;b = 0;\n  py = y + t2;  \n  \n  // process each of our 3 light sources\n  for (var i = -1; i <= 1; i++) {\n    px = t2+x + i/horizontalSpacing;\n    v = i * verticalSpacing;\n    dy = sin(yOffset+v);\n    \n    // is pixel within this source's visible region?\n    if ((py*dy) < 0) {\n      dx = sin(xOffset+v);\n      c = px / py * dy * verticalSweep + dx;      \n      if (abs(c) >= 2) continue;  \n      \n      // calculate intensity at this pixel\n      // k0 is the brightness of the center beam\n      // k1 is the brightness of the edge beams\n      k0 = min(focus/abs(sin(c)),drive);\n      k1 = min(focus/abs(sin(c-width)),drive);\n\n      if (k0 > k1) {\n        k0 = k0 * k0;\n        r += k0 * centerR; \n        g += k0 * centerG;\n        b += k0 * centerB;\n      }\n      else {\n        k1 = k1 * k1;\n        r += k1 * edgeR; \n        g += k1 * edgeG;\n        b += k1 * edgeB;\n      }\n    }\n  }\n  \n  // limit range, gamma correct and display\n  r = clamp(0,1,r); g = clamp(0,1,g); b = clamp(0,1,b);\n  rgb(r,g,b);\n}\n   \n\n\n// Sp// Rotating checkerboard\nbeforeRenders[2] = function (delta) {\nrenderers[2] = function (index, x, y) {\n  phi = PI2 * time(5/ 65.536)   // Rotation angle in radians. Try 8 seconds.\n  x0 = 0.5; y0 = 0.5             // Center of rotation\n  x = x - x0;  y = y - y0        // Shift the center to the origin\n  _x = x * cos(phi) - y * sin(phi) + 3 * x0 // Rotate around origin and re-shift\n  _y = y * cos(phi) + x * sin(phi) + 2 * y0\n  t20 = time(3 / 65.536)         // Zoom scale and color. Try 3 seconds.\n  blocks = 0.5 +3 * wave(t20)   // Number of blocks visible\n  \n  h = (_x + _y + t20 - 1)/5\n  if (h > .65) { h = h%.65} \n  v = (1 + floor(1 + _x * blocks) + floor(1 + _y * blocks)) % 2 < 1;\n  hsv(h,1,v) \n  \n \n}\n} "
  },
  "preview": ""
}