{
  "name": "2D Spiral Twirls",
  "id": "tTBvpe6yG2kuCYdP9",
  "sources": {
    "main": "/**\r\n * A configurable 2D pattern that creates a variety of\r\n * rotating and swirling circular and spiral effects.\r\n * For best results a matrix of 16x16 or greater is recommended.\r\n * \r\n * I'd suggest starting with all the sliders at zero, then trying\r\n * each of them one at a time to see what impact it has on the\r\n * resultant pattern. That way it should be easier to understand\r\n * how to combine them all to get the effect you'd like.\r\n * \r\n * Pattern by @ChrisNZ\r\n */\r\nvar twistSpeed = 0.015\r\nvar rotateSpeed = 0.002\r\nvar startingColor = 0.3\r\nvar colorSpeed = 0.015\r\nvar twist\r\nvar rotation\r\nvar colorShift\r\nvar arms\r\n\r\n\r\n// How quickly the spiral should rotate back and forth\r\nexport function sliderTwistSpeed(v) { twistSpeed = v = 0 ? 0 : 0.015 / v }\r\n\r\n// How quickly the entire pattern should rotate\r\nexport function sliderRotationSpeed(v) { rotateSpeed = v = 0 ? 0 : 0.005 / v }\r\n\r\n// What initial colors to display. If colorSpeed is zero then the pattern will\r\n// stay this color\r\nexport function sliderInitialColor(v) { startingColor = v * 2 }\r\n\r\n// How quickly the colors of the pattern should change\r\nexport function sliderColorSpeed(v) { colorSpeed = v = 0 ? 0 : 0.015 / v }\r\n\r\n// How many arms of symmetry the pattern should have\r\nexport function sliderArms(v) { arms = v * 2 + 1; arms = arms - (arms - floor(arms)) }\r\n\r\nexport function beforeRender(delta) {\r\n  twist = wave(time(twistSpeed)) * 2 - 1\r\n  rotation = time(rotateSpeed)\r\n  colorShift = time(colorSpeed)\r\n}\r\n\r\nexport function render2D(index, x, y) {\r\n  xNorm = (x - 0.5) * 2\r\n  yNorm = (y - 0.5) * 2\r\n  dist = sqrt(xNorm * xNorm + yNorm * yNorm)\r\n  angle = (arctan2(yNorm, xNorm) + PI) / PI / 2\r\n  t = twist < 0 ? dist * twist : dist * twist\r\n  angle += t / 2\r\n  \r\n  setColor(angle, rotation, dist)\r\n}\r\n\r\nfunction setColor(angle, rotation, dist) {\r\n  h = angle * arms - rotation + 10\r\n  h = h - floor(h)\r\n  s = 1\r\n  v = (1.01 - dist) * (h < 0.5 ? h * h * h : h)\r\n  hsv((h + startingColor) / 2 + colorShift, s, v)\r\n}\r\n\r\n// Temporary fix/workaround until the built in atan2() is fixed\r\nfunction arctan2(y, x) {\r\n  if (x > 0) return atan(y/x)\r\n  if (y > 0) return PI / 2 - atan(x/y)\r\n  if (y < 0) return -PI / 2 - atan(x/y)\r\n  if (x < 0) return PI + atan(y/x)\r\n  return 1.0\r\n}"
  },
  "preview": "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"
}