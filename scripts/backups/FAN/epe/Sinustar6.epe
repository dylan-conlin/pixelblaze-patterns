{
  "name": "Sinustar6",
  "id": "xQ6m2FajJE75YFP6t",
  "sources": {
    "main": "export var speed = .03 // Tune for your physical install's rotation\nexport function sliderSpeed(v) {\n  speed = .3 + (v * 10)\n}\n\n// At times, it's snowflake-esque\nvar t3\nfunction beforeSinustar6(delta) {\n  t3 = time(3 / 65.536)\n}\nfunction sinustar6(index, r, phi, theta) {\n  line = near(r,\n    2 * osc(10) + .4 * cos((6 * phi - t3) * PI2)\n  , .4)\n  hsv(0, 0, line)\n}\n\nexport function beforeRender(delta) {\n  beforeSinustar6(delta)\n}\n\nexport function render3D(index, r, phi, theta) {\n  sinustar6(index, r, phi, theta)\n}\n  \nexport function render2D(index, r, phi) {\n  render3D(index, r, phi, .5) // Equatorial section\n}\n\nexport function render(index) {\n  render2D(index, index / pixelCount, 0)\n}\n\n// Utilities\n\n// Helper to quickly define 0-1 oscillators of a defined period. Becomes\n// ineffecient unless only used in beforeRenders.\nfunction osc(sec) { return wave(time(sec / 65.536)) }\n\n// Several modes define a line in space. This sets the defualt thickness of\n// those. Use a higher percentage for projects with fewer pixels.\nvar halfwidthDefault = 0.125\n\n// Returns 1 when a & b are proximate, 0 when they are more than `halfwidth`\n// apart, and a gamma-corrected brightness for distances within `halfwidth`\nfunction near(a, b, halfwidth) {\n  if (halfwidth == 0) halfwidth = halfwidthDefault\n  var v = clamp(1 - abs(a - b) / halfwidth, 0, 1)\n  return v * v\n}"
  },
  "preview": "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"
}