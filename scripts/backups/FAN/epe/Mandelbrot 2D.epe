{
  "name": "Mandelbrot 2D",
  "id": "9fnJ3o6Eq4PJQ5D96",
  "sources": {
    "main": "/*\n Mandelbrot Set 2D - brute force version!\n \n Displays and animates a view of the Mandelbrot set -- the set\n of points for which the series (z[n+1] = z[n]^2 + C) remains within\n a bounded region (at least during our relatively small number of\n iterations) rather than heading for infinity. \n \n Requires a 2D LED array and appropriate pixel mapper.\n\n This is *very* compute intensive, so be careful with the interaction between\n maxIterations and display size.  Somewhere around maxIterations=15 or 16 looks\n good on a 16x16 matrix.  Reduce iterations for higher frame rate or for larger\n displays.  Too many iterations may cause your Pixelblaze to behave \n erratically or become unresponsive.\n \n Reference:\n https://mathworld.wolfram.com/MandelbrotSet.html\n \n Version  Author        Date        \n 1.0.0    JEM(ZRanger1) 12/08/2020  \n*/ \n\n// how many roads must a man walk down, before he runs out of execution steps...\n// the answer my friend, is about 17 on a Pixelblaze 2 driving a 16x16 matrix.\nexport var maxIterations = 15\n\n// complex number describing the region of the set we're viewing. There is \n// a relationship between number of iterations and how much of the set is visible.\n// If you reduce iterations and don't see much, try changing these constants a bit.\nvar cR = -0.94299  \nvar cI = 0.3162\n\n// various variables for holding calculation results. Up here so they\n// can be easily exported for debugging if necessary\nvar cX,cY;\nvar fX,fY;\n\n// timers used to animate movement and color\nvar t1,t2\n\n//UI\n\n// range of maxIterations is 5 to 17.  You can go higher if you want, but\n// be a bit careful.\nexport function sliderIterations(v) {\n  maxIterations = 5+floor(v * 12)  \n}\n\n// The viewed portion of set moves w/timer t1. Timers and constants are hand-tuned, so\n// feel free to experiment to see different areas of the set.  \nexport function beforeRender(delta) {\n  t1 = (triangle(time(0.2)) - 0.5) * 2.4;   \n  t2 = time(0.05);\n\n  cX = cR + t1;       \n  cY = cI + (t1 / 2.5)\n}\n\n// In Render2D, we iterate over every pixel until the value at that point heads\n// for infinity (er, 4 in our case) or we hit the maximum number of iterations.\n// x/y pixel coords are mapped to -0.5 to 0.5 to keep everything in 16.16 range.\n// The mapper's coordinate normalizing mechanic really helps out here.\nexport function render2D(index,x,y) {\n  x = x - 0.5; y = y - 0.5;    // scale coords to range -0.5 to 0.5\n  \n// iterate fn over the pixel 'til we hit maxIterations or the value goes\n// out of range.\n  for (var iter = 0; iter < maxIterations; iter++) {\n    x2 = x * x; y2 = y * y;\n    if ((x2 + y2) > 4) break;  // 4 is our stand-in for infinity!\n\n    var fX = x2 - y2 + cX;\n    var fY = 2 * x * y + cY;\n    x = fX; y = fY;\n  }\n// once we're out of the loop, color by how quickly the function tended towards infinity\n// quicker exits give lower hue values, a point that didn't ever break out is displayed \n// as black.  More iterations would give more detail, but we run out of CPU pretty quickly here\n//\n  (iter < maxIterations) ? hsv(t2+(iter/maxIterations),1,1) : rgb(0,0,0);  // weird, but just a hair faster... \n}"
  },
  "preview": ""
}