{
  "name": "Snowglobe",
  "id": "2z9fymmKZzRRXMztu",
  "sources": {
    "main": "// Snowglobe is a deriviative of the default Sparks pattern\nvar numSparks = 30\nvar friction = 1 / pixelCount\nvar sparks = array(numSparks)\nvar sparkX = array(numSparks)\nvar pixels = array(pixelCount)\n\nexport var speed = .03 // Tune for your physical install's rotation\nexport function sliderSpeed(v) {\n  speed = .3 + (v * 10)\n}\n\nfunction beforeSnowglobe(delta) {\n  delta *= .01 * speed\n  for (i = 0; i < pixelCount; i++) pixels[i] = 0\n  for (i = 0; i < numSparks; i++) {\n    if (abs(sparks[i]) <= .001) {\n      sparks[i] = .1 + random(.4)\n      sparkX[i] = random(pixelCount)\n      if (random(1) > .5) sparks[i] *= -1\n    }\n    sparks[i] -= friction * delta * (sparks[i] > 0 ? 1 : -1)\n    sparkX[i] += sparks[i] * delta\n    if (sparkX[i] > pixelCount || sparkX[i] < 0) {\n      sparkX[i] = 0; sparks[i] = 0\n    }\n    pixels[sparkX[i]] += abs(sparks[i])\n  }\n}\n\nfunction snowglobe(index) {\n  var v = pixels[index]\n  hsv(.63, 1 - v, v * v)\n}\n\nexport var mode, modeTime\n\nexport function beforeRender(delta) {\n  beforeSnowglobe(delta)\n}\n\nexport function render3D(index, r, phi, theta) {\n  snowglobe(index, r, phi, theta)\n}\n  \nexport function render2D(index, r, phi) {\n  render3D(index, r, phi, .5) // Equatorial section\n}\n\nexport function render(index) {\n  render2D(index, index / pixelCount, 0)\n}\n"
  },
  "preview": "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"
}