{
  "name": "Lissajous curve tracer",
  "id": "4x8XzzT4mAdSAnvvh",
  "sources": {
    "main": "/*\n\nA Lissajous curve tracer\n\nhttps://en.wikipedia.org/wiki/Lissajous_curve\n\nThe A parameter and delta control the X, while\nthe B parameter controls the Y, allowing for a number of\nLissajous curves. A and B can be between 1 and 8.\nDelta can be set in 1/4 pi increments.\n\nThe dot size, color, speed, and persistence on scree\ncan be adjusted.\n\n2021 Ben Hencke\n\n*/\n\n//setting to eraase pixels when changing curve parameters\nvar clearOnChange = true \n\n//globals\nvar x1, y1\nvar pixels = array(pixelCount)\nvar hues = array(pixelCount)\nvar frameHue\n\n//controls variables\nvar pixelDensity = 8\nvar t = timer(.1)\nvar a1 = 3\nvar b1 = 4\nvar d1 = PI/2\nvar fade = .9\nvar h = 0, s = 1, v = 1\nvar hueShift = .2\nvar hueShiftTimer = timer(.1)\n\n//controls\n//pick the dot starting color\nexport function hsvPickerColor(_h, _s, _v) {\n  h = _h; v = _v; s = _s;\n}\n\n//shift hue by this much\nexport function sliderHueShift(v) {\n  hueShift = v\n}\n\nexport function sliderHueShiftSpeed(v) {\n  v = 1-v\n  timerSetInterval(hueShiftTimer, .001 + v*v*v)\n}\n\n//from tracers, to solid paints\nexport function sliderPersistence(v) {\n  v = 1-v\n  fade = 1-v*v\n}\n\nexport function sliderSize(v) {\n  v = 1-v\n  pixelDensity = 1 + v*v*32\n}\n\nexport function sliderSpeed(v) {\n  v = 1-v\n  timerSetInterval(t, .001 + v*v*v/5)\n}\n\n//Lissajous curve ratio A value\nexport function sliderA(v) {\n  var newValue = 1 + floor(v*7)\n  if (a1 != newValue)\n    clearPixels()\n  a1 = newValue\n}\n//Lissajous curve ratio B value\nexport function sliderB(v) {\n  var newValue = 1 + floor(v*7)\n  if (b1 != newValue)\n    clearPixels()\n  b1 = newValue\n}\n//Lissajous curve A delta\nexport function sliderDelta(v) {\n  v = floor(v*7)/8\n  var newValue = PI*2 * v\n  if (d1 != newValue)\n    clearPixels()\n  d1 = newValue\n}\n\nfunction clearPixels() {\n  if (clearOnChange) {\n    pixels.mutate(() => 0)\n  }\n}\n\nexport function beforeRender(delta) {\n  var now = timerNow(t)\n  //calc current Lissajous dot location\n  x1 = sin(now * a1 * PI2 + d1)\n  y1 = sin(now * b1 * PI2)\n  \n  //start with the hue chosen, and shift +- by the hueShuft amount\n  frameHue = h - hueShift/2 + triangle(timerNow(hueShiftTimer)) * hueShift\n  \n  resetTransform()\n  translate(-.5, -.5) //center\n  //scale up, with a little extra room for larger dots\n  scale(2 + 1.7/pixelDensity, 2 + 1.7/pixelDensity) \n}\n\nexport function render2D(index, x, y) {\n  //this pixel's distance to the dot\n  var distance = hypot(x1 - x, y1 - y)\n  //calc closeness, scaled by density\n  var closeness = clamp(1 - distance * pixelDensity, 0, 1)\n  //fade old pixel value, and draw the dot based on closeness\n  var pixelValue = pixels[index] = max(pixels[index] * fade, closeness)\n  //set the hue if we painted something here\n  if (closeness > 0) {\n    hues[index] = frameHue\n  }\n  \n  hsv(hues[index],s,pixelValue * v)\n}\n\n\n//timer utility functions for smooth speed adjustment\nfunction timer(interval) {\n  return [0, interval]\n}\n\nfunction timerSetInterval(timer, interval) {\n  var p1 = time(timer[1]) //measure the current interval's value\n  var p2 = time(interval) //measure the new interval's value\n  //calculate the phase difference between these\n  timer[0] = mod(timer[0] + p1 - p2, 1)\n  timer[1] = interval\n}\n\nfunction timerNow(timer) {\n  return (time(timer[1]) + timer[0]) % 1\n}"
  },
  "preview": "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"
}