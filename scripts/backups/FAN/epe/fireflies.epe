{
  "name": "fireflies",
  "id": "sufPzeHPStbpDWikp",
  "sources": {
    "main": "/*\n  FireFlies\n  \n  This is a fork of the sparks pattern where each spark is:\n    - Slowed down \n    - Given a longer lifetime \n    - Allowed to loop from one end to the other\n  \n  This is a highly upvoted pattern generously contributed to the community\n  pattern library by an unknown person. Please reach out if you'd like an\n  attribution link here!\n*/\n\n\n\nsparkHue = .05       // Set the hue for each spark\nsparkSaturation = 1  // Set the saturation for each spark (0 = white)\nexport var numSparks = 1 + floor(pixelCount / 10)  // Scale number of sparks based on # LEDs\ndecay = .999          // Decay their energy/speed. Use .999 for slower\nmaxSpeed = .2        // The maximum initial speed of any spark / firefly\nnewThreshhold = .01  // Recycle any spark under this energy\n\nsparks = array(numSparks)\nsparkX = array(numSparks)\npixels = array(pixelCount)\n\n\nexport function beforeRender(delta) {\n  delta *= .1\n  \n  for (i = 0; i < pixelCount; i++) pixels[i] *= .9 // Air cooling\n  \n  for (i = 0; i < numSparks; i++) {\n    // Recycle dead sparks\n    if (abs(sparks[i]) <= newThreshhold) {\n      sparks[i] = (maxSpeed / 2) - random(maxSpeed)\n      sparkX[i] = random(pixelCount)\n    }\n    \n    sparks[i] *= decay  // Spark energy decay\n    sparkX[i] += sparks[i] * delta  // Advance each position \u221d its energy\n    \n    // Allow sparks to loop around each end\n    if (sparkX[i] >= pixelCount) sparkX[i] = 0\n    if (sparkX[i] < 0) sparkX[i] = pixelCount - 1\n    \n    // Heat up the pixel at this spark's X position\n    pixels[floor(sparkX[i])] += sparks[i]\n  }\n}\n\nexport function render(index) {\n  v = pixels[index]\n  hsv(sparkHue, sparkSaturation, v * v * 10)\n}\n"
  },
  "preview": "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"
}