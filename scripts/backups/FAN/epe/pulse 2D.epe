{
  "name": "pulse 2D",
  "id": "xqJJ9woM8Wz4QyS3q",
  "sources": {
    "main": "/*\n  Pulse 2D\n\n  This pattern is meant to be displayed on an LED matrix or other 2D surface\n  defined in the Mapper tab. There is also a 1D version defined.\n  \n  Output demo: https://youtu.be/hZT4z3OQEvg\n  \n  The mapper allows us to share patterns that work in 2D or 3D space without\n  the pattern code being dependent on how the LEDs were wired or placed in \n  space. That means these three installations could all render the same pattern\n  after defining their specific LED placements in the mapper:\n    \n    1. A 8x8 matrix in a perfect grid, wired the common zigzag way\n    2. Individual pixels on a strand mounted in a triangle hexagon grid\n    3. Equal length strips wired as vertical columns on separate channels\n         of the output expander board\n  \n  To get started quickly with matrices, there's an inexpensive 8x8 on the \n  Pixelblaze store. Load the default Matrix example in the mapper and you're\n  ready to go.\n*/\n\n\nexport function beforeRender(delta) {\n  t1 = time(3.3 / 65.536) * PI2 // Sawtooth 0 to 2*PI every 3.3 seconds\n  t2 = time(6.0 / 65.536) * PI2 // Sawtooth 0 to 2*PI every 6 seconds\n  z = 1 + wave(time(13 / 65.536)) * 5 // Sine wave, min = 1, max = 6\n}\n\nexport function render2D(index, x, y) { \n  /*\n    This general form produces an egg carton surface: f(x,y) = sin(x) + cos(y)\n    Plot: https://www.google.com/search?q=sin%28x%29+%2B+cos%28y%29\n    \n    We'll make the color hue depend on the height of the egg carton.\n    \n    Remember this? y = A sin(B(x + C)) + D\n      - The period (wavelength) is 2\u03c0/B\n      - The phase shift is C (and positive is to the left)\n\n    We can animate the \"camera's\" panning with phase shifts. That's the '+ t1' \n    and '+ t2' below. We animate the diameter (wavelength) of the hills and\n    valleys by animating z.\n    \n    The hue output range is -0.5 to 1.5. hsv() will wrap hues outside 0..1.\n  */\n  h = (1 + sin(x * z + t1) + cos(y * z + t2)) * 0.5\n  \n  // Start with value (brightness) equal to our -0.5 to 1.5 hue\n  v = h\n  \n  /*\n    It's common to see patterns multiply a 0..1 brightness value by itself  \n    several times for aesthetic reasons. v^(some power) makes a small v smaller \n    (when v < 1) and this tends to produce smoother dimming.\n    \n    Remember that while hsv() will wrap h, it will clamp v within 0..1. Setting \n    v to be odd power of itself preserves the sign, allows h ~= 1 to be bright\n    red, low hues to be very dim, and h < 0 to be zero brightness (off).\n  */\n  v = v * v * v / 2 \n\n  hsv(h, 1, v)\n}\n\n/*\n  When there's no map defined, Pixelblaze will call render() instead of \n  render2D() or render3D(), so it's nice to define a graceful degradation for 1D\n  strips. For many geometric patterns, you'll want to define a projection down a\n  dimension.\n*/\nexport function render(index) {\n  pct = index / pixelCount  // Transform index..pixelCount to 0..1\n  // render2D(index, pct, pct)  // Render the diagonal of a matrix\n  // render2D(index, pct, 0)    // Render the top row of a matrix\n  render2D(index, 8 * pct, 0)   // Render 8 top rows worth to make it denser\n}"
  },
  "preview": "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"
}