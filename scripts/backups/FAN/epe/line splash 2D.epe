{
  "name": "line splash 2D",
  "id": "8QeehY6H9CPZQPwew",
  "sources": {
    "main": "/*\n Line Splash 2D \n Waves created by randomly dropping objects from random heights\n into a linear \"pond\".\n \n For performance, this is actually a system of springs rather\n than a true wave simulation.  \n \n Requires a 2D LED matrix and appropriate pixel mapper.\n \n NOTE that you must set the matrix dimensions in the pattern\n code for this to work properly.\n \n Version  Author        Date        Comment\n 1.0.0    JEM(ZRanger1) 10/16/2020 \n*/ \n\n// display size -- we depend on a matrix mapper being present,\n// but we still need to know the matrix dimensions\nvar displayWidth = 32;\nvar displayHeight = 8;\nvar initialLevel = displayHeight / 2;\nvar maxWidthIndex = displayWidth - 1;\n\n// constants affecting water behavior\nexport var tension = 0.007;   // spring tension -- affects bounce speed\nexport var damping = 0.008;   // decay rate of waves in the absence of other forces\nexport var spread = 0.003;    // energy from each cell passed to neighbors\n\n// storage for current state of our water \"surface\"\nvar waterLevel = array(displayWidth);\nvar waterSpeed = array(displayWidth);\n\n// animation controls\nvar dropInterval = 300;   // initial ms between rock drops\nvar frameTimer = 0;       // time accumulator for rock dropping\nvar lineWidth = 1.2;      // approx width of water surface \"line\"\nvar hue = 0.6666;         // color of water line\nvar hueTimer;\n\ninitWater();              // initialize water level and speed arrays\n\n// UI\nexport function sliderTension(v) {\n  tension = 0.05 * v * v;\n}\n\nexport function sliderDamping(v) {\n  damping = 0.05 * v * v;\n}\n\nexport function sliderSpread(v) {\n  spread = 0.01 * v * v;\n}\n\nexport function sliderLineWidth(v) {\n  lineWidth = 0.5 + (3 * v);\n}\n\n// initialize to calm waters.\nfunction initWater() {\n  for (var i = 0; i < displayWidth; i++) {\n    waterLevel[i] = initialLevel;\n    waterSpeed[i] = 0;\n  }\n}\n\nexport function beforeRender(delta) {\n  var i, n1, n2;\n  \n  hueTimer = time(0.1);\n  \n// periodically drop rocks in our pond  \n  frameTimer += delta;\n  if (frameTimer > dropInterval) {\n    waterSpeed[random(displayWidth)] = 0.1 * random(1+displayHeight / 2);\n    dropInterval = random(700);\n    frameTimer = 0;\n  }\n  \n// propagate the waves...  \n  for (i = 0; i < displayWidth; i++)  {\n  \n// apply tension and damping to current cell  \n    var newSpeed = initialLevel - waterLevel[i];\n    waterSpeed[i] += (tension * newSpeed) - (waterSpeed[i] * damping);\n    waterLevel[i] += waterSpeed[i];  \n\n// spread the energy around to the nearest neighbors to left... \n    n1 = clamp(i-1,0,maxWidthIndex); n2 = clamp(i-2,0,maxWidthIndex);\n    var lWave = spread * (waterLevel[i] - waterLevel[n2]);\n    lWave += spread * (waterLevel[i] - waterLevel[n1]);\n    waterSpeed[n1] += lWave;  \n    waterLevel[n1] += lWave;\n\n// and right.   \n    n1 = clamp(i+1,0,maxWidthIndex); n2 = clamp(i+2,0,maxWidthIndex);\n    var rWave = spread * (waterLevel[i] - waterLevel[n1]);\n    rWave += spread * (waterLevel[i] - waterLevel[n2]);    \n    waterSpeed[n1] += rWave;\n    waterLevel[n1] += rWave;  \n  }\n}\n\nexport function render2D(index,x,y) {\n  var s,b;\n  s = y * 1.75;\n  x *= displayWidth;\n  y *= displayHeight;\n  b = (abs(waterLevel[x]-y) < lineWidth) \n\n  hsv(hue,s,b)\n}"
  },
  "preview": "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"
}