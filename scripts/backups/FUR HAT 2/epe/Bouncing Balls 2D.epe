{
  "name": "Bouncing Balls 2D",
  "id": "ZBnX5bhnWYEykWKcu",
  "sources": {
    "main": "/**\n * This pattern works with either a strip or rectangular matrix, and ideally with the sensor\n * expansion board. It works fine on both PBv2 and PBv3. It simulates a row of bouncing balls\n * that can be triggered by shaking the accelerometer.\n *\n * You will need to set the 'width' variable to the width of your matrix, or set it to 1 if\n * you are just using an LED strip.\n * \n * If you do not have the sensor expansion board, uncomment the \"init(i)\" at line 130. This\n * will cause the balls to \"rebounce\" automatically once they have come to rest, rather than\n * relying on the accelerometer.\n * \n * There are multiple parameters that can be configured using the slider controls:\n *   Gravity - how strong the force of gravity is on the balls.\n *   Motion Sensitivity - how much sudden movement is required for the balls to 'rebounce'.\n *   Show Rainbow - enables/disables a rainbow pattern underneath the balls.\n *   Randomness - how closely the balls stay in sync with each other.\n *\n * Pattern by @ChrisNZ, inspired by inspired by this project https://hackaday.io/project/177255-neopixel-led-skirt\n */\n\n// Set this to the width of your matrix\nvar width = 8\nvar height = pixelCount / width\n\n\n// Acceleration of gravity in m/s^2\nexport var gravity = -9.81\nexport function sliderGravity(v) {\n  gravity = -v * 29 - 1\n  resetAll()\n}\n\n// How sensitive the pattern is to movement from the accelerometer\nexport var motionThreshold = 0.03\nexport function sliderMotionSensitivity(v) {\n  motionThreshold = v * v * 0.07055 + 0.0195\n}\n\n// Whether or not to draw a rainbow pattern under the bouncing balls\nexport var rainbow = 1\nexport function sliderShowRainbow(v) {\n  rainbow = v >= 0.5\n}\n\n\nexport var randomness = 100\nexport function sliderRandomness(v) {\n  randomness = v * v * 500\n}\n\nfunction initGravity() {\n  impactVelocityStart = sqrt(-2 * gravity * startHeight)\n}\n\n// Get accelerometer info from the sensor expansion board - 3 element array with [x,y,z]\nexport var accelerometer\n\nvar debounce = 0\nvar prevAccel = array(3)\nvar diff = array(3)\n\nvar dampening = 0.95   // How much dampening to apply to each ball after it bounces\nvar startHeight = 0.6   // Starting height of the ball, in meters\nvar impactVelocityStart\n\n// Keep track of multiple balls, one per vertical strip\nvar ballHeight = array(width)            // Current height of each ball.\nvar impactVelocity = array(width)        // The current impact velocity of each ball. This decreases with each bounce.\nvar timeSinceLastBounce = array(width)   // How long since the last bounce. This helps calcuate the new height.\nvar startDelay = array(width)            // How long a delay before each ball starts bouncing. The 'Randomness' slider\n                                         // affects this.\n\n\nfunction resetAll() {\n  initGravity()\n  for (i = 0; i < width; i++) {\n    init(i)\n  }\n}\n\n// Reset a ball so it starts bouncing again\nfunction init(i) {\n  ballHeight[i] = 0\n  impactVelocity[i] = impactVelocityStart\n  timeSinceLastBounce[i] = 0\n  startDelay[i] = random(randomness)\n}\n\n\nresetAll()\n\nexport function beforeRender(delta) {\n  xa = accelerometer[0]\n  ya = accelerometer[1]\n  za = accelerometer[2]\n  diff[0] = abs(xa - prevAccel[0])\n  diff[1] = abs(ya - prevAccel[1])\n  diff[2] = abs(za - prevAccel[2])\n  totalAccel = sqrt(xa * xa + ya * ya + za * za)\n  \n  debounce = clamp(debounce + delta, 0, 2000) // Prevent overflow\n  \n  // Bounce all the balls if sensor board is shaken, no more than every second\n  if (debounce > 1000 && totalAccel > motionThreshold) {\n    debounce = 0\n    resetAll()\n  }\n  \n  for (i = 0; i < width; i++) {\n    // If this ball's startDelay hasn't expired, don't do anything yet\n    if (startDelay[i] > 0) {\n      startDelay[i] -= delta\n      continue\n    }\n  \n    timeSinceLastBounce[i] += delta\n    time = timeSinceLastBounce[i] / 1000\n    ballHeight[i] = 0.5 * gravity * time * time + impactVelocity[i] * time\n    \n    // Check if the ball has reached the bottom of the strip. If so, bounce it\n    if (ballHeight[i] < 0) {\n      ballHeight[i] = 0\n      impactVelocity[i] *= dampening\n      timeSinceLastBounce[i] = 0\n      \n      \n      // If the ball has (nearly) stopped moving, we can kick it back up to full bounce.\n      // This is useful if you don't have an accelerometer.\n      if (impactVelocity[i] < 1) {\n        // init(i)\n      }\n    }\n  }\n}\n\nexport function render2D(index, x, y) {\n  xPixel = floor(x * width)\n  yPixel = height - 1 - floor(y * height)\n  \n  yBall = floor(ballHeight[xPixel] * height)\n  \n  if (yPixel == yBall) {\n    rgb(1, 1, 1)\n  } else if (rainbow && yPixel < yBall) {\n    hsv((yBall - yPixel) / height + wave(x), 1, 1) \n  }\n}"
  },
  "preview": "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"
}