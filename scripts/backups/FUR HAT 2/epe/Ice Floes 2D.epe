{
  "name": "Ice Floes 2D",
  "id": "yzY227WvhWWtvtnkF",
  "sources": {
    "main": "/* Ice Floes 2D\n\n A river filled with floating ice!  Uses Voronoi distance to simulate\n blocks of ice drifting and turning in the current.\n \n Requires a 2D display and appropriate mapping function.\n\n Version  Author     Date        Comment\n 1.0.1    ZRanger1   7/30/2021   Faster\n*/ \n\n// animation control\nvar frameTimer = 9999;\nvar simulationSpeed = 60;  \n\n// array of vectors for each point\nvar numPoints = 4;\nvar Points = array(numPoints);\nexport var speed = .575;\n\n// UI\nexport function sliderSpeed(v) {\n  speed =  2 * v;\n}\n\n// create vectors with random position, direction, speed and color. \nfunction initPoints() {\n  for (var i = 0; i < numPoints; i++) {\n    var b = Points[i];  \n    \n    b[0] = random(1);       // x position \n    b[1] = random(1);       // y position\n\n    b[2] = random(0.02) - 0.05;       // x velocity\n    b[3] = 0.015 * (random(1) - 0.5) ; // y velocity\n  }\n}\n\n// allocate and initialize point descriptors\nfunction createPoints() {\n  for (var i = 0; i < numPoints; i++) {  \n    Points[i] = array(4);\n  }\n  initPoints();\n}\n\n// move objects\nfunction doRiver(delta) {\n  for (var i = 0; i < numPoints; i++) {\n    var b = Points[i];\n    \n// move point according to velocity component of its vector \n    b[0] = frac(b[0] + (b[2] * speed));\n    b[1] = frac(b[1] + b[3]);\n\n    // wrap around in the direction of the river's \"current\"\n    if (b[0] < 0) { b[0] = 0.9998; } \n    else if (b[1] < 0) { b[1] = 0.9998;}\n    \n    // and bounce off the riverbank if we should hit.\n    if (b[1] < 0) { b[1] = 0; b[3] = -b[3]; continue; }\n    if (b[1] > 1) { b[1] = 1; b[3] = -b[3]; continue; }    \n  }\n}\n\nfunction wrappedEuclid(dx,dy) {\n  if (dx > 0.5) { dx = 1-dx; }\n  if (dy > 0.5) { dy = 1-dy; }\n  return hypot(dx,dy);\n}\n\n// initialize animated points\ncreatePoints();\n\nexport function beforeRender(delta) {\n  frameTimer += delta;\n\n  if (frameTimer > simulationSpeed) {\n    doRiver(frameTimer);\n    frameTimer = 0;\n  }  \n}\n\n// for each pixel, find the nearest point. We do this exhaustively with no\n// attempt to optimize, because we also need to deal with the pixels that are\n// about equally close to two or more points.  These pixels become the \"cracks\"\n// in our ice floes.\nexport function render2D(index,x,y) {\n  var minDistance,i,r,h,v;\n  \n  minDistance = 1;   \n\n  for (i = 0; i < numPoints; i++) {\n    // calculate euclidean distance to nearest control point\n    r = wrappedEuclid(abs(Points[i][0] - x),abs(Points[i][1] - y));\n\n    if (r <= minDistance) {\n        // if distances are very similar, mark boundary pixels by coloring\n        // them dark blue.  \n      h = (abs(r - minDistance) < 0.12) ? 0.6667 : 0.55 + (r * .15);\n      minDistance = r;\n    }\n  }\n  \n// draw pixel  \n    var bri = 1-minDistance; bri = bri*bri*bri;   \n    hsv(h,(h == 0.6667) ? 1 : 1.21-bri,bri)\n}\n"
  },
  "preview": "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"
}