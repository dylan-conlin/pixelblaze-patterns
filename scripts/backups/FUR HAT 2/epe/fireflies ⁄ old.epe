{
  "name": "fireflies / old",
  "id": "Z6aFtRCE3AkpcP2E8",
  "sources": {
    "main": "/*\n  FireFlies\n  \n  This is a fork of the sparks pattern where each spark is:\n    - Slowed down \n    - Given a longer lifetime \n    - Allowed to loop from one end to the other\n  \n  This is a highly upvoted pattern generously contributed to the community\n  pattern library by an unknown person. Please reach out if you'd like an\n  attribution link here!\n*/\n\nsparkHue = .05       // Set the hue for each spark\nsparkSaturation = 1  // Set the saturation for each spark (0 = white)\nnumSparks = 1 + floor(pixelCount / 10)  // Scale number of sparks based on # LEDs\ndecay = .99          // Decay their energy/speed. Use .999 for slower\nmaxSpeed = .4        // The maximum initial speed of any spark / firefly\nnewThreshhold = .01  // Recycle any spark under this energy\n\nsparks = array(numSparks)\nsparkX = array(numSparks)\npixels = array(pixelCount)\n\n\nexport function beforeRender(delta) {\n  delta *= .1\n  \n  for (i = 0; i < pixelCount; i++) pixels[i] *= .9 // Air cooling\n  \n  for (i = 0; i < numSparks; i++) {\n    // Recycle dead sparks\n    if (abs(sparks[i]) <= newThreshhold) {\n      sparks[i] = (maxSpeed / 2) - random(maxSpeed)\n      sparkX[i] = random(pixelCount)\n    }\n    \n    sparks[i] *= decay  // Spark energy decay\n    sparkX[i] += sparks[i] * delta  // Advance each position \u221d its energy\n    \n    // Allow sparks to loop around each end\n    if (sparkX[i] >= pixelCount) sparkX[i] = 0\n    if (sparkX[i] < 0) sparkX[i] = pixelCount - 1\n    \n    // Heat up the pixel at this spark's X position\n    pixels[floor(sparkX[i])] += sparks[i]\n  }\n}\n\nexport function render(index) {\n  v = pixels[index]\n  hsv(sparkHue, sparkSaturation, v * v * 10)\n}\n"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAA0JCgsKCA0LCgsODg0PEyAVExISEyccHhcgLikxMC4pLSwzOko+MzZGNywtQFdBRkxOUlNSMj5aYVpQYEpRUk//2wBDAQ4ODhMREyYVFSZPNS01T09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0//wAARCACWAGQDASIAAhEBAxEB/8QAGwAAAwEBAQEBAAAAAAAAAAAAAgMEAAUBBgf/xABDEAACAQMBAwkEBggEBwAAAAABAgMABBESBRMhIjFBUWGBkaGxFHHBwgYjMkKi0SQzUmJygpKyFUNzk1Njo7PD0uH/xAAYAQADAQEAAAAAAAAAAAAAAAABAgMABP/EAC0RAAEDAQYFBAIDAQAAAAAAAAEAAhEhAxIxUWHwIkFxkcEygbHRBKEFE+Hx/9oADAMBAAIRAxEAPwD82tJjb3kM4545FfwOaPaDE3ZUqFaNEiYDrVQp8xXllGks7LIMgRSN3hGI8wKazi7ub6UhS8xLJn9oyLzdxNSMB86eU4q2F0bezubzbV7b2xAnt7dolVvvhQIiM9BxmhjmkubTaDYVRtCV5Pdu1MhH4lxU1hfz2u0H2sq5IkOvqy4Y48j4Um3ugLQWpTiWfS2eK69APkpHfUDZumMo33gqwe2O+/lebNMzym3iGd6CD1DKsuT/AFUu2WNre73mMrEGTj97Wo9Cau+j1wLe8lJXVqjCjPXrQ/CoLSHfytHqKgRSPw/dUtjyq08TppEKcUHuunsu3VtnwyZCrc3YtJyDytBMbDs+63jU0kscmxkjSIa006nwM8Gkz/3E8OypFnkW2aBWIUyLJjtAIB86uQ28WxrlTjfF2Rc8+NUZ+U+JpC0tNeZRDgRTJQ2k5truG4AyYpFcA9ODmithEYbrejliIGPifta1+XVSV5+4+lW2kFvPAinIlAuGYg9CxBl8w1VfArulUjZNFBX0Mt0YLQqzAQtEjKuOLM1syE/1DBr56ui8b3FgryucQWmpAOn67Tg/1GktmgxPRNZkiYXOrVq1XUlZsnSdqW6uMq7aGHY3A+RpVkha7h6AZVUnqyaG1kMV1FIOdWBFUbLAe7t0ZtKtcxAnqGTUn0k6fao2sBDbEyWUtrGrPNJNGyqoyThXz6ii2MQNr2hPMJl9a92O7xbRWWIgPFHJIM9aox+FT2pxLnpCsQeohTig4TeGm/hYH0lN2dKkczCVQyOFVsnHDWpPkDSIJWikLIcEoy9xUg+Ropbd4mKnBxGkhI6AwBH9wpt1CX2pdRwKCFeQgLwGlck+QNNwyTmhXskNERbpNng7suPcAfmq2+0SSy26ALouJ34dWBgfhNSuf0CJeqVz5JVVwqBxMnEzJI5PvMg9AKVxqCdURgR0UMS6mIzjksfAE06G5MdhNAuQ0kiNnsCuCPx1rVFaG7c51Rw6l49JdVPkTXltBvY7h9WNzGHx18tV+amcQZnRASMEggg4PvrqXDhdg2ejAZxLG5HSA6MB41HdRqoXDZISPJxjOVz5c3dR3citYWMaDGlHLdrFzx8MeFK7iLTr4KLeG908qOtWrVZTTrQBrlEMZkLZVVGftEYXm7cV7asRKCpwVzICOtQSK8s5/Zr2C4xndSK+Pcc0didNw+f+DKPwNU3TXonbyS4JWhdnTn0MvcwKnyNVukFttS3DJmEpC0i5PEMiluPbk0u1td7s++uTjTAqAceOpmGPINS7eN7q5VcglULHP7KLn0WgYJJyoflESABmvWud5vSwwWhSMY/d0j0WitzJPtTRbsFe4cxqSeHLyvHxpO6Zoy6KSFTW56hqx6kVraZoLqKdPtxuHHvBzRLRBuoSZEpwt2lsjJGGCQoXctzM2tVIXh1MnCmJH7QluqNo028pYscgldbEeGB30VqJrjZzwRsipGZGYE4LApq/8PjivbQpKmz7cadbXDo/QSraBgnq5/OplxqOvwU4AUtnG08q20bBXuHWLjzcT094FHZZ9nviOYQDP+4nxxR7LmFu08wI1oiMmR94Sofgani3y208iD6ptMUhz1nUB+DypzJJHRKKAe6K9YtOpbH6qMcOxFo1Qf4TK7DLb5AhzzABtXmVqeXO8IJzp5Ofdwq1GT/BiuRr1SZ68Zix6Gs6gaOiAqSVZafRm9vrdJbYxDCjXrcjiQGHR+yy+daq7P6SvsyPcRxJICsbEnPAiJFx+GtXC5/5s8AELra38aOI1XE2dai5e4LY0Q28kpyccwwPxEUMiOLi6ZTgpqJ9xOn5qYkbWtncM+Vlfdrpzzo6s2fJaoji3l9NEoDG65OCQOJmA4eFdhfxE8lzBtAOaHYxzvYZseyuYnmBJGVEir0fxGkvDuL2+9jkzFbhwGJ4shbR0djV7s5d7d21qzMsdyUicrwJUyDm8PKvLqdBe7R9nCiGZmCgDGF3gYY6uYUIP9hjn/xGRcCVbu5SWGPH1kJVs9QOv5a8sIVuNoW0DkhZJVQkdRIFayfROxOOMUg49qMKGzlEF7BM3NHIrHuOaoQawkEUlPtLpbeyuFABldgAcfdKSK39wqaFmidZ1/y3U9/P8K9dV9oYJ9gNge7NCD9Qw/eHoaN0VOaEmgyXinAbtHxFNSfTYy2+PtyI+f4Qw+agnUJPIi8ysQPGjvI4476eK3JaJZWVCekAnFEwaLVCK4jWO1tMHJlRpDx5jqK/KKxOiwQYOXdx3cg15eR7mVIwSQIo2GejUoY+bGnPG8t7bWqMrF91p6OLKtJNAfdNFT2Sb+VJ9oXMsQxG8rMoxjAJ4VqdtaKG3uFtoeJgDxu2MFiJHwT3aa1NZkFohK+Q4yvdpW80UspaQSJHK0Abmzugq5x7iK0c4jntrlhkoBIR7pSaA3QbZ+5bOrW7Z69W7/8AU0oBpI8Jg6IiW48w1Z+IpA03YcnJ4pCLMmbZoQxdELDSOIwzHPdz1NVuyz+lPk81tOB/tPQXigtrHDEcQx74x+VMHQ+7vFKRLZRWMLXMU8KMARocZOMnUE+eo66OyzJPtWBSSNWkHC5yFwQPwiohETA82pcKyrjpOQTny8xWaYcQdFiKCE2IKLGZiBqEsYB7MNn0FKMbrbrKR9W7FQesgDP9wrK4Fu6dLOp8Afzqq5gki2RYyNIDHM8rKuOKkaVPoPOsTDup8LRI6fanuUwyy6lImBcAc45RGD28POjsoPaJ31ZAWOR8jrVGYea15I0Z2fAAPrRLJk/u4XHnqorlt1ON3wBhTOO2MZ9TWqRA1WoDKTO5kcMTnCKvgoHwrplBb7R2UuvU0ZAY9omcegFcy3jEtzFExIDuFOO01ZMC+zrSYDLh5NbDnAyuM97edLaDBu8Cizmd4pO0U0XeS7O0kccrFucl0DHzJrV9N9GtnbN2rs97jacavMsgjUmQryVRQOAIrVyO/kLOyNxwMjea6G/iPtBeBEFfJxxvKdMYyQGbn6AMnyBool+pkl1YwQmOvIb8qK03q76WLH1cTav4W5B/uoVb9DkXrkQ+TfnXcScFyhBHI0bFlOCVK9xBB9a9kYyyLpBJKqoHWQAKXVFgcX9seqVfUUTTiQFaK7Yyr7XFcMQfZIt9jPOQ/N51K9hNFFLvGUaI96VBzzSbvHvzk+6mXM7DEsC6UNukMnv04+WnbUula+u9ywaOaFfcMlZCB/NmoC9fkc9+VY3bvTfhR2mPZr7I47gY/wBxKqEjT/R2RCQRbSx6QecA7zOO8jwpOy1MklyhRmjNtIXxnhpXUCf5gtNgLQ2m0LZBqWW2ic9Y5SN8TRfjHOQfgINwnQhSIiHZs0hA1rNGoPYQ+fQURQTrNLxxFCmPfyVx6+FIB+pYZ52B8jVlqxOzLtFYcldbDr5SAepp3SK6/SQVokWRCbRt2U5CzKQe+upsSGOXZe0GlkAVIWAB6+SwPig8a4qMUdXXnU5FWQW9xuo44xhrl92OVwP2Mf3DxpbZsjGMP0ms3QcFKk0sYKo5UZ6K1Aa1WujJTkqmyuXtTK8eNRVcHqw6t8tKliaIurKeS5XJGOIpVdi6dLm1vplw2biSRSecAsnHzqbjdcKYpwLw6LkDGDnuqiyjDNJMz6RbqsmMfa5ajH4s91TU9IibKacPgK6Rlcc+oMfkp34JW4qraMbwy7QhmYNIt0MsBjP2+OO+qr1Ytl7YsuAYwkPJpzgkSseH8uKl2xd+2XtxOedzHq94TB8xVm2pYbi/t5p15MllqwP2tLFfPFcvFwh3MV7BWpWM/Knt5p2ENmkTK8kC23EYzrl1jxB8KKzQNHezMwAW0WMDPEsUB9FPlVl7fRS7Wu5LZNQS6hkVVOAUiR9WOboFcqwdTDeiRj+oyg62BAHkWrCXNJiJj9omAQJnH9KGmRytGkqKcCVdLdo1A+oFLqqOJDsueYry1niUHqBWQn0HhXU4gCq5xM0UtdSzuGWbZmtGYrcCQAY5S5RRj+g1y+eulCUEuynDgsrYK9WJCQfPypLUU3kU9njvNc2tWrVVTRpG0g5ALNqChQMkk5/KqlISznQHgQwHaNUf5UuyY291a3LoTGswPHmOkgkZ7x40l3yAo5h+Q/KpmXGE4oEFVFGTZSuH5E05BTHSijB/6hrXMQtyyqoYNFEcnjgsqtw6umivMG1spFU4aM6zg4LhiPHSE8uusXTGv1KwESkScI48feXJ9+SKojvpDKJWAO7tmhHDoKlPmpEqlUt2I4FMj+pvyo7aZYoLxGzmWEIvv1o3oprOAIwlYGChtJjDKzAZLRunH95GX41e0GpobnSqpLbSKFK4BMcWCe3LA99TQhINrBzGHht5gzqeIKhgOPpRzXM0cUUMykez76IDmILZz5tU3yXS3eP+Jm0FUsxWx2jbxs5WBxDvGHOMquo+JNKRsWEy9cqHwD/nTZ7dRaWsyqeXGS5zwzqcDyXypBjZbVJdS6JHZdOeOVAOT/V604giJ2EppvNLU6TnsI8qqlZY0sZEA1LHqbjzkSN4cMVMiNI6ogyzEADtp95AFlleEHcKygEnm1AkDyNM6JA3uqAmJQ3ghWZRb/Y3UZPE/a0DV+LNahuoWt7uaCTGuN2Rsc2QcVqLfSEHYqq33dxZxWzE6ozcSnH+mpHmlQU62kMUpYdMbr4qR8aTQaIJ3miTIXRuXWPZcaaiWuRHL7tG8THpRy2aL7LbvLjNo9w2G4BirMo7wqVNf27W+4DMDrhRxjoBUH4mqbrdPJO5YFksYNBB+9piBHgWqOUHGfoKmc75qW+WRPZ4nyRHApXh0Nl/mpSI8scrquQgDuc8wzj1Ip9xMZkVm5xbqngcfClQSmO3uUA/WoFPZygfhVWzd13KQxKKOQut4553TP41NP2hJ7RALorhprqZyOwhCPWpoI3eG5ZMYjjDPnq1qOHeRWutaskbHgEVgPeq/wDyhdF+nL6Rk3VYqk7FTlD6yRgOzdqxPjvBSJdUGzYotWpbkLPzfZ0tImPjR2kRfZtzOWOm3IGOjlqynzC1I0jyRqrEkRJpXsGon1JpWiSRrXfZEmg6b8o7Of2e/guD/lyq/gc1fYsmtxPgwRezzyKQDqClVxx7JDUmzGVL0M6hlVHJB6RoNMELtcXVuuGdISDg4HIwW8lNa0AJIOXlZkgSlbTfebUu5NLLqmc4YYIyx4EVq92pJHNtKeaEkrK2849BbiR3EkVqpZ+gJH+oqZen3fChrVqdKrpNd7b70sB7NAM9oDKg9RU1xLvbiaRUVBIxOlRgKM5wOytWqbBU6J3GiZtACPaN0iDSiyuoA6BqPChSENYyz5OUkRAOghgx+UVq1AEhgPRaOI+6KJCNn3EwYjlpER0ENqb1QUN4czKf+VGPwCtWot9Z3ksfSN5roOUh2deRLGBvY7dgR0YUE+JYeFc+D9Vc/wCkP71rVqnZ4E6jwmfj38p9mq+w3EmOWHCg46CkmePcK6GzIxcfSVJLjlR3gnkYA8SpEgI9/A1q1TtzwvOh+E9li3qPlcWaIwuFJByitw7VB+NatWrraZAUDiv/2Q=="
}