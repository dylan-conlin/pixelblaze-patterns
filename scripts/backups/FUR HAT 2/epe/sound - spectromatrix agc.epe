{
  "name": "sound - spectromatrix agc",
  "id": "PFppH8JiTwXEwBruy",
  "sources": {
    "main": "//This pattern uses the sensor expansion board\nexport var frequencyData\n\nwidth = 2\nzigzag = false\n\n\naverageWindowMs = 1500\nsensitivity = 0\nfade = .95\n\naverages = array(32)\npixels = array(pixelCount)\n\nspeed = 1\n\ntargetFill = 0.07\nbrightnessFeedback = 10\n\npic = makePIController(.05, .15, 30, 0, 400)\n\n// Makes a new PI Controller\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  pic[0] = kp\n  pic[1] = ki\n  pic[2] = start\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\nfunction calcPIController(pic, err) {\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n  return pic[0] * err + pic[1] * pic[2]\n}\n\nexport function beforeRender(delta) {\n  t1 = time(.2)\n  t2 = time(.13)\n\n  sensitivity = calcPIController(pic, targetFill - brightnessFeedback / pixelCount);\n  brightnessFeedback = 0\n  \n  dw = delta / averageWindowMs\n  for (i = 0; i < 32; i++) {\n    averages[i] = max(.00001, averages[i] * (1 - dw) + frequencyData[i] * dw * sensitivity)\n  }\n\n}\n\n//interpolates values between indexes in an array\nfunction arrayLerp(a, i) {\n  var ifloor, iceil, ratio\n  ifloor = floor(i)\n  iceil = ceil(i);\n  ratio = i - ifloor;\n  return a[ifloor] * (1 - ratio) + a[iceil] * ratio\n}\n\nexport function render(index) {\n  var x, y, i, h, s, v\n  \n  y = floor(index / width)\n  x = index % width\n  if (zigzag) {\n    x = (y % 2 == 0 ? x : width - 1 - x)\n  }\n\n  i = triangle((wave(x / width + wave(t1 * speed)) + wave(y / width - wave(t1 * speed))) / 2 + t2 * speed) * 31\n\n  v = (arrayLerp(frequencyData, i) * sensitivity - arrayLerp(averages, i)) * 10 * (arrayLerp(averages, i) * 1000 + .5)\n\n  h = i / 60 + t1\n  v = v > 0 ? v * v : 0\n  s = 1 - v\n  pixels[index] = pixels[index] * fade + v\n  v = pixels[index];\n\n  brightnessFeedback += clamp(v, 0, 1)\n  hsv(h, s, v)\n}  "
  },
  "preview": "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"
}