{
  "name": "honeycomb 2D 3D",
  "id": "A5esgP2KqfwLzwbLP",
  "sources": {
    "main": "/*\n  Honeycomb 2D\n\n  This pattern is meant to be displayed on an LED matrix or other 2D surface\n  defined in the Mapper tab, but also has 1D and 3D renderers defined.\n  \n  Output demo: https://youtu.be/u9z8_XGe684\n  \n  The mapper allows us to share patterns that work in 2D or 3D space without the\n  pattern code being dependent on how the LEDs were wired or placed in space.\n  That means these three installations could all render the same pattern after\n  defining their specific LED placements in the mapper:\n    \n    1. A 8x8 matrix in a perfect grid, wired the common zigzag way\n    2. Individual pixels on a strand mounted in a triangle hexagon grid\n    3. Equal length strips wired as vertical columns on separate channels\n         of the output expander board\n  \n  To get started quickly with matrices, there's an inexpensive 8x8 on the \n  Pixelblaze store. Load the default Matrix example in the mapper and you're\n  ready to go. \n\n  This pattern builds on the example \"pulse 2D\". To best understand this one,\n  start there.\n*/\n\nexport function beforeRender(delta) {\n  tf = 5 // Overall animation duration constant. A smaller duration runs faster.\n  \n  f  = wave(time(tf * 6.6 / 65.536)) * 5 + 2 // 2 to 7; Frequency (cell density)\n  t1 = wave(time(tf * 9.8 / 65.536)) * PI2  // 0 to 2*PI; Oscillates x shift\n  t2 = wave(time(tf * 12.5 / 65.536)) * PI2 // 0 to 2*PI; Oscillates y shift\n  t3 = wave(time(tf * 9.8 / 65.536)) // Shift h: wavelength of tf * 9.8 s\n  t4 = time(tf * 0.66 / 65.536) // Shift v: 0 to 1 every 0.66 sec\n}\n\nexport function render2D(index, x, y) {\n  z = (1 + sin(x * f + t1) + cos(y * f + t2)) * .5 \n\n  /*\n    As explained in \"Matrix 2D Pulse\", z is now an egg-carton shaped surface\n    in x and y. The number of hills/valles visible (the frequency) is\n    proportional to f; f oscillates. The position of the centers in x and y \n    oscillate with t1 and t2. z's value ranges from -0.5 to 1.5.\n    \n    First, we'll derive the brightness (v) from this field.\n    \n    t4 is a 0 to 1 sawtooth, so (z + t4) now is between -0.5 and 2.5 wave(z +\n    t4) therefore cycles 0 to 1 three times, ever shifting (by t4) with respect\n    to the original egg carton.\n  */\n  v = wave(z + t4)\n  \n  // Typical concave-upward brightness scaling for perceptual aesthetics.\n  // v enters and exits as 0-1. 0 -> 0, 1 -> 1, but 0.5 -> 0.125 \n  v = v * v * v\n  \n  /*\n    Triangle will essentially double the frequency; t3 will add an \n    oscillating offset. With h in 0-1.5, hsv() \"wraps\" h, and since all\n    these functions are continuous, it's just spending extra time on the\n    hue wheel in the 0-0.5 range. Tweak this until you like how the final \n    colors progress over time, but anything based on z will make colors\n    related to the circles seen from above in the egg carton pattern.\n  */\n  h = triangle(z) / 2 + t3\n  \n  hsv(h, 1, v)\n}\n\n/*\n  When there's no map defined, Pixelblaze will call render() instead of \n  render2D() or render3D(), so it's nice to define a graceful degradation for 1D\n  strips. For many geometric patterns, you'll want to define a projection down a\n  dimension. \n*/\nexport function render(index) {\n  pct = index / pixelCount  // Transform index..pixelCount to 0..1\n  // render2D(index, pct, pct)  // Render the diagonal of a matrix\n  // render2D(index, pct, 0)    // Render the top row of a matrix\n  render2D(index, 3 * pct, 0)   // Render 3 top rows worth to make it denser\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n"
  },
  "preview": "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"
}