{
  "name": "Metaballs of Fire 2D",
  "id": "3yoiwvhBojmuurEF3",
  "sources": {
    "main": "/*\n Metaballs - blobs of fire that combine and split as\n they move around the display.  \n \n Requires 2D display and appropriate mapping function.\n\n Version  Author        Date        Comment\n 1.0.0    JEM(ZRanger1) 07/30/2021  MIT License\n\n*/ \n\n// array of vectors for each point\nvar maxPoints = 8;\nvar Points = array(maxPoints);\n\n// current settings\nexport var numPoints = 5;\nexport var speed = 0.05;\nexport var splatter = 1.75; \n\n// UI\nexport function sliderNumberOfPoints(v) {\n  var n;\n  n = floor(4 + (v * (maxPoints - 4)));\n  if (n != numPoints) {\n    numPoints = n;\n    splatter = 1.5+(numPoints - 4)/7.8;\n    initPoints();\n  }\n}\n\nexport function sliderSpeed(v) {\n  speed = 0.15 * v;\n}\n\n// create control point vectors with random position,\n// direction and speed\nfunction initPoints() {\n  for (var i = 0; i < numPoints; i++) {\n    var b = Points[i];  \n    \n    b[0] = random(1);   // x position \n    b[1] = random(1);   // y position\n\n    b[2] = -0.5+random(1);   // x velocity\n    b[3] = -0.5+random(1);   // y velocity\n  }\n}\n\n// allocate and initialize control point descriptors\nfunction createPoints() {\n  for (var i = 0; i < maxPoints; i++) {  \n    Points[i] = array(4);\n  }\n  \n  initPoints();\n}\n\n// move points, bouncing them off the \"walls\" of the display.\nfunction bounce() {\n  for (var i = 0; i < numPoints; i++) {\n    var b = Points[i];\n    \n// move point according to velocity component of its vector \n    b[0] += b[2] * speed;\n    b[1] += b[3] * speed;\n\n// bounce off walls by flipping vector element sign when we hit.\n// If we hit a wall, we exit early, trading precision in\n// corners for speed.  We'll catch it in a frame or two anyway\n    if (b[0] < 0) { b[0] = 0; b[2] = -b[2]; continue; } \n    if (b[1] < 0) { b[1] = 0; b[3] = -b[3]; continue; }\n\n    if (b[0] > 1) { b[0] = 1; b[2] = -b[2]; continue; }\n    if (b[1] > 1) { b[1] = 1; b[3] = -b[3]; continue; }\n  }\n}\n\n// initialize animated points\ncreatePoints();\n\n// move the control points around the display.\nexport function beforeRender(delta) {\n  bounce();\n}\n\n// calculate voronoi distance field -- for every pixel, find the distance\n// to the nearest control point, and choose to color (or not) based on the\n// minimum distances. \nexport function render2D(index,x,y) {\n  var minDistance,i,r,h,v;\n  \n  \n  // this is just like normal voronoi distance, except instead of comparing pairs\n  // of control points, we compare their product to build the metaball distance field.\n  minDistance = 1;   \n  for (i = 0; i < numPoints; i++) {\n    r = minDistance * hypot(Points[i][0] - x,Points[i][1] - y) * splatter;\n    minDistance = min(r,minDistance);\n  }\n  \n  if (minDistance >= 0.082) {\n    rgb(0,0,0);\n  } else {\n    hsv(0.082-minDistance,1,1.2-(wave(5*minDistance)));\n  }\n}\n"
  },
  "preview": "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"
}