{
  "name": "fast pulse 2D 3D \ud83d\ude00",
  "id": "BvZoMSk6wu37yZ8zY",
  "sources": {
    "main": "/*\n  Fast pulse 2D/3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\n\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(.1)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x \u2212 x1) + b(y \u2212 y1) + c(z \u2212 z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 5)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < .8\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lengths. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}