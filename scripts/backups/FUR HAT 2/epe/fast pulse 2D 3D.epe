{
  "name": "fast pulse 2D 3D",
  "id": "BvZoMSk6wu37yZ8zY",
  "sources": {
    "main": "/*\n  Fast pulse 2D/3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\n\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(.1)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x \u2212 x1) + b(y \u2212 y1) + c(z \u2212 z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 5)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < .8\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lengths. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}