{
  "name": "chaos shimmer 2D",
  "id": "kqrnYX5ESCewGfLq7",
  "sources": {
    "main": "// Swirly plasma that occasionally explodes into weirdness.\n// Requires Pixelblaze 3 with v3.17 or newer firmware.\n// 7/15/21 - ZRanger1\n\nvar chaosLevel = 0.2;  // more is more\nvar theta;             // current rotation angle\n\nexport function beforeRender(delta) {\n  t1 = wave(time(.5)) * 40;  // scale time for sin and cos\n  \n  mx = 0.5+(cos(t1) * 0.3);\n  my = 0.5+(sin(t1) * 0.5); \n\n  theta = PI2 * time(0.25);\n  resetTransform();\n  rotate(theta);\n}\n\n// vectors for calculation\nvar mx,my;\nvar pr,pg,pb;\nvar dotp;\nexport function render2D(index,x,y) {\n  pr = x; pg = y; pb = mx;\n  \n  // perturb coords w/our time-based function a few times\n //  and use the result as RGB color.   This is a common\n // GLSL shader trick.  The upside is that additive color\n // mixing is trivial, the downside is that precise control\n // of output color is much more work.  Here, I don't even try.\n // It's... pink.  And blue!\n  for (var i = 0; i < 5; i++) {\n    dotp = (pr * pr + pg * pg + pb * pb);\n    pr = abs(pr)/dotp - 1;\n    pb = abs(pg)/dotp - 1;\n    pg = abs(pb)/dotp - my * chaosLevel;\n  }\n  \n  // gamma correct and display\n  rgb(pr*pr,pg*pg,pb*pb);\n}"
  },
  "preview": "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"
}