{
  "name": "Sound & Music Spectrum Visualizer",
  "id": "Zi8oziMnhdZQLTiHh",
  "sources": {
    "main": "/*  \n  Requires sensor board and intended for use with 1D light strips. The brightness of each section \n  of the strip corresponds to a given audio frequency range. Sensitivity is adjusted automatically.\n  Each main frequency band (low, mid, high) is equalized using variables, so you may need to adjust\n  them to account for your room setup if you see certain sections staying dark/bright for too long.\n  \n  Created by jborcha. Built on the shoulders of the Pixelblaze community.\n*/ \n  \n/* -----------------------------------------Variables------------------------------------------ */\n  \n  var sections = 8   // Total number of sections to split the strip into (recommended range: 6-12)\n  var sectPixels = pixelCount / sections  // Number of pixels in each section\n  var refreshRate = 180  // How often to refresh the sound frequency data (higher values produce less flicker)\n  var targetMax = .2    // Percentage of the strip the sensitivity will try to have lit up simultaneously\n  \n  export var bassAdjust = 0.05 // EQ multiplier for low/bass frequencies\n  export var midLowAdjust = 1.00  // EQ multiplier for lower-mid frequencies\n  export var midHighAdjust = 1.75  // EQ multiplier for upper-mid frequencies\n  export var trebAdjust = 2.0  // EQ multiplier for high/treble frequencies\n  \n  export var midLow = ceil(sections * 0.2)  // Starting section for lower-mid EQ\n  export var midHigh = ceil(sections * 0.3)  // Starting section for upper-mid EQ\n  export var trebStart = ceil(sections * 0.7)   // Starting section for treble EQ\n\n  var timer = 0\n  var sat = 1\n  var hue\n\n/* ----------------------------------------Array Variables------------------------------------- */\n\n  export var freqAvgs = array(16)\t    // Reduced frequency values (average of every 2 freqs)\n  var pixels = array(pixelCount + 1)\t// Calculated brightness of each pixel\n  var lastVal = array(pixelCount + 1)     // Calculated brightness of each pixel from the previous frame\n  var startSection = array(sections)\t// Starting pixel of each section\n  var endSection = array(sections)\t\t// Ending pixel of each section\n  \n  // Find start/end points for each section\n  for(i = 0; i < sections; i++) {\n\t  startSection[i] = round(sectPixels * i)\n\t  endSection[i] = round(startSection[i] + sectPixels - 1)\n  }\n\n/* ----------------------------------------UI Sliders----------------------------------------- */\n  \n  // Slider to enable/disable rainbow coloring\n  var  rainbow = 1\n  export function sliderRainbow(setRainbow) {\n      rainbow = setRainbow > 0.2   // Enable rainbow effect if slider is not set to zero\n  }\n\n  \n  // Slider to enable/disable color cycling when rainbow is disabled\n  var colorShift = 0\n  export function sliderColorShift(setColorShift) {\n      colorShift = setColorShift > 0.2  // Convert slider value to 0.15..2.0\n  }\n  \n  export var  color = 0.667\n  export function sliderColor(setColor) {\n      if (setColor > 0.8) {\n        color = 0.9\n      } else if (setColor > 0.6) {\n        color = 0.695\n      } else if (setColor > 0.35) {\n        color = 0.667\n      } else if (setColor > 0.15) {\n        color = 0.334\n      } else {\n        color = 0\n      }\n  }\n\n/* ----------------------------------------PI Controller----------------------------------------- */\n\n  export var frequencyData\n  \n  export var sens\n  var vFeedback = 0\t\t// Total brightness level of all pixels in each frame (for feedback into the PI controller)\n  \n  // Create PI controller to dynamically adjust mic sensitivity to account for current volume levels\n  var pic = makePIController(.0125, 2, 500, 0, 700)\n  function makePIController(kp, ki, start, min, max) {\n    var pic = array(5)\n    pic[0] = kp\n    pic[1] = ki\n    pic[2] = start\n    pic[3] = min\n    pic[4] = max\n    return pic\n  }\n  function calcPIController(pic, err) {\n    pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n    return max(pic[0] * err + pic[1] * pic[2], .3)\n  }\n\n/* ----------------------------------------Frequency Data----------------------------------------- */\n\nfunction getFreqs(sens) {\n  \n  // Find the average every two frequencies and apply sensitivity adjustments\n  var sum = 0\n  for (var i = 0; i < frequencyData.length; i++) {\n    sum = sum + frequencyData[i]\n    if ((i + 1) % 2 == 0) {\n      freqAvgs[i / 2] = (sum / 2) * sens\n      sum = 0;\n    }\n  }\n  \n  // Apply EQ adjustments to the reduced frequency data\n  for (var i = 0; i < midLow; i++) {\n    freqAvgs[i] *= bassAdjust\n  }\n  for (var i = midLow; i < midHigh; i++) {\n    freqAvgs[i] *= midLowAdjust\n  }\n  for (var i = midHigh; i < trebStart; i++) {\n    freqAvgs[i] *= midHighAdjust\n  }\n  for (var i = trebStart; i <= sections ; i++) {\n    freqAvgs[i] *= trebAdjust\n  }\n  \n  for (var i = 0; i < freqAvgs.length; i++) {\n    if (freqAvgs[i] < 1) {\n      freqAvgs[i] = 0\n    } else {\n      freqAvgs[i] = clamp(ceil(freqAvgs[i]),0,10) * 0.5\n    }\n  }\n  \n  return freqAvgs\n}\n\n/* ----------------------------------------beforeRender----------------------------------------- */\n\nexport function beforeRender(delta) {\n  \n  // Increase timer by number of miliseconds since previous frame\n  timer+= delta\n  \n  // Generate wave with the Color Shift slider value\n  hueT = triangle(time(0.5))\n  \n  // Calculate sensitivity from PI controller and then reset brightness feedback\n  sens = calcPIController(pic, targetMax - vFeedback / pixelCount)\n  vFeedback = 0\n  \n  // Update frequency data whenever the timer surpasses the refreshRate\n  if (timer > refreshRate) {\n  \tfreqAvgs = getFreqs(sens)\n  \ttimer = 0\n  }\n  \n  // Set brightness for pixels in each frequency section\n  for (s = 0; s < sections; s++) {\n\t  for (x = startSection[s]; x <= endSection[s]; x++) {\n\t\t  pixels[x] = (freqAvgs[s] + (lastVal[x] * 4)) / 5\n\t\t  lastVal[x] = pixels[x]\n\t\t  // Update brightness feedback for use in calculating sensitivity\n\t\t  vFeedback += pixels[x]\n\t  }\n  }\n}\n\n/* ----------------------------------------render----------------------------------------- */\n\nexport function render(index) {\n  \n  // Set brightness for the current pixel from calculated values stored in the array\n  v = pixels[index]\n  \n  // Limit final brightness to values from 0..1 to prevent potential issues from high brightness\n  v = clamp(v, 0, 1)\n  \n  // Use rainbow across strip if the slider value is greater than zero\n  if (rainbow > 0){\n    hue = 1 - (triangle((sections / (sections * 1.75)) * index / pixelCount)  + hueT)\n  }\n  // If rainbow is off and color shift is on, cycle through color shades\n  else if (colorShift > 0) {\n    hue = triangle((sections / 4) * index / pixelCount) * .02 + hueT\n  }\n  else {\n    hue = color\n  }\n  \n  hsv(hue, sat, v)\n}"
  },
  "preview": "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"
}