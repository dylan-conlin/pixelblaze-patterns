{
  "name": "GlowFlow (3D coord transform API port)",
  "id": "i5gR8RNajvDZiqvnE",
  "sources": {
    "main": "/*\nThis pattern is a port of GlowFlow by Roger - updated to use\nthe coordinate transformation API. \nhttps://hackaday.io/project/166871-glow-flow\nhttps://newscrewdriver.com/tag/glow-flow/\nhttps://github.com/Roger-random/glowflow\n\n---------------------------------\n\nGlow Flow\n\nA Pixelblaze pattern to illuminate half of a 3D mapped volume based on value of\naccelerometer on the Pixelblaze sensor expansion board. Renders illusion of a\nhalf-full container of glowing fluid that flows to the bottom. Built on top of\n\"Accelerometer Tilt 3D\" with sound-reactive elements copied from existing\nPixelblaze sample pattern \"blinkfade\". The intent is to make the colorful\n'liquid' look like it is fizzing and popping in reaction to sound.\n\nRequires:\n* Pixelblaze with sensor expansion board\n* Pixel Mapper filled in with 3D (X,Y,Z) coordinates of LED pixels\n\nRoger Cheng 2019\nhttps://newscrewdriver.com\nGithub: Roger-random / Twitter: @Regorlas\n\nBen Hencke 2021\n* Updated for transformation API\n* A simple IIR averaging filter is used to smooth out \n  accelerometer samples.\n* Added some flags for controling which sensors are used\n* Optional rotation for PB cube stand\n\n*/\n\nexport var energyAverage\nexport var accelerometer\nexport var light\n\n//larger filterFactor values are smoother but slower to respond\nvar filterFactor = .7\nvar rotateForPBCube = false\nvar useSound = true\nvar useLight = false\n\n// PI Controller to dynamically adjust microphone sensitivity based on ambient level\nvar targetFill = 0.01\nvar pic = makePIController(.05, .15, 1000, 0, 1000)\n\n\n// Polar angle is how far the vector is tilted, relative to +Z axis. (On a globe, it is latitude.)\n// 0 = vector is pointing up, aligned with +Z\n// PI = vector is pointing down, aligned with -Z\nfunction polarAngle(x,y,z) {\n  polar = 0\n\n  if (z == 0) {\n    // Z = 0 means vector is somewhere on XY plane.\n    // Hard code answer is faster and avoids divide by zero.\n    polar = PI/2\n  } else if (z > 0) {\n    // +Z = between 0 and PI/2\n    polar = atan(sqrt(pow(x,2)+pow(y,2))/z)\n  } else {\n    // -Z = between PI/2 and PI\n    polar = PI-atan(sqrt(pow(x,2)+pow(y,2))/-z)\n  }\n\n  return polar\n}\n\n// Azimuth is direction of polar angle projected on XY plane. (On a globe, it is longitude.)\n// 0 = vector is aligned with +X\n// PI/2 = vector is aligned with +Y\n// -PI/2 = vector is aligned with -Y\nfunction azimuthAngle(x,y) {\n  azimuth = 0\n\n  if (x == 0) {\n    // X of zero means vector is aligned with Y axis one way or another.\n    // Hard code answer is faster and avoids divide by zero\n    if (y >= 0) {\n      // Aligned with +Y axis\n      azimuth = PI/2\n    } else {\n      // Aligned with -Y axis\n      azimuth = -PI/2\n    }\n  } else if (x > 0) {\n    // +X = somewhere between -PI/2 and PI/2\n    azimuth = atan(y/x)\n  } else {\n    // -X = somewhere between PI and PI/2 for +Y, between -PI and -PI/2 for -Y\n    azimuth = PI-atan(y/-x)\n  }\n\n  return azimuth\n}\n\n\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  pic[0] = kp\n  pic[1] = ki\n  pic[2] = start\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\nfunction calcPIController(pic, err) {\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n  return max(pic[0] * err + pic[1] * pic[2],.3)\n}\n\n\n// Values controlled via PI Controller\nvar vals = array(pixelCount)\nvar sensitivity\n\n// Feedback given to PI Controller for adaptation\nvar brightnessFeedback = 0\n\n// HSV value multiplier adjusted based on light sensor\nexport var lightAdj\n\nexport var aa, pa //azimuth angle and polar angle for the animation frame\nexport var x, y, z, gForce\n\nexport function beforeRender(delta) {\n  t2 = time(.01)\n  \n  //apply an averaging filter to the accelerometer readings\n  //also, for my build I'm swapping around the x and y axis\n  //and swapping which way is up or forward by negating the \n  //accelerometer sample\n  x = (x * filterFactor) + (accelerometer[1] * (1-filterFactor))\n  y = (y * filterFactor) + (-accelerometer[0] * (1-filterFactor))\n  z = (z * filterFactor) + (-accelerometer[2] * (1-filterFactor))\n  \n  aa = azimuthAngle(x, z) - PI/2\n  pa = polarAngle(x, z, y) - PI/2\n\n  //accelerometer samples are right about 1/50th of a G\n  gForce = hypot3(x, y, z) * 50 \n  \n  resetTransform()\n  translate3D(-.5, -.5, -.5)\n  \n  //re-orient the cube to stand on it's corner\n  if (rotateForPBCube) {\n    rotateZ(PI*.25)\n    rotateX(PI*.3)\n  }\n  \n  //apply rotations based on accelerometer\n  rotateY(aa)\n  rotateX(-pa)\n  \n  if (useSound) {\n    // Update PI Controller & associated values\n    sensitivity = calcPIController(pic, targetFill - brightnessFeedback / pixelCount);\n    brightnessFeedback = 0\n    for (i = 0; i < pixelCount; i++) {\n      vals[i] -= .001 * delta + abs(energyAverage * sensitivity / 5000)\n      if (vals[i] <= 0) {\n        vals[i] = energyAverage * sensitivity * random(1)\n      }\n    }\n  }\n  \n  // Calculate lighting adjustment factor\n  if (useLight)\n    lightAdj = clamp(light,0.01,1.0) // Adjust 1.0 downwards if power supply can't handle full power\n  else\n    lightAdj = 1  \n\n}\n\n\nexport function render3D(index, x, y, z) {\n  var hue, saturation, value, micV\n  \n  if (useSound) {\n    // Microphone controlled value for this pixel\n    micV = vals[index]*3\n    micV = micV * micV\n    brightnessFeedback += clamp(micV,0,1)\n  } else {\n    micV = 0\n  }\n\n  // Rendering based on Z axis in transformed space\n  hue = 1\n  saturation = 1 - clamp(micV,0,0.1)\n  value = 1\n\n  if (z < 0) {\n    // Colorful multilayered liquid in the bottom of container\n    hue = clamp(-z,0,0.95)\n  } else {\n    // Orange fades to black as we get further above surface of liquid\n    hue = 0.01\n    value = 1-z\n    value = value*value*value //sharpen the horizon fade a bit\n  }\n\n  // Adjust for ambient lighting level\n  value = value * lightAdj\n\n  hsv(hue, saturation, value)\n  \n}\n"
  },
  "preview": "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"
}