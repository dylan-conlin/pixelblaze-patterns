{
  "name": "xorcery 2D 3D",
  "id": "ro9Gei457fBoxop9Y",
  "sources": {
    "main": "/*\n  Xorcery 2D/3D\n\n  An XOR in 2D/3D space based on the 'block reflections' pattern. To think\n  through the math, start with the comments on that pattern. The `^` operator is\n  bitwise exclusive-or (XOR). Combined with modulus (`%`) and `triangle()`, this\n  pattern renders interesting kaleidoscopic blocks in 1D/2D/3D.\n  \n  Output demo: https://youtu.be/7PQGV59N5hM\n*/\n\nexport function beforeRender(delta) {\n  t1 = time(.1)\n  t2 = time(.1) * PI2\n  t3 = time(.5)\n  t4 = time(.2) * PI2\n}\n\nexport function render3D(index, x, y, z) {\n  m = .3 + triangle(t1) * .2\n  h = sin(t2)\n  h += (wave((5 * (x - .5) ^ 5 * (y - .5) ^ 5 * (z - .5)) / 50 * \n    (triangle(t3) * 10 + 4 * sin(t4)) % m))\n  v = (abs(h) + abs(m) + t1) % 1\n  v = triangle(v * v)\n  h = triangle(h) / 5 + (x + y + z) / 3 + t1\n  v = v * v * v\n\n  hsv(h, 1, v)\n}\n\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\n// Repeat the top line of the matrix 4X for a more granular 1D\nexport function render(index) {\n  pct = index / pixelCount\n  render3D(index, 4 * pct, 0, 0)\n}\n"
  },
  "preview": "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"
}