{
  "name": "ripple color slider 2D",
  "id": "xx4bgNpmxSSvfp7Cf",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nexport var color = 0;\nvar theta = 0;\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\n// how quickly the waves die down\nexport function sliderColor(v) {\n  color = v;\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n// early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // pick a blue/green gradient color based on \"height\", and draw the\n  // region that's inside our radius.\n  hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n}"
  },
  "preview": "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"
}