{
  "name": "rippletank blue 2D",
  "id": "L2H5A5YRHvEwMxHFo",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nvar theta = 0;\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n// early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // pick a blue/green gradient color based on \"height\", and draw the\n  // region that's inside our radius.\n  hsv(0.6667-(0.02*s),1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n}"
  },
  "preview": "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"
}