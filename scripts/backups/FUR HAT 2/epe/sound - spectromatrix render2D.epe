{
  "name": "sound - spectromatrix render2D",
  "id": "6xaEK92Bivd3AuqKy",
  "sources": {
    "main": "//This pattern uses the sensor expansion board\nexport var frequencyData\n\nwidth = 14\nzigzag = true\n\n\naverageWindowMs = 1500\nsensitivity = 0\nfade = .85\n\naverages = array(32)\npixels = array(pixelCount)\n\nspeed = 2\n\ntargetFill = 0.07\nbrightnessFeedback = 0\n\npic = makePIController(.05, .15, 30, 0, 400)\n\n// Makes a new PI Controller\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  pic[0] = kp\n  pic[1] = ki\n  pic[2] = start\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\nfunction calcPIController(pic, err) {\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n  return pic[0] * err + pic[1] * pic[2]\n}\n\nexport function beforeRender(delta) {\n  t1 = time(.2)\n  t2 = time(.13)\n\n  sensitivity = calcPIController(pic, targetFill - brightnessFeedback / pixelCount);\n  brightnessFeedback = 0\n  \n  dw = delta / averageWindowMs\n  for (i = 0; i < 32; i++) {\n    averages[i] = max(.00001, averages[i] * (1 - dw) + frequencyData[i] * dw * sensitivity)\n  }\n\n}\n\n//interpolates values between indexes in an array\nfunction arrayLerp(a, i) {\n  var ifloor, iceil, ratio\n  ifloor = floor(i)\n  iceil = ceil(i);\n  ratio = i - ifloor;\n  return a[ifloor] * (1 - ratio) + a[iceil] * ratio\n}\n\nexport function render2D(index, x, y) {\n  var i, h, s, v\n\n  i = triangle((wave(x + wave(t1 * speed)) + wave(y - wave(t1 * speed))) / 2 + t2 * speed) * 31\n\n  v = (arrayLerp(frequencyData, i) * sensitivity - arrayLerp(averages, i)) * 10 * (arrayLerp(averages, i) * 1000 + .5)\n\n  h = i / 60 + t1\n  v = v > 0 ? v * v : 0\n  s = 1 - v\n  pixels[index] = pixels[index] * fade + v\n  v = pixels[index];\n\n  brightnessFeedback += clamp(v, 0, 1)\n  hsv(h, s, v)\n}\n\n//this pixel mapper shim will work without a pixel map or on older Pixelblazes\n//it calculates x/y based on a 2D LED matrix display given a know width and height\nexport function render(index) {\n  var width = 8, height = 8\n  var y = floor(index / width)\n  var x = index % width\n  //comment out this next line if you don't have zigzag wiring:\n  x = (y % 2 == 0 ? x : width - 1 - x)\n  x /= width\n  y /= height\n  render2D(index, x, y)\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gIoSUNDX1BST0ZJTEUAAQEAAAIYAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAAHRyWFlaAAABZAAAABRnWFlaAAABeAAAABRiWFlaAAABjAAAABRyVFJDAAABoAAAAChnVFJDAAABoAAAAChiVFJDAAABoAAAACh3dHB0AAAByAAAABRjcHJ0AAAB3AAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAFgAAAAcAHMAUgBHAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z3BhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABYWVogAAAAAAAA9tYAAQAAAADTLW1sdWMAAAAAAAAAAQAAAAxlblVTAAAAIAAAABwARwBvAG8AZwBsAGUAIABJAG4AYwAuACAAMgAwADEANv/bAEMAAwICAwICAwMDAwQDAwQFCAUFBAQFCgcHBggMCgwMCwoLCw0OEhANDhEOCwsQFhARExQVFRUMDxcYFhQYEhQVFP/bAEMBAwQEBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP/AABEIAJYAZAMBIgACEQEDEQH/xAAVAAEBAAAAAAAAAAAAAAAAAAAACf/EABQQAQAAAAAAAAAAAAAAAAAAAAD/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8AlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//2Q=="
}