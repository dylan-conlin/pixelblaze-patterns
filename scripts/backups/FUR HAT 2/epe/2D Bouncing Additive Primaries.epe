{
  "name": "2D Bouncing Additive Primaries",
  "id": "HgTWXvGuhoHPfrh3m",
  "sources": {
    "main": "var radius = 0.5; export function sliderBallRadius(v) { radius = v; } \r\nvar speed = 0.5; export function sliderBallSpeed(v) { speed = v; } \r\n\r\nbr = [ 1, 0, 0 ]; bg = [ 0, 1, 0 ]; bb = [ 0, 0, 1 ];\r\n\r\nexport var bx = array(3); bx.forEach((v, i, a) => { a[i] = (i / 3) + random(1) / 3; });\r\nexport var by = array(3); by.forEach((v, i, a) => { a[i] = (i / 3) + random(1) / 3; });\r\nexport var vx = array(3); vx.forEach((v, i, a) => { a[i] = (1/4) + (1 - random(2)) / 6; });\r\nexport var vy = array(3); vy.forEach((v, i, a) => { a[i] = /*(1/4)*/vx[i] + (1 - random(2)) / 6; });\r\n\r\nexport function beforeRender(delta) { \r\n  bx.forEach((v, i, a) => { a[i] += speed * vx[i]; if ((a[i] >= 1) || (a[i] <= 0)) { a[i] = clamp(a[i], 0, 1); vx[i] *= -1; } });\r\n  by.forEach((v, i, a) => { a[i] += speed * vy[i]; if ((a[i] >= 1) || (a[i] <= 0)) { a[i] = clamp(a[i], 0, 1); vy[i] *= -1; } });\r\n}\r\n\r\nexport function render2D(index,x,y) { \r\n  r = 0; g = 0; b = 0;\r\n  for (var ball = 0; ball < 3; ball++) {\r\n    var distance = hypot(x-bx[ball], y-by[ball]);\r\n    if (distance < radius) {\r\n      shade = pow(1 - distance/radius, 2);\r\n      r += shade * br[ball];\r\n      g += shade * bg[ball];\r\n      b += shade * bb[ball];\r\n    }\r\n  }\r\n   \r\n  rgb(r, g, b);\r\n} \r\n"
  },
  "preview": "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"
}