{
  "name": "2D Bouncing Additive Primaries",
  "id": "75oM7uDKhXCrpzLxg",
  "sources": {
    "main": "var radius = 0.5; export function sliderBallRadius(v) { radius = v; } \r\nvar speed = 0.5; export function sliderBallSpeed(v) { speed = v; } \r\n\r\nbr = [ 1, 0, 0 ]; bg = [ 0, 1, 0 ]; bb = [ 0, 0, 1 ];\r\n\r\nexport var bx = array(3); bx.forEach((v, i, a) => { a[i] = (i / 3) + random(1) / 3; });\r\nexport var by = array(3); by.forEach((v, i, a) => { a[i] = (i / 3) + random(1) / 3; });\r\nexport var vx = array(3); vx.forEach((v, i, a) => { a[i] = (1/4) + (1 - random(2)) / 6; });\r\nexport var vy = array(3); vy.forEach((v, i, a) => { a[i] = /*(1/4)*/vx[i] + (1 - random(2)) / 6; });\r\n\r\nexport function beforeRender(delta) { \r\n  bx.forEach((v, i, a) => { a[i] += speed * vx[i]; if ((a[i] >= 1) || (a[i] <= 0)) { a[i] = clamp(a[i], 0, 1); vx[i] *= -1; } });\r\n  by.forEach((v, i, a) => { a[i] += speed * vy[i]; if ((a[i] >= 1) || (a[i] <= 0)) { a[i] = clamp(a[i], 0, 1); vy[i] *= -1; } });\r\n}\r\n\r\nexport function render2D(index,x,y) { \r\n  r = 0; g = 0; b = 0;\r\n  for (var ball = 0; ball < 3; ball++) {\r\n    var distance = hypot(x-bx[ball], y-by[ball]);\r\n    if (distance < radius) {\r\n      shade = pow(1 - distance/radius, 2);\r\n      r += shade * br[ball];\r\n      g += shade * bg[ball];\r\n      b += shade * bb[ball];\r\n    }\r\n  }\r\n   \r\n  rgb(r, g, b);\r\n} \r\n"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gIoSUNDX1BST0ZJTEUAAQEAAAIYAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAAHRyWFlaAAABZAAAABRnWFlaAAABeAAAABRiWFlaAAABjAAAABRyVFJDAAABoAAAAChnVFJDAAABoAAAAChiVFJDAAABoAAAACh3dHB0AAAByAAAABRjcHJ0AAAB3AAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAFgAAAAcAHMAUgBHAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z3BhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABYWVogAAAAAAAA9tYAAQAAAADTLW1sdWMAAAAAAAAAAQAAAAxlblVTAAAAIAAAABwARwBvAG8AZwBsAGUAIABJAG4AYwAuACAAMgAwADEANv/bAEMACwgICggHCwoJCg0MCw0RHBIRDw8RIhkaFBwpJCsqKCQnJy0yQDctMD0wJyc4TDk9Q0VISUgrNk9VTkZUQEdIRf/bAEMBDA0NEQ8RIRISIUUuJy5FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRf/AABEIAJYAZAMBIgACEQEDEQH/xAAaAAADAQEBAQAAAAAAAAAAAAAAAQIDBAUH/8QAQxAAAQMCAwUEBgcECgMAAAAAAQIDEQASBCExExRBUXEiMmHBBYGRobHwIzRCcnPR4RUkMzUlRUZSU2KCg5LxVGOi/8QAGAEAAwEBAAAAAAAAAAAAAAAAAAECAwT/xAAxEQABAgMGBQMDBAMAAAAAAAABABECQfASITFRkaEDYcHR4VKBsSIycQQTYvEUQlP/2gAMAwEAAhEDEQA/APl6Hng6tSdneuAoW5J8R0pBajhtlkWtZAz1086zTjHEKUsAAr1Nvw6Uw+6Wt3CDaTNsZ9OnGqvzEvOiGh9G+lfC6C66pxC1JNzcgRormT1ph1wLUqx0qcgESYTyjpWe9vrUl21Z2ORI989eNWnFYhC1OlLoD+QN0dI6cKm9sQlZh/571NASCgM7J8pi7jz06caCErlZZxH0cjvHP/vjQE4gs7ls3b+/ZPDlHLj1qit15QfAdKcPIUbvmJ40H8jbvpkm38anPTJQpDYShRaxPbI46fnHCqDTe8BvZvA2zmRHTp51UKQdusO2YggJ7Xv8Y4Ut0JG5m4PRdJOWunSPfUuBXnVF4wu8YT1zWaW2lMvEB4BJ4xJ5frSW00GWSVOQTwAkc/0rUstOy8CsIYJBB1Vy/XlRu+HRDqlqKHoAAGaeZ9unOnc7NVbJtFhbrH5UltIxkbUA294js9KwSlOxeh8DPIEZq5Eda2ODZB3cvJDkXbT7Mzp7OPOoLOGVKw7ARItIzXyI8+VAZvtMq95JvGb7dHFU0n6JP72ynLuqBkUVnujK4UnFNIBHdXMiiszZfwoPG4kJYRlAx6gSbUf8fhypjHLKLbAT0+cqE4lKFKcBBU5EiO705UwtBa3YEWnO7jzjpWzfxFVdmrEMbylPTRXv6iQdmYE3QT7/ADpjGSSVNOWqi2FEezyp7yHFB63+DMgE9qefnVDE7NReLRIfgJFx7McsqVk4WRVdFNktLDr3We1Km9nsHNrExJjXly86orbWbktvWJm83nLL5mmG1lvcQyouxcDcec6cqZWp47dOHXs8PIX2j89aGNVPZMgvfz8qQhokKWh8IUU2EK+fVS3VJFlrget0yjX4R76olTcPrw7mzxBARny+PhRur20GBLKw/bPCOelDtM123UlqGk1JwjSrilToQCZmJPL1zrS3JoAEuOWmIyEjn+nOi0uoceSh0JYJCpAnw6eVJSNm226ouBL0RCRPjPPzpPzKdqB/HL85oOBSFWl+FR3oynl7ONRuaYMPgcgRmrl88Ko4cjEbsXCFRMxlP/XGsQlK23Fh6LMgCMzyinaHqKkRQtOXnVWMGkgTimkniDMiihvDhbaVb02meCpkUUPBOI6LKKK8sdvCELeDrqhZcoZ5aco5UhtThNmItnlnHLpSTjH0OLcSRc54aco5RQH39huw7nThMx0nOqEET/ZlXZbNBlXhbqU8p5lcGEjtRx5z500qcDrylBy1Y7EE68I8qk4zErWlwhUtzPjPenqNapOLxCVlyxz6Ui2CRB+zHPwqLBb7BrzSs8P01V6gNLOE2Gzd20yBPDpy86tQQtxtaUP7JA+l7XHy8aSS+WxhtisqtmM4tmdOU++rK3HLnNi8UtlV8qzmM+njQRfhuE2Eq3mkA0laluIxOyXGyhXEfHwpBoWhkpfGLjvTlEz7POqIKUtuKYetdUmyDnMZdfCqGGBxAw5aWF2TMiIn4edDgT+O6q+XWrlB2CgpaEvhpE7RJOaifnOkSwgIWoOltRGzTxTHP5zqgy04y+5s3AGiQQSJPzx1ikvDsIZYc7f0pAgRI+eHOnahdrWybx4vtt1ShId2Rdh62NqdNZj9az2jSkOKSsJSCZQRmueXzlWxweHGM3cugJtnaE9meU1gllhTLzm1CVNmEpOq+lIRhvvMpZpvxPVQ9pqkp2iEqTi2mxA7BmR7qKpnA4V1pK141ptShmlUyPdRWZ4xBItHRKzxDfbUN491D77gQiXBpbknkRyioGKcOB3UJEXTMZxrHtzqkPLDi1JWm9cBXZEJ8R0oCzsNlJLOsx2unnVtBknZ4mQrHRbKx7zmIYdtV9CO1H2jxJ68apvGupffdO0h7JEE9k/ZjpwqS66pxClJUVokJg5K5k9aaVu3rUG3CpcA9rTlHShoMGKVni5CpaXqApw4HdIcvm6JMWzpHKc+taOOF11t0KetZkOEqzmM/bxqQFFmwYd22JifHSOXGmpKlGTh3TbIm751407uf9++iREQo+2uAQEpC1OKU9Y6QEdr2dY4VIwoKAwVLDsT4RPLl50yiAknDvQoiM8/1jhTDR2wTsVBVvq6fPGm5zrXVS4n17ywOak4ZtYUsKXa2SFTx+eNI4NpKULK1FLhAAgZUBtJaeNjgAJmYk/PGkttsNMkqXaSIAAkc58qbx5136JWuHN6l12QcCgO7LaCbbruGtZ7sgocUHALCQB/erUto3y0vAKt70dnpWCQ2WXiH4g5JIzVQ8WYqrkCLh5mu+ytGCQtCVHEISSJgzlRVNNIU0k74hGXdVqKKPq9QUmLhv8AcdFknFPoUpwBMuf5R6o6UwvEFvdQjxiM41jzoGPeBJhGf+XTpTGPei21JPThy6UOc6rVWIYHvGXnSSveMQ4pLtpIZkKIPtnrVB7EJUXSlcPQEwoiOXsqR6QdOezkDvRx+eNUMe5MqZXaqLYURHQ/ClLGq7KbMDYb80Bt4o3TZrvi6LjETpHv61RC3DtbXbWZCjdn8njUh9ak7Pd17SNJMa8uXnTLiVkq3d+1JNxuM/POg/mj3lkq+l7vk+2qoICDtVh+18gCFZ/rHCgYYW7qdoHIu17OunSPfStayUvD4ixRTbCs8tf0o3ZCvoyy8HbefZ1n2R76WFCWHnNO1dj8++iZaYXLoLwDJIgxJ5e/XlRssKiHFLdtegQAJA4+/TnSOEw67lJS+EgmZifD1zrRuOHEErdCTHATH2vfpzpsMGqp+yu1G9xn0UnDMAbvtTfF18dmeXSOPPKoKcKrth2A3kEkZrHD9eVWfR7Q7O2hUanSfyj31BwTPDEgcgRmRw+eFHtXnZIGNscpaapbsy7204lpAVnaqZFFLcm//KaHgZoqCS/hc8UX1F4tvC0Ri1JcWtLAKlxKbO7lw5eFIYj912GzOz12luevwmoSUhxxRfADgiZOc88vnxpQN22W0SVTdbOX5VpfltXhbWhy0NVJdasYtbqHCwpKm7gE2ntZZz5004txLjiw04S7AtAPYyy/SuZS0qcbWHQUtiCeXTn86U0uJStaysWr7ptBJ6jh860mpqnem45brS8nDbv2gO9tD3dfh501vFxaXIcTspBSTmrp51kASgMC0u/3YTHPWqKwuXEwUNzedmjKcshxovn199UWgcOtXSTvCSXCpwh2BaFZp6+VSGpIw217cTfcLfy9+tUFWBLigQhwiwhtHajL1U0tL2gwxbJet7lgjWZmhwP7y7Ivz38zmsrEOIW6FrCWsiCRJ5R58qSmG0ttuF1ZS6YAESOc/OdagbRt1xLbiktk3KtAtn1UlJKGmXC06EuEWqAzVHq9lK7DrX5SY5nbuo3Ibxu+2F8TdPZn/qsxhgtp1wOwGzEEZnl88K3LChiN3OHXfZ/DzjWeUxWYRc28sNuEIJlRJlPu9tDjPesUWTz2Q36P2raVh9AuEwQZFFU3h1uNpUMMFgjvKKpPsoqXh9VaI/bjOD7LMP4dMKDEqOqSch0p7XCxs9mqz/Entc+laKwjO74ZTagp1agHEk6TpXSMDg/2nZdOE2d193jHxqrh/qd6vVNGuTeMOo3Fm0pmEg5KnnVDEYdJuDYJXHZOiOlbNYNrdcYVoTtkKUGxdrAz6wKpeESMPhC2ygvLUgOCZ1GWXCRScelBMa578PZsguB/iwbulMutKUFXITZMoCTC+ddamG044hLKDhtndM5axM9cqxCHktP3YdAcSpQR4RmYHGBTcZbjtXNTaInXnZZAtlRIdbN8AJIMI5dPKlsxsYD6Yib4M6xHP1eutCvEBDRQwnaEpCoGZnQHlIqVPvgkBsbK2YAy1iZ65U3yO47JWoTia8SzTUy7tEw8gESABoqBmfGfHWhGHxJdXa+i4xOekjLpHhpWasXigrtCFJJCctI4eqo33EgkhSgpUBRHGfzp3+qtEPCRhVX/AJV7vid0naJ2UTr4xHPXOPXVrwuODrYKwV9oJhWsDP2++uU4t8t2Xqs1jzpKxTxUCVqlOmelH1epDQ5Z13TxDT6XiHZK8pznhRWSnVqUSVGT40UnizViwyYcUDING0Vs7OGlRRV24s1Llb7dRcQeUz69a1axK0vOqBOk+zSuTiK0T33OhrS0SayVwxl1rt1fs/ZyYmI9c10rxa1YrDKJzAJ9utcI+qn7/lWx/j4foKTA7LaEuNPldbGKUnGYtXNOXgRpWW1P7Ds/9ls+GvxqWvrGJ+6an+pz+L5VEUEOSowwthn8rufdJx/o/IdpIJy1JyNJlQOP9IykEJQogRpGlQ79f9HfcR8apn+Yek/w3PjWEUEIWcfCgdmplzWg+gr4Eh62fCJrZ5j99wCYH0iElXiTrUf2d/3/ACrqf/mPor8NFZm46rlihC8jGI2eMeRl2VkZUVfpH+Y4n8RXxoraD7QnDgFzUU4MAwYOnjVBlwrsCTdExVOAm4U8RWie+50NCWFqStQ0RMnlV7stKW1kwl0gA851qv3IQgRgKB9VP3/Ktj/Hw/QUxgndpu89u2+PGfyq0shQU7dKWCoHPWNKX7sHwqHHgGyGvrOJ+6an+pz+L5V0NpQ0rbKzTiITHIEdqnskjCHBSL+/dHGdPZTPEhOCr/JhI1r2Td+v+jfuI+NUwJ9Iek/w3PjVreZXiGHgABhpSBHeA7vvqmsU01isS9YCMQACmO6I7XvqSHwVHi2jcDQXJ/Z3/f8AKup8f0l6K/DRXOp5I9D7oADCrr/GfyrV/FhzGYRwIA2QgDw4VJ4EZ3WRhiiwFFed6R/mOJ/EV8aKeMl7FuuaXGT1oraD9PxLIuSH03FbuMIVhMGkZEqAJ+9nXQG0/tfagQNnfH/zRRXGL8ea4SS2qyawxThMai77Sh/xzoXhSvC4NF+VyQP9edFFdAhC6IL4r8+itSFb6X7u1s7/AH21kMOW0OoBFtyknxtE0UVsIRkurhQhhdKH5Ssm1B7oKQP9Qk1BJLd5PaKbp9cUUVdwN3JdVkMbpRfKFkBwCNCoewVIcF6stbR7RRRWRwbl1dUSRF79FmXvorY4T76SnjcDymiioMRJ13xXOYiw9lmpwqVNFFFUI4gGBWBvLlf/2Q=="
}