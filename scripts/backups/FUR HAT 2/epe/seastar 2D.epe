{
  "name": "seastar 2D",
  "id": "5SHnTBa2y6uWrDmYB",
  "sources": {
    "main": "// Sea Star 2D\n//\n// 10/27/2021 ZRanger1\n\nvar timebase;\nexport var complexity = 1.5;\nexport var nSides = 5;\nexport var speed = 1.75;\nvar slice = PI / nSides;\nvar waveScale = 8;       // larger values == more complex waves\nvar contrast = 0.02023;  // smaller values == higher contrast\n\ntranslate(-0.5,-0.5)\nscale(.5,.5)\n\nexport function sliderSpeed(v) {\n  speed = (4 * v);\n}\n\nexport function sliderComplexity(v) {\n  complexity = 1+(1.5*v);\n}\n\nexport function sliderReflections(v) {\n  nSides = 1+floor(v * 15);\n  slice = PI / nSides;  \n  waveScale = 8;  \n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 3600;\n  t = timebase * speed; \n  t2 = t / 2 * complexity;\n}\n\n// sets up a kaleidoscope effect - makes the image repeat over evenly divided\n// rotated \"slices\" about the center.\nvar x1,y1,s,temp;\nexport function render2D(index,x,y) {\n  var r,g,b;\n  \n  // fold coordinate space across our slices\n  var angle = atan2(y, x);\n  angle = mod(angle, 2.0 * slice);\n  \n  // rotate image over time\n  angle += t;\n  \n  // map new rotated coordinates back to original image space\n  var d = hypot(x,y);\n  x1 = 1-(d * cos(angle) * waveScale + t2);\n  y1 = d * sin(angle);  \n  \n  // draw a few iterations of our wave function over a short time interval  \n  for (i = 0; i < 3;i++) {\n    y1 += sin(x1*(i*complexity) + (t + i/complexity)) * 0.5;\n    b += i * abs(contrast/y1);\n  }\n\n  b = clamp(b,0,1);\n  hsv(0.6667 - (0.075 * b),1,b)\n}"
  },
  "preview": "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"
}