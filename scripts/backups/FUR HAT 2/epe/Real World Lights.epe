{
  "name": "Real World Lights",
  "id": "MWoAAvBkCd8TRCKqB",
  "sources": {
    "main": "/*\n Real World Lights \n \n Emulates the general color and look, if not the exact spectral characteristics\n of some interesting real-world light sources, selectable by UI slider.  The lights \n are, in order:\n \n   0 - Candlelight*\n   1 - Warm white incandescent \n   2 - Soft white incandescent\n   3 - Cool white incandescent\n   4 - Uranium glass fluorescence* (https://en.wikipedia.org/wiki/Uranium_glass)\n   5 - High pressure sodium lamp\n   6 - Mercury Vapor lamp\n   7 - Sodium vapor lamp\n   8 - Warm fluorescent tube\n   9 - Cool fluorescent tube\n  10 - LED grow light (vegetative phase)\n  11 - Ultraviolet (black light) tube\n  12 - Cherenkov radiation* (\"normal\" light if you have a nuclear reactor handy)\n  \n  (* - lights with movement effects/flicker)\n   \n   Tested on APA102 and RGB WS2812b. Some colors may\n   need adjustment on RGBW LEDs, depending on\n   the particular shade of the 'W' LED. \n   \n MIT License\n Take this code and use it to make cool things!\n \n ZRanger1 01/22/2022\n*/ \n\n// light index definitions\n  candle = 0\n  warm_white = 1\n  soft_white = 2\n  cool_white = 3\n  uranium_glass = 4\n  hp_sodium = 5 \n  mercury = 6\n  sodium_vapor = 7\n  warm_fl = 8\n  cool_fl = 9\n  fl_grow = 10 \n  ultraviolet = 11\n  cherenkov = 12\n\n// arrays for light parameters\nvar nLights = 13;    \nvar preLight = array(nLights);\nvar renderLight = array(nLights);\n\n// global color values for animation control and use in render\nvar speed,t1,t2,t3,t4;\nvar r,g,b,h,s,v;\n\n///////\n// Tables of functions for the light sources\n//////\n\npreLight[cool_white] = (delta) => ctToRGB(66);   // Cool white incandescent\nrenderLight[cool_white] = (index) => rgb(r,g,b);\n\npreLight[warm_white] = (delta) => ctToRGB(29);   // Warm White incandescent\nrenderLight[warm_white] = (index) => rgb(r,g,b);\n\npreLight[soft_white] = (delta) => ctToRGB(40);   // Soft white incandescent\nrenderLight[soft_white] = (index) => rgb(r,g,b);\n\npreLight[fl_grow] = (delta) => { ;};   // Fluorescent grow light\nrenderLight[fl_grow] = renderGrowLight;\n\npreLight[warm_fl] = (delta) => {r=1;g=0.8;b=0.8;};   // Warm fluorescent tube\nrenderLight[warm_fl] = (index) => rgb(r,g,b);\n\npreLight[cool_fl] = (delta) => {r=.831;g=0.922;b=1;};   // Cool fluorescent tube\nrenderLight[cool_fl] = (index) => rgb(r,g,b);\n\npreLight[ultraviolet] = (delta) => {r=0.655;g=0;b=1;};  // black light tube\nrenderLight[ultraviolet] = (index) => rgb(r,g,b);\n\npreLight[mercury] = (delta) => {r=0.55;g=1;b=.58;};   // mercury vapor lamp\nrenderLight[mercury] = (index) => rgb(r,g,b);\n\npreLight[uranium_glass] = (delta) => {speed = 0.85;h = 0.2673;s = 1;v = 1};    \nrenderLight[uranium_glass] = renderUraniumGlass;\n\npreLight[sodium_vapor] = (delta) => {h = 0.08;s=0.902};     // sodium vapor\nrenderLight[sodium_vapor] = (index) => hsv(h,s,1);\n\npreLight[candle] = (delta) => {speed = 0.4;h = 0.05;s=0.98;v=1} // candlelight\nrenderLight[candle] = renderCandle;\n\npreLight[hp_sodium] = (delta) => {h = 0.04;s=0.969;};   // high pressure sodium\nrenderLight[hp_sodium] = (index) => hsv(h,s,1);\n\npreLight[cherenkov] = (delta) => {speed = 0.85;h = 0.591;s = 0.997;v = 1};     \nrenderLight[cherenkov] = renderCherenkov;\n\n// UI controls\nexport var nCurrentLight = 0;\nexport function sliderLightType(v) {\n    nCurrentLight = floor(v * (nLights - 1));\n}\n\n// smooth 1D noise (sum of sines). Returns value\n// in the range -1 to 1\nfunction noise(index) {\n  var x,v;\n  x = index/pixelCount;\n  v =  (wave((33 * x) - t1) - 0.5) << 1;\n  v += (wave((45 * x) + t2) - 0.5) << 1;\n  v += (wave((21 * x) + t3) - 0.5) << 1;\n  v += (wave((15 * x) - t4) - 0.5) << 1;\n  return v >> 2;   \n}\n\n// candle renderer adds a little movement\nfunction preCandle(delta) {\n  speed = 0.5;\n  h = 0.05;s=0.98; \n}\n\nfunction renderCandle(index) {\n  var v = noise(index);\n  hsv(h-(0.015 * triangle(v+index/pixelCount)), s, max(0.35,v));\n}\n\n// grow light for vegetative phase plants...\nfunction renderGrowLight(index) {\n  var pct = wave(index/pixelCount*60); pct = 0.33 * pct * pct\n  hsv(0.65+pct,1,1)\n}\n\n// add a little internal brightness variation for fluorescence\nfunction renderUraniumGlass(index) {\n  var v = noise(index);\n  hsv(h, s, max(0.25,v));\n}\n\n// variation for radiation effects\nfunction renderCherenkov(index) {\n  var n = noise(index/3);\n  hsv(h, 1, max(0.2,n));\n}\n\n// convert color temp in degrees K/100 to RGB color\nfunction ctToRGB(ct){\n    \n    if( ct < 67 ){ \n        r = 1;\n        g = 0.5313 * log(ct) - 1.2909;\n        \n        if( ct <= 19){\n            b = 0;\n        } else {\n            b = 0.0223 * ct - 0.5063;\n        }\n    } else {\n        r = 38.309 * pow(ct,-0.886);\n        g = 10.771 * pow(ct,-0.588);\n        b = 1;\n    }\n    \n    r = clamp(r,0, 1);\n    g = clamp(g,0, 1);\n    b = clamp(b,0, 1);\n}\n\nexport function beforeRender(delta) {\n\n  // a few timers we can use for internal variation\n  t1 = time(speed *.16);\n  t2 = time(speed *.1);\n  t3 = time(speed *.14);\n  t4 = time(speed *.11);    \n  \n  preLight[nCurrentLight](delta);\n}\n\nexport function render(index) {\n  renderLight[nCurrentLight](index);\n}"
  },
  "preview": "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"
}