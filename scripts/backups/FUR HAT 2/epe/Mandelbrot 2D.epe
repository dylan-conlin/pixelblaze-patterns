{
  "name": "Mandelbrot 2D",
  "id": "QGFtqZnYzT9kZNvY2",
  "sources": {
    "main": "/*\n Mandelbrot Set 2D - brute force version!\n \n Displays and animates a view of the Mandelbrot set -- the set\n of points for which the series (z[n+1] = z[n]^2 + C) remains within\n a bounded region (at least during our relatively small number of\n iterations) rather than heading for infinity. \n \n Requires a 2D LED array and appropriate pixel mapper.\n\n This is *very* compute intensive, so be careful with the interaction between\n maxIterations and display size.  Somewhere around maxIterations=15 or 16 looks\n good on a 16x16 matrix.  Reduce iterations for higher frame rate or for larger\n displays.  Too many iterations may cause your Pixelblaze to behave \n erratically or become unresponsive.\n \n Reference:\n https://mathworld.wolfram.com/MandelbrotSet.html\n \n Version  Author        Date        \n 1.0.0    JEM(ZRanger1) 12/08/2020  \n*/ \n\n// how many roads must a man walk down, before he runs out of execution steps...\n// the answer my friend, is about 17 on a Pixelblaze 2 driving a 16x16 matrix.\nexport var maxIterations = 15\n\n// complex number describing the region of the set we're viewing. There is \n// a relationship between number of iterations and how much of the set is visible.\n// If you reduce iterations and don't see much, try changing these constants a bit.\nvar cR = -0.94299  \nvar cI = 0.3162\n\n// various variables for holding calculation results. Up here so they\n// can be easily exported for debugging if necessary\nvar cX,cY;\nvar fX,fY;\n\n// timers used to animate movement and color\nvar t1,t2\n\n//UI\n\n// range of maxIterations is 5 to 17.  You can go higher if you want, but\n// be a bit careful.\nexport function sliderIterations(v) {\n  maxIterations = 5+floor(v * 12)  \n}\n\n// The viewed portion of set moves w/timer t1. Timers and constants are hand-tuned, so\n// feel free to experiment to see different areas of the set.  \nexport function beforeRender(delta) {\n  t1 = (triangle(time(0.2)) - 0.5) * 2.4;   \n  t2 = time(0.05);\n\n  cX = cR + t1;       \n  cY = cI + (t1 / 2.5)\n}\n\n// In Render2D, we iterate over every pixel until the value at that point heads\n// for infinity (er, 4 in our case) or we hit the maximum number of iterations.\n// x/y pixel coords are mapped to -0.5 to 0.5 to keep everything in 16.16 range.\n// The mapper's coordinate normalizing mechanic really helps out here.\nexport function render2D(index,x,y) {\n  x = x - 0.5; y = y - 0.5;    // scale coords to range -0.5 to 0.5\n  \n// iterate fn over the pixel 'til we hit maxIterations or the value goes\n// out of range.\n  for (var iter = 0; iter < maxIterations; iter++) {\n    x2 = x * x; y2 = y * y;\n    if ((x2 + y2) > 4) break;  // 4 is our stand-in for infinity!\n\n    var fX = x2 - y2 + cX;\n    var fY = 2 * x * y + cY;\n    x = fX; y = fY;\n  }\n// once we're out of the loop, color by how quickly the function tended towards infinity\n// quicker exits give lower hue values, a point that didn't ever break out is displayed \n// as black.  More iterations would give more detail, but we run out of CPU pretty quickly here\n//\n  (iter < maxIterations) ? hsv(t2+(iter/maxIterations),1,1) : rgb(0,0,0);  // weird, but just a hair faster... \n}"
  },
  "preview": "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"
}