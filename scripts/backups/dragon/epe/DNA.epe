{
  "name": "DNA",
  "id": "W4frQgTaYNNS7FtyW",
  "sources": {
    "main": "export var speed = .03\nexport function sliderSpeed(v) {\n  speed = 3 + (v * 10)\n}\n\nexport var strandWidth = 0.1\nexport function sliderStrandWidth(v) {\n  strandWidth = 0.05 + v\n}\n\nexport var freq = 1\nexport function sliderFrequency(v) {\n  freq = .1 + (v * 18) \n}\n\nexport var myMode = 1\nexport function sliderMode(v) {\n  myMode = ceil((v * 2))\n}\n\nexport var distance = 0.4\nexport function sliderDistance(v) {\n  distance = v\n}\n\n\nexport var t\nfunction beforeSinushimmer(delta) {\n  t = time(speed / (65.536))\n}\n\nexport var mode = 0.1\nexport var count = 0\n\n\n\n// put these lines near the top, outside of function declarations\nvar viridis = [ 0.0, 68/255, 1/255, 84/255, 0.1, 72/255, 36/255, 117/255, 0.2, 65/255, 68/255, 135/255, 0.3, 53/255, 95/255, 141/255, 0.4, 42/255, 120/255, 142/255, 0.5, 33/255, 145/255, 140/255, 0.6, 34/255, 168/255, 132/255, 0.7, 68/255, 191/255, 112/255, 0.8, 122/255, 209/255, 81/255, 0.9, 189/255, 223/255, 38/255, 1.0, 253/255, 231/255, 37/255,]\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\nvar magma   = [ 0.0, 0/255, 0/255, 4/25, 0.1, 20/255, 14/255, 54/255, 0.2, 59/255, 15/255, 112/255, 0.3, 100/255, 26/255, 128/255, 0.4, 140/255, 41/255, 129/255, 0.5, 183/255, 55/255, 121/255, 0.6, 222/255, 73/255, 104/255, 0.7, 247/255, 112/255, 92/255, 0.8, 254/255, 159/255, 109/255, 0.9, 254/255, 207/255, 146/255, 1.0, 252/255, 253/255, 191/255, ]\nvar plasma  = [ 0.0, 13/255, 8/255, 135/255, 0.1, 65/255, 4/255, 157/255, 0.2, 106/255, 0/255, 168/255, 0.3, 143/255, 13/255, 164/255, 0.4, 177/255, 42/255, 144/255, 0.5, 204/255, 71/255, 120/255, 0.6, 225/255, 100/255, 98/255, 0.7, 242/255, 132/255, 75/255, 0.8, 252/255, 166/255, 54/255, 0.9, 252/255, 206/255, 37/255, 1.0, 240/255, 249/255, 33/255, ]\n\n//setPalette(viridis)\n//setPalette(inferno)\n//setPalette(magma)\nsetPalette(plasma)\n\n\nfunction sinushimmer(index, r, phi, theta) {\n  \n  if (myMode === 0) {\n    //mode = wave(t*3)\n    mode = bezierQuadratic(t, 0, 18, 0)\n    \n  } else if (myMode === 1) {\n    mode = 0.2 + wave(t) \n  } else if (myMode === 2) {\n    \n    count = wave(t)\n    mode = count + freq\n    \n    /*\n    if (mode < 36) {\n     mode = count + .0002\n    } else if (mode > 36) {\n      mode = count - .0002\n    }\n    */\n    //if (mode >= .9) {\n      //mode = 1 + t\n    //}\n  }\n   \n  //freq = perlinTurbulence(r, phi, theta, 2, 0.8, line * 4)\n  \n  line = near(r, \n    0.5 + distance * cos((mode*phi - t) * (PI2))\n  , strandWidth)\n  \n  \n  //line = bezierQuadratic(t, 0, line*4, 0)\n  //perlinTurbulence(x, y, z, lacunarity, gain, offset, octaves)\n  \n  paint(line, 1)\n  //hsv(line/4, 1, line)\n}\n\n\nexport function beforeRender(delta) {\n  beforeSinushimmer(delta)\n}\n\nexport function render3D(index, r, phi, theta) {\n  sinushimmer(index, r, phi, theta)\n}\n  \nexport function render2D(index, r, phi) {\n  render3D(index, r, phi, .5) // Equatorial section\n}\n\nexport function render(index) {\n  render2D(index, index / pixelCount, 0)\n}\n\n// Utilities\n\n// Several modes define a line in space. This sets the defualt thickness of\n// those. Use a higher percentage for projects with fewer pixels.\nvar halfwidthDefault = 0.125\n\n// Returns 1 when a & b are proximate, 0 when they are more than `halfwidth`\n// apart, and a gamma-corrected brightness for distances within `halfwidth`\nfunction near(a, b, halfwidth) {\n  if (halfwidth == 0) halfwidth = halfwidthDefault\n  var v = clamp(1 - abs(a - b) / halfwidth, 0, 1)\n  return v * v\n}"
  },
  "preview": "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"
}