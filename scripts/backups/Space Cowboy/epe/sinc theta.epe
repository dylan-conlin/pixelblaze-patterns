{
  "name": "sinc theta",
  "id": "qsx6WTD4fMTfnLRP3",
  "sources": {
    "main": "//  Idea lifted from the brilliant mind of Yaroslaw Turbin (LDIRKO): https://editor.soulmatelights.com/gallery/984-sincx\r\n\r\nexport var timebase = 1.5; export function sliderSpeed(v) { timebase = 0.1 + 1.9 * (1 - v); }\r\nexport var scale = 1; export function sliderScale(v) { scale = 0.25 + 3.75 * (v); }\r\nexport var sizeB = 14; export function sliderSizeB(v) { sizeB = 1 + (sqrt(pixelCount) - 1) * (1 - v); }\r\nexport var sizeC = 8; export function sliderSizeC(v) { sizeC = 1 + (sqrt(pixelCount) - 1) * (1 - v); }\r\nexport var gamma = 3; export function sliderGamma(v) { gamma = 1 + floor(5 * v); }\r\n\r\nexport function beforeRender(delta) {\r\n  a = scale * PI2 * time(timebase);\r\n  a3= scale * PI2 * time(timebase / sizeB);\r\n  a4= scale * PI2 * time(timebase / 4);\r\n}\r\n\r\n// You can also project up a dimension. Think of this as mixing in the z value\r\n// to x and y in order to compose a stack of matrices.\r\nexport function render3D(index, x, y, z) {\r\n  x1 = (x - cos(z / 4 * PI2)) / 2\r\n  y1 = (y - sin(z / 4 * PI2)) / 2\r\n  render2D(index, x1, y1)\r\n}\r\n\r\nexport function render2D(index, x, y) {\r\n  \r\n  var rad = hypot(x-cos(a3), y-cos(a4));\r\n  var r = pow(1-cos(((PI2*rad)-a))/rad, gamma);\r\n\r\n  var rad = hypot(x-cos(a3+PI/2), y-cos(a4-PI/4));\r\n  var g = pow(1-cos((PI2*rad)-a+PI/2)/rad, gamma);\r\n\r\n  rad = hypot(x-cos(a3-PI), y-cos(a4+PI/4));\r\n  var b = pow(1-cos((PI2*rad)-a+PI)/rad, gamma);\r\n\r\n  rgb(r,g,b);\r\n}\r\n"
  },
  "preview": "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"
}