{
  "name": "Perlin fire",
  "id": "Zctt6BgiHNb25xhwT",
  "sources": {
    "main": "/* \nDemonstration of Perlin noise functions to generate fire \nThe first mode shows Perlin noise scaled to 0-1.\nThe second shows a fractal ridge function, creating fire tendrils.\nThe third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\nThe fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n2022 Ben Hencke (wizard)\n*/\n\nvar rgbGradient = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nsetPalette(rgbGradient)\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\nexport var mode = 1, fireScale = 3, risingSpeed = 1, morphSpeed = 1\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function beforeRender(delta) {\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}"
  },
  "preview": "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"
}