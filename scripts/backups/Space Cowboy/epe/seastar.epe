{
  "name": "seastar",
  "id": "nEfuerkrJPzKStT8q",
  "sources": {
    "main": "// Sea Star 2D\n//\n// 10/27/2021 ZRanger1\n\nvar timebase;\nexport var complexity = 1.5;\nexport var nSides = 5;\nexport var speed = 1.75;\nvar slice = PI / nSides;\nvar waveScale = 8;       // larger values == more complex waves\nvar contrast = 0.02023;  // smaller values == higher contrast\n\ntranslate(-0.5,-0.5)\nscale(.5,.5)\n\nexport function sliderSpeed(v) {\n  speed = (4 * v);\n}\n\nexport function sliderComplexity(v) {\n  complexity = 1+(1.5*v);\n}\n\nexport function sliderReflections(v) {\n  nSides = 1+floor(v * 15);\n  slice = PI / nSides;  \n  waveScale = 8;  \n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 3600;\n  t = timebase * speed; \n  t2 = t / 2 * complexity;\n}\n\n// sets up a kaleidoscope effect - makes the image repeat over evenly divided\n// rotated \"slices\" about the center.\nvar x1,y1,s,temp;\nexport function render2D(index,x,y) {\n  var r,g,b;\n  \n  // fold coordinate space across our slices\n  var angle = atan2(y, x);\n  angle = mod(angle, 2.0 * slice);\n  \n  // rotate image over time\n  angle += t;\n  \n  // map new rotated coordinates back to original image space\n  var d = hypot(x,y);\n  x1 = 1-(d * cos(angle) * waveScale + t2);\n  y1 = d * sin(angle);  \n  \n  // draw a few iterations of our wave function over a short time interval  \n  for (i = 0; i < 3;i++) {\n    y1 += sin(x1*(i*complexity) + (t + i/complexity)) * 0.5;\n    b += i * abs(contrast/y1);\n  }\n\n  b = clamp(b,0,1);\n  hsv(0.6667 - (0.075 * b),1,b)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}