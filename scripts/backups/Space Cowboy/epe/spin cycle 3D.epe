{
  "name": "spin cycle 3D",
  "id": "ZnKQHR8z7tyNTEz6y",
  "sources": {
    "main": "export var speed = 10\n// Define a slider to control the speed of the animation\nexport function sliderSpeed(v) {\n  speed = 10 - v * 9.9; // Map slider values from \n  // speed = v * 9.9 + 0.1 // Map slider values from [0, 1] to [0.1, 10]\n  return speed\n}\n\n\nexport function beforeRender(delta) {\n  t1 = time(speed)\n  t2 = time(.1)\n}\n\n// Main render function that calls render3D() with 3D coordinates\nexport function render(index) {\n // Calculate X-coordinate as index/pixelCount (Y and Z always 0 in 1D)\n  render3D(index, index/pixelCount, 0, 0)\n}\n\n// 2D render function that adds a z-value of 0 and calls render3D()\nexport function render2D(index, x, y) {\n  // render3D(index, x, y, 0) // Add a Z-coordinate of 0 to the 2D coordinates and call render3D\n\n  h = index/pixelCount *(5+wave(t1)*5) + wave(t2)*2\n  h = (h %.5) + t1\n  v = triangle((index/pixelCount*5 + t1*10) %1)\n  v = v*v*v\n  hsv(h,1,v)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCACWAGQDASIAAhEBAxEB/8QAHAAAAQUBAQEAAAAAAAAAAAAABgADBAUHAgEI/8QAPRAAAQIEAwUFBQYGAgMAAAAAAQIDAAQFEQYSITFBUWFxEyKBobEUMlKRwSQzctHh8CM0NUJi8RUlU2Oi/8QAGgEAAgMBAQAAAAAAAAAAAAAAAgMAAQQFBv/EADURAAECAwQJAwQCAQUAAAAAAAECEQADIQQSMUETUWFxgZGhscEiM9EFI+HwovGCFDJCUmL/2gAMAwEAAhEDEQA/APlDFvddSjeDc9YYwuQJ1SiPdAPjDuKiVP5jtKiYZwwFKnSlO+0ZwkmUyjv8xnSr7TpG7xBhXRlpSCdrg8t8Z47ftlg7cx9Y0XECgqWT8Dbdh4RnT336/wAR9YCylw5xNdwyHJoCygBLJwFOWJ4l40HChAYceI0Q33RztoIGMVCywTqSq8E2GhmlUtJ3puflAzi1QM1ZOwKsOQELk+6W/QPkuYCU+lOzuankGENYXTmnLHZfWC+vKKpLtjsCLJHpAfho2mFDebDwgwxGm0iyyNCEZlHmf0i5/uDbThio8mESd7obLuaDlUxnb33y/wARjQcLJzths6JSglXy1jP1ge0kAaZ9njB/hruSC7e8tJHhvhlpe6LuOW80fhUwdpICK4CvLAcS0DOLFFcxn3FUR8NAmcKRvtEjFukwEfCdesNYWOWcUv4bW66wQIEl0igw8c4O79plHf5g/eeW2G22iLJQATxO+FHTbKFMtqcVYlNxCjlFdhlm7MSSoYnbnGIWa0zRfEwJfKtIA8W6TQR8JsesNYWJTNrXwtbrrHuKLqmM5O1R0hYYTeZ0vcqA/fzjqhP2rqjv8xtvnRXk54eILcQDJTGRvWL+A2RnavvDfjGi4lILQI91tsAeEZ0r7w9YCyKKkucTXngOTQNmAALYCg4U6l40LCyimRdePvZMo6mBfFIstPNV4KMPDNKJbTvTf5wL4tUDOEDZmNvCFyR90tn2FBzLwuV7pGqnE1PiOcKAGdudgNzBXXyTT+1VtUmw/fSBLDNu3UN6iB4QXYl0k2Gv/WCQeJi53ujbTgKnxEne4Gy7mg6PGeKN3yRvVpfrGh4XsptSj7jbZPy/WM9V/Mm3x/WNAw73KYvisW8BB2oEpATiaDjTs8HalBKXyFeWHVoFsUXU9nVe5VHOF0Zpmw2lQEd4r0fCOB16x5hU2mFH4dRpvg74Eq8nLDxBhH2rqssfMHE4oKWgA2SlASOghQ+20gtIK9pTpCjn/wCss0j7RluRR9ZzjAn6cqeNKqYxVVmwfjABijR1PUmO8Ij7UDwVfyhvFP8AMJ6CO8Kj+ItQOoB+kblqJkqOt+sdEAJQNniCbEH9NKt6gB9Yz8i7tuKrRoOJNKa0OP5RnzVu3QDqMw9YuQGv7C3KkJsVJaX1DrWNEwzYodUf7WyR4C31gQxMPtKSdtzeC7DWtNmjxaPmYEcT/wAwjqYVI91Wy6OhMDZ6rHE9W8R7hZOactxIEFuJFXbUsbAjTlpaBbCA+2hX+QglxET7Co8UjzMSf7j6h3IHaKne6neTyTTqYAAcz4Oy6r+caFh0Z5dCN2T1jOx7w6xo+GtUrPwoPpB2pV1LjIE9KQ60JcJTrI5O8COK1ZpwkHQqOkLDNu1PEq16COMSm8yk7jf9+cd4WF5kD/KGpATLSNTQKnNnpn5g6qDim1tITuaTeFHNR1mj0HpCjFZvp6JspK1YmscW02pYnKCTR4B8Un7Sgb7CHMKe854/SGMT6zLZ5ERIweAZkpO8keUaFi7II/aR6DFFM/MEuJf6cz+90Z+yLzCBxWPWD7EZJp4vfugHygAaOV9BFjZQ9YOT/wA95POsIsXqlp3J6Bo0PDQtS5m//j+sCOJvv0dTBhhsH2OZb3KaI9DAbiQgzCdd5hMis1X+J/i0DZwyxuI/lEnB4vNp/H9IIcSH/r1jglP1gdwgbTST/mPpBJiYZWHUHbk/WJOrMI2Dor8xU33U71D+P4jPk+8OsaRhqwbdHFB9IzloAvIB2FQjRcPkBrMdApA89IK2C8kjWFdnh9oU1w/+h1pAZiM/aUJ3i/0h7Cn80PxflDOJdJ2x3E+sPYWB7XMPitDxVAbNusATdkA6vEG9R0mlDkPSFHlXJE0CLkKbSfKFC7FakJs6ATlHn7VLInLG0wB4jJM0kHdeJOEjlmQrcF/lEfE9vbrjYbkRJwmCVLGmigofWCKgZTnPHjjHolBSZNMR4gkxSMiVo3FOnrGfsavIB2Zh6wf4sVeWactc5Ak+AgAYF32wPiHrC7K4R6sRQ7xT4irMAEEJwy3Go7xotCOWVDm4o19DAbiZOWdtbUEiDKhjNRngRq2L25bDAbiY5pxKuIN/KAke4WypwxHeFyKzDtrzDHkRD+Fh/EJGhC4J8W2slYGjjYJ+VjA3g8ZnlI+I2HWCHFBzSSb7UCxvwMSb7ofLsqnQiJNbS038Rj0MALX3yPxCNEo39LzjakW6bxGds2DyL7Mw9Y0WgC9OmGTtKLp6jUQdqVdAVqrwwPQwdrSVJu6+4qO0B2KNZ+42K1EP4UBK3ORBH1iNiRQM0niAYlYOUBNC+wqsYJSSmSwxGHCGEhUquCvMHD6A92ZNrpQEwojziltPdmFWsBCjnK+mzpp0koi6aiuuMcu12a6BN/3Z0zgExGSZsA7ReJmD1ZZkE7M2v1hp1K6e6lU0wZ8OAkKcHTYSDEpupyk01kZlpenKBNlJWEk6cgPnHVUkqFwjHzjGhSlJlgAYZ7jF3ilORtbJ3AFPy/KAOX+/R+IQR1CnzILaxWn54KSFJHeNxa9veO78oiy1Vk5VosvURha76OKsCP8A5gZSFoSHDkts2PXrFSfQgpl1Z254V5QWUUhEope1LiLH6wFYkBE7lJ2EiLltpVSURL1oSgCCeybc943GgAUOZiseC5FxS5lkz4zWK3BoCDbabwMqUpJvcPjo8DKZKy2OLd+oh3CVw7nSdQv8rQR4uskEp0Q42COGo/OKSXqkpOZWmpVimkADMhQGax5Aa7OscT1OnBKofVWHJxANinMVJHetYm56+MQyVLWFbxvBr4ccjWItjMrTA+OuEDzH3yPxD1jRaOSKb2ydoTlMCktVJSWSll+iM9pszrsCNduqYnoT7egKYrJkW1GxabXpfhbMN/lrBTUKWRTM8s+Yi55KwxpgxxriMNtIqMTC09psNyIlYTF1K4pVfw3w1Mocp8zkmpdc6UjMS4k6J8bxNZqsrOOpTLystTCRlUpCwnW23YN8RSVoQBqz3VHODUQqWyRQ+fiCyfb7d1LgVrkAV1EKBhUi+lZBxM/utlVfcP8AOFGNVjnIJCFEDKh8QMuyyZyQtQcnOHpqXZrLHbiaRIIQAUoBuPDUQNTcuzJujK+iZFtgFresPVGoFTi0Md1Ga6eV9ohinyaph4BYNhqRxEdbQgG7LJI8N8xulyVlYCS5OVMakwQylWbn6eiU9hRKrbsA+lVtvgPWINWozDCUvGrNuFepBABB3j3o6eeZpza2AUrNrX+IbopVuPTTltVGIbOiSLqVHXrDEfMXMlF/SrFiwAxzB1RZ0KrM09zIuntzJvYKuARzvYxZqkRPsqLlQTLJcsopXqRrt2iK6nyTTCSqa7ptcHfyI5RGqVRW6A0mwyEgW2DpyghZUyxeUWJY78WI/EEuSbt4lnbIVA7EHLrHLrbNNnUkLbnAkm40A+sW9PqKZxfZNSwlmlEBSc2YKPG1hrFHISa5l3U2G03H70i0mXmZFktpADw2m978uY4GJLs4IvKLU/S3nKLlSVNeJbaw/otqxj2tUlhDi3jVW3Da4TYG3K+aIMpUWmEIbEmlRSR3swsojeRaIjzj04+SbkmLSnyKGE9q8rKsf2q0/wBdYGXIvGhoP6ygbNJWFBjh+4ZtFxNy6Kw0uYcm0SRQjVR1zcE3uOcDUywxIvCzyJnaLAWtz3w5UahnVkZASnZlA0H7+UMSEi5MOa2tvBNooSAk3UEn9/c4ASCJjJL8vH43PF9TK+w3KJQ9Q5eYUk2C1gEkeKTChkJk2R2SllKk6EFANvMQotX06UTVRf8Az8U5Ru0Mw1vdE/MVshTnXUKmFJ7jZBXyBNr/ADtE2fnGZeXS0zbtEK0PFJ2j56xxOVMMNKZY0C0FKgN8VspLuTj6QbkFQBMMUsyXSMUnEam/uLVdlnRSqktXUY5Sl+ce7oKjrpy2xcSstLS0qXVqAdAzt3/u4gw/2aaI+oKADzK7puQdNo8oo56aVMvrDQIbUolKbbL7ukRJEuoxYEEdopkykhSqlQ4gw5UZ9cwQlJOUHTlyjul05T67rIRY272gB5xIkKStMuiceA7FSst+CtdPKO6tUGkpSmXSELtlcG5fBXWKSQWWcC7NkRkRF3HedO/O+PZ2cbl2PZ0JyuIJ1/uSd46f7ioSl2bd4n0hyUlpifeOUFZAJ4kgbhFzLtycpLHOoIetmbXu5hXL08jCq+HNEg1arPs1RQSqeSpVEip+Y4l5NmRTaaGVywUlQ1uDsUOI5ehitqM+7MqCATZOgt9OUNzs47NkI1ygkgddsT6bTUodvOJISPesdbHeIu+pQupyrTqRnXVErNOilYd28xGp1PU4tK3gpKNxH728onT841KoLDZC7e6sCx/Tps9Y5qFQEulUs0tLiOIGihuJG4+YirYYdmnAo3KSbZufCLCrrJl1Ov4zByIiFSZYuS6k/vMaxDTjjrys5uem6FBLL02TS0AqcZaVvQ4DcH6iFCdJLFCtjqY/EUbIX9bvuikpVPcnZltFjZagIu6uiXpEw/LskXTaxB2EpB08TERNUYkloSwlRUjaQBwiGlidrE9mAGd1VgCYpSjJnLLum63FxWGJIkKAlVU1YZnpp6oTRWRqdLDf1i5p9HQ3SP8AkXSBlcAN942aeNo7n5GUogaaeWlx5KSpeTUXO7yMV83VnpqVEmylQSTr87wtCjdlLlYPhsHzlC0JQhAWoup8I6qFXcEu5JMn+Gog7dmo/KI1Gp7lQnm0KBKVq15xZUOgOLYXUpxaEy7dzY7VW4Q2iqsSLiQwlRUkWJFoG8laJujNQepgm0q1LnFtm2JTziKHMKS2oKdZWUhXEf6ihnZl2em1rAIzqKssSEsTtanwpI77qtATFrPSMnROzadWlx4JzLKNQSdg9YaJiVzglVFEV4fmISqeUpV6RHEpR0y9NaqDpGVSsigdpO0W+XpEar1gvSzUslPeZuEqHw8DDc5WH5uUTJtBQTfXpeJVGw+tcuuozykJlmwTYk3V0hOlKJaTMxBLHMvlFLmMgolCgOMQKJTHKlOJaJKc++LZEw1Ru0aW0hRILbqDYi4/WIqKszIOpEuF3SLKIAiE1LTtZnrtpGd1VwN3WGzBcUtCqpYV1EQfpkkol+okViM/OOLdUpKjlvpfbaFBM5SKVTsstOrS4+E3UUXI6QoBNoXMF4JUQc2jL941rFPQqamaC5l0hSUXITxPOLiWfRTWnXkIJUgZbwoUKmm9JWD/ANgOEabP6bPMUMaQNvPP1Keu4vvOK37BF7K01lhxLY1Olzx0vChQ4EpJbJJaB+npCprnIGGcSVZ0hMgyMjSANIg0qRS837Q4bi9kp58TChQqyoAQhIwJHWM0s6SaAurnzBAy8ikU9c0hGZwiwPAQLOuvVGeu4vvOK37oUKFyS6pizi5h1uUdOpOQi9pFMY7fIdQkXUd5tDWKaw66oSLQLbSBawhQoivVaQDkARxg7V6JctKcGfjFZT5JLqUuuEEKJsOkFTq0UCnlxtGd9afeGwchChRLX6hLQcFEvtaKT6LIVDEloDZmbfmH1OuOKKlHXWFChRswjHfVrj//2Q=="
}