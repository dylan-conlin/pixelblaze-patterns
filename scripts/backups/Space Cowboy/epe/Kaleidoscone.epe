{
  "name": "Kaleidoscone",
  "id": "CgQWvoseSvpokukeD",
  "sources": {
    "main": "/*\n Perlin Kaleidoscope 2D\n \n Uses Pixelblaze's noise functions to generate an \"interesting\" base\n texture of RGB lines, then generates kaleidoscopic reflections.\n \n Try with Reflections slider set to minimum to see the noise lines!\n \n MIT License\n \n Take this code and use it to make cool things!\n \n 12/29/2022 ZRanger1\n*/\n\nexport var lineWidth = 0.075;\nexport var speed = 0.5;\nexport var nSides = 3;\nvar slice = PI/nSides;  \nvar outx,outy;\n\n// movement speed\nexport function sliderSpeed(v) {\n  speed = 0.25 + 2 * v * v;\n}\n\n// width of base texture lines\nexport function sliderLineWidth(v) {\n  lineWidth = 0.02 + (v * 0.3);\n}\n\n// number of kaleidoscope \"slices\"\nexport function sliderReflections(v) {\n  nSides = 1+floor(6*v);\n  slice = PI2 / nSides;\n}\n\n// sets up a kaleidoscope effect - makes the image repeat over evenly divided\n// rotated \"slices\" about the center.\nfunction kal(x,y,r,theta) {\n  // convert to radial coords, repeat image over each\n  // angular \"slice\" and rotate the slices over time\n  var angle = abs(theta + mod(atan2(y,x), slice)-slice);\n\n  // map new rotated coordinates back to original image space\n  outx = r * cos(angle);  outy = r * sin(angle);\n}\n\nvar timebase = 0;\nvar t1,theta;\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\nexport function beforeRender(delta) {\n  timebase = (timebase + delta / 1000)  % 3600;\n  t1 = timebase * speed;\n  theta = PI * t1;\n}\n\ntranslate (-0.5,-0.5)\nexport function render2D(index, x, y) {\n  r = hypot(x,y);  \n  if (nSides > 1) { \n    kal(x,y,r,theta); x = outx; y = outy;\n  }  \n  \n  lr = perlinFbm(x,y,t1,1.15,0.15,3);\n  lg = perlinFbm(y,x,t1,0.5,0.1,3);\n  lb = perlinFbm(t1,x,y,0.25,0.15,3);\n  \n  r = 2-abs(y - lr) / lineWidth;\n  g = 2-abs(y - lg) / lineWidth;\n  b = 2-abs(y - lb) / lineWidth;\n\n  rgb(r, g, b);\n}"
  },
  "preview": "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"
}