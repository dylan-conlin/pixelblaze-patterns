{
  "name": "DNA",
  "id": "W4frQgTaYNNS7FtyW",
  "sources": {
    "main": "export var speed = .03\nexport function sliderSpeed(v) {\n  speed = 3 + (v * 10)\n}\n\nexport var strandWidth = 0.1\nexport function sliderStrandWidth(v) {\n  strandWidth = 0.05 + v\n}\n\nexport var freq = 1\nexport function sliderFrequency(v) {\n  freq = .1 + (v * 18) \n}\n\nexport var myMode = 1\nexport function sliderMode(v) {\n  myMode = ceil((v * 2))\n}\n\nexport var distance = 0.4\nexport function sliderDistance(v) {\n  distance = v\n}\n\nexport var t\nfunction beforeSinushimmer(delta) {\n  t = time(speed / (65.536))\n}\n\nexport var mode = 0.1\nexport var count = 0\n\n\n\n// put these lines near the top, outside of function declarations\nvar viridis = [ 0.0, 68/255, 1/255, 84/255, 0.1, 72/255, 36/255, 117/255, 0.2, 65/255, 68/255, 135/255, 0.3, 53/255, 95/255, 141/255, 0.4, 42/255, 120/255, 142/255, 0.5, 33/255, 145/255, 140/255, 0.6, 34/255, 168/255, 132/255, 0.7, 68/255, 191/255, 112/255, 0.8, 122/255, 209/255, 81/255, 0.9, 189/255, 223/255, 38/255, 1.0, 253/255, 231/255, 37/255,]\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\nvar magma   = [ 0.0, 0/255, 0/255, 4/25, 0.1, 20/255, 14/255, 54/255, 0.2, 59/255, 15/255, 112/255, 0.3, 100/255, 26/255, 128/255, 0.4, 140/255, 41/255, 129/255, 0.5, 183/255, 55/255, 121/255, 0.6, 222/255, 73/255, 104/255, 0.7, 247/255, 112/255, 92/255, 0.8, 254/255, 159/255, 109/255, 0.9, 254/255, 207/255, 146/255, 1.0, 252/255, 253/255, 191/255, ]\nvar plasma  = [ 0.0, 13/255, 8/255, 135/255, 0.1, 65/255, 4/255, 157/255, 0.2, 106/255, 0/255, 168/255, 0.3, 143/255, 13/255, 164/255, 0.4, 177/255, 42/255, 144/255, 0.5, 204/255, 71/255, 120/255, 0.6, 225/255, 100/255, 98/255, 0.7, 242/255, 132/255, 75/255, 0.8, 252/255, 166/255, 54/255, 0.9, 252/255, 206/255, 37/255, 1.0, 240/255, 249/255, 33/255, ]\n\n//setPalette(viridis)\n//setPalette(inferno)\n//setPalette(magma)\nsetPalette(plasma)\n\n\nfunction sinushimmer(index, r, phi, theta) {\n  \n  if (myMode === 0) {\n    //mode = wave(t*3)\n    mode = bezierQuadratic(t, 0, 18, 0)\n    \n  } else if (myMode === 1) {\n    mode = 0.2 + wave(t) \n  } else if (myMode === 2) {\n    \n    count = wave(t)\n    mode = count + freq\n    \n    /*\n    if (mode < 36) {\n     mode = count + .0002\n    } else if (mode > 36) {\n      mode = count - .0002\n    }\n    */\n    //if (mode >= .9) {\n      //mode = 1 + t\n    //}\n  }\n   \n  //freq = perlinTurbulence(r, phi, theta, 2, 0.8, line * 4)\n  \n  line = near(r, \n    0.5 + distance * cos((mode*phi - t) * (PI2))\n  , strandWidth)\n  \n  \n  //line = bezierQuadratic(t, 0, line*4, 0)\n  //perlinTurbulence(x, y, z, lacunarity, gain, offset, octaves)\n  \n  paint(line, 1)\n  //hsv(line/4, 1, line)\n}\n\n\nexport function beforeRender(delta) {\n  beforeSinushimmer(delta)\n}\n\nexport function render3D(index, r, phi, theta) {\n  sinushimmer(index, r, phi, theta)\n}\n  \nexport function render2D(index, r, phi) {\n  render3D(index, r, phi, .5) // Equatorial section\n}\n\nexport function render(index) {\n  render2D(index, index / pixelCount, 0)\n}\n\n// Utilities\n\n// Several modes define a line in space. This sets the defualt thickness of\n// those. Use a higher percentage for projects with fewer pixels.\nvar halfwidthDefault = 0.125\n\n// Returns 1 when a & b are proximate, 0 when they are more than `halfwidth`\n// apart, and a gamma-corrected brightness for distances within `halfwidth`\nfunction near(a, b, halfwidth) {\n  if (halfwidth == 0) halfwidth = halfwidthDefault\n  var v = clamp(1 - abs(a - b) / halfwidth, 0, 1)\n  return v * v\n}"
  },
  "preview": "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"
}