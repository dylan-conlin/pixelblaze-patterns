{
  "name": "ripple color slider",
  "id": "7bAHFwbcGjzZW9ien",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nexport var color = 0;\nvar theta = 0;\n\n\n// This creates a color well that when clicked will open a color picker. When it\n// is changed, this function will be called with either the hue, saturation, and\n// value for hsvPicker or the red, green, and blue for rgbPicker. All values are\n// between 0.0 and 1.0, and suitable for passing to the hsv() or rgb() functions\n// later on to set a pixel color. g how quickly the waves die down\nexport function hsvPickerPrimaryColor(h, s, v){\n    color = h\n}\n\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n// early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // pick a blue/green gradient color based on \"height\", and draw the\n  // region that's inside our radius.\n  //hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n  hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n  \n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}