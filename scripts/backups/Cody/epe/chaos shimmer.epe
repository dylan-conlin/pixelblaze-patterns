{
  "name": "chaos shimmer",
  "id": "9y4QGDMGcPazPayyn",
  "sources": {
    "main": "// Swirly plasma that occasionally explodes into weirdness.\n// Requires Pixelblaze 3 with v3.17 or newer firmware.\n// 7/15/21 - ZRanger1\n\nvar chaosLevel = 0.2;  // more is more\nvar theta;             // current rotation angle\n\nexport function beforeRender(delta) {\n  t1 = wave(time(.5)) * 40;  // scale time for sin and cos\n  \n  mx = 0.5+(cos(t1) * 0.3);\n  my = 0.5+(sin(t1) * 0.5); \n\n  theta = PI2 * time(0.25);\n  resetTransform();\n  rotate(theta);\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n\n// vectors for calculation\nvar mx,my;\nvar pr,pg,pb;\nvar dotp;\nexport function render2D(index,x,y) {\n  pr = x; pg = y; pb = mx;\n  \n  // perturb coords w/our time-based function a few times\n //  and use the result as RGB color.   This is a common\n // GLSL shader trick.  The upside is that additive color\n // mixing is trivial, the downside is that precise control\n // of output color is much more work.  Here, I don't even try.\n // It's... pink.  And blue!\n  for (var i = 0; i < 5; i++) {\n    dotp = (pr * pr + pg * pg + pb * pb);\n    pr = abs(pr)/dotp - 1;\n    pb = abs(pg)/dotp - 1;\n    pg = abs(pb)/dotp - my * chaosLevel;\n  }\n  \n  // gamma correct and display\n  rgb(pr*pr,pg*pg,pb*pb);\n}"
  },
  "preview": "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"
}