{
  "name": "Worely Bird",
  "id": "eRWhQve3mqymraRvD",
  "sources": {
    "main": "// Worley cell noise generator \n// CAREFUL - very CPU intensive.\n// Worley noise is widely used on high resolution displays to generate\n// voronoi-like distance fields while limiting the number of per-pixel\n// comparisons.\n//\n// On LED displays though, the number of pixels is so small that it's \n// actually faster to just calculate the normal voronoi distance.\n//\n// I'm still looking ways to make this faster and more useful though!\n// 7/4/2021 ZRanger1\n\nvar cellScale = 2;  // sqrt of number of displayable cells\n\n\nexport var tileX,tileY,posX,posY\nexport var pX,pY;\nvar diffX,diffY;\nexport var minDist;\n\nscale(cellScale,cellScale);\n\nexport function beforeRender(delta) {\n  t1 = time(0.1);\n}\n\n\n// 16 bit xorshift PRNG from \n// http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html\n// returns a pseudorandom value between 0 and 1\nvar xs;\nfunction roll() {\n  xs ^= xs << 7\n  xs ^= xs >> 9\n  xs ^= xs << 8\n  return frac(abs(xs/100));\n}\n\nfunction rollSeed(seed) {\n  xs = seed;\n}\n\nexport function render2D(index,x,y) {\n\n    tileX = floor(x); tileY = floor(y);\n    posX = frac(x); posY = frac(y);\n\n    minDist = 1;\n\n    for (var yOffs = -1; yOffs <= 1; yOffs++) {\n      for (var xOffs = -1; xOffs <= 1; xOffs++) {\n\n        // Random position from current + neighbor place in the grid\n        xs = (xOffs + tileX); pX = roll();\n        xs = (yOffs + tileY); pY = roll();        \n\n\t\t\t// Animate the point\n\t\t\t  pX = triangle(t1 + pX) * 0.7;\n\t\t\t  pY = triangle(-0.25+t1 + pY) * 0.7;\t\t\t  \n\n\t\t\t// Vector between the pixel and the point\n\t\t\t  diffX = (xOffs + pX) - posX;\n\t\t\t  diffY = (yOffs + pY) - posY;\t\t\t  \n\t\t\t  var dist = hypot(diffX,diffY);\n\t\t\t  \n\t\t\t  minDist = min(minDist,dist);\n      }\n    }\n\n    // Draw the min distance (distance field)\n    v = wave(4*minDist);\n    hsv(minDist,1, v)    \n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}