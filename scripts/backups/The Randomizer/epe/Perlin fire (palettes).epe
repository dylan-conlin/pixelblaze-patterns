{
  "name": "Perlin fire (palettes)",
  "id": "xpzXvApximrA6pcuP",
  "sources": {
    "main": "/* \n   Demonstration of Perlin noise functions to generate fire \n   The first mode shows Perlin noise scaled to 0-1.\n   The second shows a fractal ridge function, creating fire tendrils.\n   The third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\n   The fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n   2022 Ben Hencke (wizard)\n*/\n\nvar fire = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0,    0.247, 0.09, 0.0, 1.0,    0.498, 0.263, 0.0, 1.0,   0.749, 0.557, 0.0, 0.176,   1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0,   0.165, 0.0, 0.0, 0.176,   0.329, 0.0, 0.0, 1.0,   0.498, 0.165, 0.0, 1.0,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 1.0,   1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0,   0.165, 0.165, 0.0, 0.0,   0.329, 1.0, 0.0, 0.0,   0.498, 1.0, 0.0, 0.176,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0,   0.247, 0.0, 0.216, 1.0,   0.498, 0.0, 1.0, 1.0,   0.749, 0.165, 1.0, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008,   0.165, 0.835, 0.576, 0.094,   0.329, 0.404, 0.859, 0.204,   0.498, 0.012, 0.859, 0.812,   0.667, 0.004, 0.188, 0.839,   0.831, 0.004, 0.004, 0.435,   1.0, 0.004, 0.027, 0.129,];\nvar bhw1_04_gp = [0, 229,227,  1,   15, 227,101,  3,    142,  40,  1, 80,   198,  17,  1, 79,   255,   0,  0, 45]\nvar black_Blue_Magenta_White_gp = [0,   0,  0,  0, 42,   0,  0, 45, 84,   0,  0,255, 127,  42,  0,255, 170, 255,  0,255, 212, 255, 55,255, 255, 255,255,255]\nvar es_landscape_33_gp = [0,   1,  5,  0, 19,  32, 23,  1, 38, 161, 55,  1, 63, 229,144,  1, 66,  39,142, 74, 255,   1,  4,  1]\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969,   0.188, 1.0, 0.533, 1.0,   0.349, 0.863, 0.114, 0.886,   0.627, 0.027, 0.322, 0.698,   0.847, 0.004, 0.486, 0.427,   1.0, 0.004, 0.486, 0.427,];\nvar heatmap_gp = [0,     0,  0,  0, 128,   255,  0,  0, 224,   255,255,  0, 255,   255,255,255 ];\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\nvar lava = [0.0, 0.0, 0.0, 0.0,   0.18, 0.071, 0.0, 0.0,    0.376, 0.443, 0.0, 0.0,   0.424, 0.557, 0.012, 0.004,   0.467, 0.686, 0.067, 0.004,   0.573, 0.835, 0.173, 0.008,   0.682, 1.0, 0.322, 0.016,   0.737, 1.0, 0.451, 0.016,   0.792, 1.0, 0.612, 0.016,   0.855, 1.0, 0.796, 0.016,   0.918, 1.0, 1.0, 0.016,   0.957, 1.0, 1.0, 0.278,   1.0, 1.0, 1.0, 1.0,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016,   0.169, 1.0, 0.267, 0.098,   0.337, 1.0, 0.027, 0.098,   0.498, 1.0, 0.322, 0.404,   0.667, 1.0, 1.0, 0.949,   0.82, 0.165, 1.0, 0.086,    1.0, 0.341, 1.0, 0.255,];\n\narrayMutate(bhw1_04_gp,(v, i ,a) => v / 255);\narrayMutate(black_Blue_Magenta_White_gp,(v, i ,a) => v / 255);\narrayMutate(es_landscape_33_gp,(v, i ,a) => v / 255);\narrayMutate(heatmap_gp,(v, i ,a) => v / 255);\n\n\n\nvar sunset = [0.0, 0.471, 0.0, 0.0,    0.086, 0.702, 0.086, 0.0,   0.2, 1.0, 0.408, 0.0,   0.333, 0.655, 0.086, 0.071,   0.529, 0.392, 0.0, 0.404,   0.776, 0.063, 0.0, 0.51,    1.0, 0.0, 0.0, 0.627,];\n// List of palettes\n// good fire palettes:\nvar palettes = [\n  fire,\n  inferno,\n  lava,\n  BlacK_Blue_Magenta_White,\n  Blue_Cyan_Yellow,\n  black_Blue_Magenta_White_gp,\n  gr65_hult,\n]\n\n// These don't look that great as fire palettes:\n// Analogous_1,\n// BlacK_Red_Magenta_Yellow,\n// GMT_drywet,\n// bhw1_04_gp,\n// es_landscape_33_gp,\n// rainbowsherbet,\n// heatmap_gp,\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\n\nexport var mode = 1\nexport var fireScale = 3\nexport var risingSpeed = 1\nexport var morphSpeed = 1\nexport var currentPalette = 0\n\nsetPalette(palettes[currentPalette]);\n\nexport function sliderPalette(v) {\n  currentPalette = round(v*(palettes.length - 1))\n  setPalette(palettes[currentPalette]);\n}\n\nexport function showNumberPaletteMode() {\n  return currentPalette + 1;\n}\n\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function toggleDisableSliders(v) {\n  if (v) {\n    fireScale =\t11.000000\n    mode = 0.000000\n    morphSpeed = 1.235062\n    risingSpeed = 5.199982\n  }\n}\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\nexport function beforeRender(delta) {\n  timeCounter += delta; // Increment the time counter by the time since the last frame\n\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}