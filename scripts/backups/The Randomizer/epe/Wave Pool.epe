{
  "name": "Wave Pool",
  "id": "bZm34hM7qkpArQr78",
  "sources": {
    "main": "// Water Caustics \n// Bright patterns made by light bouncing around and through the\n// curves made by ripples on the water's surface.  \n//\n// MIT License\n// Take this code and use it to make cool things!\n//\n// 1/27/2022 ZRanger1\n\nvar timebase = 0;\n\nexport var contrast = 1/24;\nexport var whiteLevel = 1.125;\nexport var speed = 3.5;\n\nexport function sliderSpeed(v) {\n  speed = 1 + 8*v;\n}\n\nexport function sliderWhiteLevel(v) {\n  whiteLevel = 0.8 + (1-v)\n}\n\nexport function sliderContrast(v) {\n  contrast = 1/(16+24*v);\n}\n\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase / 6;\n}\n\nexport function render2D(index,x,y) {\n  var px,py,ix,iy,c;\n  \n  // scale coords to work well as angles for sin/cos\n  px = x * PI2 - 20;  py = y * PI2 - 20;\n  ix = px; iy = py;\n  c = 1;\n\n  // build a couple of lumpy circular \"waves\"\n  var t = t1 * (1-speed);\n  tmp = px + cos(t - ix) + sin(t + iy); \n  iy = py + sin(t - iy) + cos(t + ix);\n  ix = tmp;\n\n  c += 1/hypot(px/sin(t + ix)*contrast, py/cos(t + iy)*contrast)\n\n  var t = t1 * (1-speed/2);\n  tmp = px + cos(t - ix) + sin(t + iy); \n  iy = py + sin(t - iy) + cos(t + ix);\n  ix = tmp;\n\n  c += 1/hypot(px/sin(t + ix)*contrast, py/cos(t + iy)*contrast)\n  \n  // scale, gamma correct and draw!\n  c = 1.65-sqrt(c/2);\n  c = c * c * c * c;\n  c = clamp(c,0,1);\n  \n  hsv(0.6667- (0.3 * c),whiteLevel-c,c)\n  \n}\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}