{
  "name": "Waterfall inferno",
  "id": "XfWpxSeX756siwuTQ",
  "sources": {
    "main": "/*\n#version 120\n\n// original https://www.shadertoy.com/view/wllcDH\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nvoid main(void) \n{\n    vec4 o;\n    vec2 u=vec2(2.*gl_FragCoord.xy-resolution.xy)/resolution.y*4.;\n    for(float i=1.;i<4.;i++)\n        u.x+=cos(u.y*i*3.)*.1,\n        u.xy += sin(u.x*u.x+u.y*u.y-time*7.),\n        u+=cos(u*5.)*.1,\n        o=cos(float(u*.4)+vec4(.2,.1,.1,0));\n    gl_FragColor=o;\n}\n\n*/\n\nvar timebase = 0;\nexport var speed = 6;\nexport var distortion = 0.2;\n\ntranslate(-0.5,-0.5);\nscale(2.25,2.25);\n\nexport function sliderSpeed(v) {\n  speed = 0.1+(7*v);\n}\n\nexport function sliderDistortion(v) {\n  distortion = (v*v*0.3);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n}\n\n\nexport function render2D(index,x,y) {\n  var r,g,b,i,tmp;  \n  \n  for (i = 1; i < 3; i++) {\n    x += cos(y*i*3) * distortion; \n    tmp = sin((x * x + y * y) - t1);\n    x += tmp;  y += tmp;\n    x += cos(x * 5) * distortion; \n    y += cos(y * 5) * distortion;\n  }\n  \n  tmp = (x * 0.6) + 0.1;\n  r = cos(tmp + 0.2);\n  g = cos(tmp);\n  b = cos(tmp);\n  rgb(r*r*r,g*g*g,b*b*b);\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}