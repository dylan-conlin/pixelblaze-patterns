{
  "name": "fast pulse 2D 3D",
  "id": "BvZoMSk6wu37yZ8zY",
  "sources": {
    "main": "/*\n  Fast pulse 2D/3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\n\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(.1)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x \u2212 x1) + b(y \u2212 y1) + c(z \u2212 z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 5)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < .8\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lengths. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}