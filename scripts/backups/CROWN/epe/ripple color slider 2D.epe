{
  "name": "ripple color slider 2D",
  "id": "xx4bgNpmxSSvfp7Cf",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nexport var color = 0;\nvar theta = 0;\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\nvar ONETHIRD = 0.1\nfunction cyanify(v) {\n  return triangle(v) * ONETHIRD + ONETHIRD\n}\n\n// color of the waves\nexport function sliderColor(v) {\n\n  color = cyanify(v);\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n// early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // pick a blue/green gradient color based on \"height\", and draw the\n  // region that's inside our radius.\n  hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n}"
  },
  "preview": "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"
}