{
  "name": "Shimmer Crossfade 3D",
  "id": "ZHAqrPmXHkCos38n9",
  "sources": {
    "main": "/*\n  Demo on 8x8 matrix: https://youtu.be/r0iVGnwqEEE\n  \n  This pattern shows how to combine several 2D patterns into one with a simple \n  crossfade based on probabilistically picking to render a pixel using the next\n  pattern. The effect looks like a shimmering transition. This approach was \n  inspired by the crossfade used in:\n  \n  https://hackaday.com/2020/04/21/a-jaw-dropping-demo-in-only-256-bytes/\n  \n  The big benefit is that it doesn't require much rewriting of patterns and \n  doesn't need to compute HSV blending like a real crossfader would.\n  \n  To combine patterns, first copy them together into one and de-conflict \n  any global variable names, like `v` or `t1`. Then rename each beforeRender() \n  and render2D() into anonymous functions in their respective arrays.\n  \n  For example, for the first pattern: \n    export function beforeRender(delta) {}\n  becomes:\n    beforeRenders[0] = function (delta) {}\n  and\n    export function render2D(index, x, y) {}\n  becomes\n    renderers[0] = (index, x, y) => {}\n\n*/\n\nsecondsPerMode = 5\nxFadePct = 0.3 // Percentage of the time we spend in crossfades\n\nmodeCount = 3\nbeforeRenders = array(modeCount)\nrenderers = array(modeCount)\n\nexport function beforeRender(delta) {\n  modeTime = time(secondsPerMode * modeCount/ 65.536) * modeCount\n  \n  // 0 when not crossfading; 0..0.999 when crossfading\n  pctIntoXfFade = max(((modeTime % 1) - (1 - xFadePct)) / xFadePct, 0)\n  \n  for (var m = 0; m < modeCount; m++) {\n    beforeRenders[m](delta) // computes ALL beforeRenders\n  }\n  // ToDo: For many patterns combined, enhance that to just call the 2 needed\n}\n\nexport function render2D(i, x, y) {\n  /* \n    If we're crossfading mode 1 to mode 2, we randomly pick that this pixel will\n    come from either mode 1's renderer or mode 2's. Which one it comes from \n    is probabilistically related to the percentage we're into this crossfade.\n  */\n  skew = random(1) < wave((pctIntoXfFade - 0.5) / 2) // wave makes it \"tween\"\n\n  thisPixelMode = floor((modeTime + skew) % modeCount)\n  renderers[thisPixelMode](i, x, y)\n}\n\n\n\n// Here's the code copied in from other patterns\n\n// Rotating white line\nbeforeRenders[0] = (delta) => {\n  angle = time(secondsPerMode / 65.536) * PI2\n  m = tan(angle) // Slope\n  m = clamp(m, -180, 180) // Prevent m * m overflow later\n}\n\nrenderers[0] = (index, x, y) => {\n  distance = abs(-m * x + y + (m - 1) / 2) / sqrt(m * m + 1)\n  v = clamp((0.2 - distance)/0.2, 0, 1)\n  hsv(0, 0, v * v)\n}\n\n// 'Matrix 2D Pulse' - rainbow circles\nbeforeRenders[1] = (delta) => {\n  t1 = time(3.3 / 65.536) * PI2\n  t2 = time(6.0 / 65.536) * PI2\n  z = 1 + wave(time(13 / 65.536)) * 5\n}\n\nrenderers[1] = (index, x, y) => {\n  v = h = (1 + sin(x * z + t1) + cos(y * z + t2)) * 0.5\n  v = v * v * v / 2 \n  hsv(h, 1, v)\n}\n\n// Rotating checkerboard\nbeforeRenders[2] = function (delta) {}\nrenderers[2] = function (index, x, y) {\n  phi = PI2 * time(8 / 65.536)   // Rotation angle in radians. Try 8 seconds.\n  x0 = 0.5; y0 = 0.5             // Center of rotation\n  x = x - x0;  y = y - y0        // Shift the center to the origin\n  _x = x * cos(phi) - y * sin(phi) + 3 * x0 // Rotate around origin and re-shift\n  _y = y * cos(phi) + x * sin(phi) + 2 * y0\n  t20 = time(3 / 65.536)         // Zoom scale and color. Try 3 seconds.\n  blocks = 0.5 + 2 * wave(t20)   // Number of blocks visible\n  \n  h = (_x + _y - t20 - 1)/20\n  v = (1 + floor(1 + _x * blocks) + floor(1 + _y * blocks)) % 2 < 1\n  hsv(h, 1, v)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n\n\n\n"
  },
  "preview": ""
}