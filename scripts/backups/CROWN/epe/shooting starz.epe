{
  "name": "shooting starz",
  "id": "9CiLdu3J9QqJPZED4",
  "sources": {
    "main": "\n// Fibonacci Stars pattern by Jason Coon\n// For Fibonacci256: https://www.tindie.com/products/19429\n// Meant for use in this sketch: https://github.com/jasoncoon/esp8266-fastled-webserver/tree/fibonacci256\n\n// modified by Ben Hencke to run on Pixelblaze\n\nvar starCount = 2;\nvar starMagicNumbers = [8, 13, 21]\n\nvar fibonacciToPhysical = [ 0, 39, 19, 58, 29, 9, 48, 20, 59, 38, 10, 49, 28, 1, 40, 18, 57, 30, 8, 47, 21, 60, 37, 11, 50, 27, 2, 41, 17, 56, 31, 7, 46, 22, 61, 36, 12, 51, 26, 3, 42, 16, 55, 32, 6, 45, 23, 62, 35, 13, 52, 25, 4, 43, 15, 54, 33, 5, 44, 24, 63, 34, 14, 53 ]\nvar stars = array(starCount)\nvar moveTimer\nvar gHue = 0\nvar leds = array(pixelCount)\nvar hues = array(pixelCount)\nvar fade = 0.995\nvar moveTimerTarget = 90\n\nexport function sliderSpeed(v) {\n  v = 1-v\n  moveTimerTarget = 10 + (v*v)*190\n}\n\nexport function sliderFade(v) {\n  fade = (1-(v*v)) * .0999 + .9\n}\n\n\n//setup initial stars state\nstars.mutate(() => {\n  var offset = starMagicNumbers[random(starMagicNumbers.length)]\n  return [\n    randomInt(offset),\n    offset\n    ]\n})\n\n\nexport function beforeRender(delta) {\n  gHue = (gHue + delta/40) % 256\n  \n  \n  //only move the stars every so often\n  moveTimer += delta\n  if (moveTimer > moveTimerTarget) {\n    moveTimer -= moveTimerTarget\n    updateFibonacciStars()\n  }\n  \n  //fade to black\n  leds.mutate(v => v * fade)\n  \n  drawFibonacciStars()\n}\n\nexport function render2D(index, x, y) {\n  v = leds[index]\n  h = hues[index]/ 256\n  hsv(h, 1.75 - v, pow(v, 2))\n}\n\n\nfunction randomInt(n) {\n  return floor(random(n))\n}\n\n\nfunction updateFibonacciStars() {\n  stars.forEach((star) => {\n    // move the stars\n    star[0] += star[1]\n    \n    //reset any stars out of bounds\n    if (star[0] >= pixelCount) {\n      star[1] = starMagicNumbers[random(starMagicNumbers.length)]\n      star[0] = randomInt(star[1])\n    }\n  })\n}\n\nfunction drawFibonacciStars() {\n  stars.forEach((star) => {\n    var index = star[0]\n    // draw the star\n    leds[index] = 1\n    hues[index] = star[0] + gHue\n  });\n}\n"
  },
  "preview": "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"
}