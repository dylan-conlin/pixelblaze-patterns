{
  "name": "steamed",
  "id": "HXxnPJLqMvZHJNS8R",
  "sources": {
    "main": "// Variables for animation, now initialized with default values\nexport var tf = 4, f = 2, t1_shift = 1, t2_shift = 1, t3_shift = 0.5, t4_shift = 0.5;\nexport var t1_oscillation = 0.5, t2_oscillation = 0.5;\n\n// Slider for animation speed\nexport function sliderSpeed(v) {\n  tf = 1 + 9 * v;  // Range from 1 to 10\n}\n\n// Slider for frequency\nexport function sliderFrequency(v) {\n  f = 1 + 50 * v;  // Range from 1 to 50\n}\n\n// Slider for t1 shift\nexport function sliderT1Shift(v) {\n  t1_shift = v;  // Range from 0 to 1\n}\n\n// Slider for t2 shift\nexport function sliderT2Shift(v) {\n  t2_shift = v;  // Range from 0 to 1\n}\n\n// Slider for t3 shift (hue)\nexport function sliderT3Shift(v) {\n  t3_shift = v;  // Range from 0 to 1\n}\n\n// Slider for t4 shift\nexport function sliderT4Shift(v) {\n  t4_shift = v;  // Range from 0 to 1\n}\n\n// Slider for t1 oscillation\nexport function sliderT1Oscillation(v) {\n  t1_oscillation = v;  // Range from 0 to 1\n}\n\n// Slider for t2 oscillation\nexport function sliderT2Oscillation(v) {\n  t2_oscillation = v;  // Range from 0 to 1\n}\n\n// Before each rendering cycle\nexport function beforeRender(delta) {\n  // Oscillate t1_shift and t2_shift\n  t1_shift += t1_oscillation * sin(time(tf * 0.1));\n  t2_shift += t2_oscillation * cos(time(tf * 0.1));\n\n  // Using slider-controlled variables in the computations\n  t1 = triangle(time(tf * 9.8 / 65.536) * t1_shift) * PI2;\n  t2 = wave(time(tf * 12.5 / 65.536) * t2_shift) * PI2;\n  t3 = wave(time(tf * 6.8 / 65.536) * t3_shift);\n  t4 = time(tf * 0.8 / 65.536 * t4_shift);\n}\n\n// Rest of the rendering functions remain unchanged\nexport function render2D(index, x, y) {\n  z = mix(sin(x * f + t1), cos(y * f + t2), 0.5);\n  v = wave(z + t4);\n  v = v * v * v;\n  h = triangle(z) / 2 + t3;\n  hsv(h, 1, v);\n}\n\nexport function render(index) {\n  pct = index / pixelCount;\n  render2D(index, 3 * pct, 0);\n}\n\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2;\n  y1 = (y - sin(z / 4 * PI2)) / 2;\n  render2D(index, x1, y1);\n}\n"
  },
  "preview": ""
}