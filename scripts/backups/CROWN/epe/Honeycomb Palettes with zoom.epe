{
  "name": "Honeycomb Palettes with zoom",
  "id": "wJYNZn9QJgv4CHQPL",
  "sources": {
    "main": "// palette vars start\nvar lava = [0.0, 68/255, 1/255, 84/255, 0.18, 0.071, 0.0, 0.0, 0.376, 0.443, 0.0, 0.0, 0.424, 0.557, 0.012, 0.004, 0.467, 0.686, 0.067, 0.004, 0.573, 0.835, 0.173, 0.008, 0.682, 1.0, 0.322, 0.016, 0.737, 1.0, 0.451, 0.016, 0.792, 1.0, 0.612, 0.016, 0.855, 1.0, 0.796, 0.016, 0.918, 1.0, 1.0, 0.016, 0.957, 1.0, 1.0, 0.278, 1.0, 1.0, 1.0, 1.0,];\nvar ib_jul01 = [0.0, 0.761, 0.004, 0.004, 0.369, 0.004, 0.114, 0.071, 0.518, 0.224, 0.514, 0.11, 1.0, 0.443, 0.004, 0.004,];\nvar es_vintage_57 = [0.0, 0.008, 0.004, 0.004, 0.208, 0.071, 0.004, 0.0, 0.408, 0.271, 0.114, 0.004, 0.6, 0.655, 0.529, 0.039, 1.0, 0.18, 0.22, 0.016,];\nvar es_vintage_01 = [0.0, 0.016, 0.004, 0.004, 0.2, 0.063, 0.0, 0.004, 0.298, 0.38, 0.408, 0.012, 0.396, 1.0, 0.514, 0.075, 0.498, 0.263, 0.035, 0.016, 0.6, 0.063, 0.0, 0.004, 0.898, 0.016, 0.004, 0.004, 1.0, 0.016, 0.004, 0.004,];\nvar es_rivendell_15 = [0.0, 0.004, 0.055, 0.02, 0.396, 0.063, 0.141, 0.055, 0.647, 0.22, 0.267, 0.118, 0.949, 0.588, 0.612, 0.388, 1.0, 0.588, 0.612, 0.388,];\nvar rgi_15 = [0.0, 0.016, 0.004, 0.122, 0.122, 0.216, 0.004, 0.063, 0.247, 0.773, 0.012, 0.027, 0.373, 0.231, 0.008, 0.067, 0.498, 0.024, 0.008, 0.133, 0.624, 0.153, 0.024, 0.129, 0.749, 0.439, 0.051, 0.125, 0.875, 0.22, 0.035, 0.137, 1.0, 0.086, 0.024, 0.149,];\nvar retro2_16 = [0.0, 0.737, 0.529, 0.004, 1.0, 0.18, 0.027, 0.004,];\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0, 0.247, 0.09, 0.0, 1.0, 0.498, 0.263, 0.0, 1.0, 0.749, 0.557, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar es_pinksplash_08 = [0.0, 0.494, 0.043, 1.0, 0.498, 0.773, 0.004, 0.086, 0.686, 0.824, 0.616, 0.675, 0.867, 0.616, 0.012, 0.439, 1.0, 0.616, 0.012, 0.439,];\nvar es_pinksplash_07 = [0.0, 0.898, 0.004, 0.004, 0.239, 0.949, 0.016, 0.247, 0.396, 1.0, 0.047, 1.0, 0.498, 0.976, 0.318, 0.988, 0.6, 1.0, 0.043, 0.922, 0.757, 0.957, 0.02, 0.267, 1.0, 0.91, 0.004, 0.02,];\nvar Coral_reef = [0.0, 0.157, 0.78, 0.773, 0.196, 0.039, 0.596, 0.608, 0.376, 0.004, 0.435, 0.471, 0.376, 0.169, 0.498, 0.635, 0.545, 0.039, 0.286, 0.435, 1.0, 0.004, 0.133, 0.278,];\nvar es_ocean_breeze_068 = [0.0, 0.392, 0.612, 0.6, 0.2, 0.004, 0.388, 0.537, 0.396, 0.004, 0.267, 0.329, 0.408, 0.137, 0.557, 0.659, 0.698, 0.0, 0.247, 0.459, 1.0, 0.004, 0.039, 0.039,];\nvar es_ocean_breeze_036 = [0.0, 0.004, 0.024, 0.027, 0.349, 0.004, 0.388, 0.435, 0.6, 0.565, 0.82, 1.0, 1.0, 0.0, 0.286, 0.322,];\nvar departure = [0.0, 0.031, 0.012, 0.0, 0.165, 0.09, 0.027, 0.0, 0.247, 0.294, 0.149, 0.024, 0.329, 0.663, 0.388, 0.149, 0.416, 0.835, 0.663, 0.467, 0.455, 1.0, 1.0, 1.0, 0.541, 0.529, 1.0, 0.541, 0.58, 0.086, 1.0, 0.094, 0.667, 0.0, 1.0, 0.0, 0.749, 0.0, 0.533, 0.0, 0.831, 0.0, 0.216, 0.0, 1.0, 0.0, 0.216, 0.0,];\nvar es_landscape_64 = [0.0, 0.0, 0.0, 0.0, 0.145, 0.008, 0.098, 0.004, 0.298, 0.059, 0.451, 0.02, 0.498, 0.31, 0.835, 0.004, 0.502, 0.494, 0.827, 0.184, 0.51, 0.737, 0.82, 0.969, 0.6, 0.565, 0.714, 0.804, 0.8, 0.231, 0.459, 0.98, 1.0, 0.004, 0.145, 0.753,];\nvar es_landscape_33 = [0.0, 0.004, 0.02, 0.0, 0.075, 0.125, 0.09, 0.004, 0.149, 0.631, 0.216, 0.004, 0.247, 0.898, 0.565, 0.004, 0.259, 0.153, 0.557, 0.29, 1.0, 0.004, 0.016, 0.004,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016, 0.169, 1.0, 0.267, 0.098, 0.337, 1.0, 0.027, 0.098, 0.498, 1.0, 0.322, 0.404, 0.667, 1.0, 1.0, 0.949, 0.82, 0.165, 1.0, 0.086, 1.0, 0.341, 1.0, 0.255,];\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969, 0.188, 1.0, 0.533, 1.0, 0.349, 0.863, 0.114, 0.886, 0.627, 0.027, 0.322, 0.698, 0.847, 0.004, 0.486, 0.427, 1.0, 0.004, 0.486, 0.427,];\nvar gr64_hult = [0.0, 0.004, 0.486, 0.427, 0.259, 0.004, 0.365, 0.31, 0.408, 0.204, 0.255, 0.004, 0.51, 0.451, 0.498, 0.004, 0.588, 0.204, 0.255, 0.004, 0.788, 0.004, 0.337, 0.282, 0.937, 0.0, 0.216, 0.176, 1.0, 0.0, 0.216, 0.176,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008, 0.165, 0.835, 0.576, 0.094, 0.329, 0.404, 0.859, 0.204, 0.498, 0.012, 0.859, 0.812, 0.667, 0.004, 0.188, 0.839, 0.831, 0.004, 0.004, 0.435, 1.0, 0.004, 0.027, 0.129,];\nvar ib15 = [0.0, 0.443, 0.357, 0.576, 0.282, 0.616, 0.345, 0.306, 0.349, 0.816, 0.333, 0.129, 0.42, 1.0, 0.114, 0.043, 0.553, 0.537, 0.122, 0.153, 1.0, 0.231, 0.129, 0.349,];\nvar Fuschia_7 = [0.0, 0.169, 0.012, 0.6, 0.247, 0.392, 0.016, 0.404, 0.498, 0.737, 0.02, 0.259, 0.749, 0.631, 0.043, 0.451, 1.0, 0.529, 0.078, 0.714,];\nvar es_emerald_dragon_08 = [0.0, 0.38, 1.0, 0.004, 0.396, 0.184, 0.522, 0.004, 0.698, 0.051, 0.169, 0.004, 1.0, 0.008, 0.039, 0.004,];\nvar Colorfull = [0.0, 0.039, 0.333, 0.02, 0.098, 0.114, 0.427, 0.071, 0.235, 0.231, 0.541, 0.165, 0.365, 0.325, 0.388, 0.204, 0.416, 0.431, 0.259, 0.251, 0.427, 0.482, 0.192, 0.255, 0.443, 0.545, 0.137, 0.259, 0.455, 0.753, 0.459, 0.384, 0.486, 1.0, 1.0, 0.537, 0.659, 0.392, 0.706, 0.608, 1.0, 0.086, 0.475, 0.682,];\nvar Magenta_Evening = [0.0, 0.278, 0.106, 0.153, 0.122, 0.51, 0.043, 0.2, 0.247, 0.835, 0.008, 0.251, 0.275, 0.91, 0.004, 0.259, 0.298, 0.988, 0.004, 0.271, 0.424, 0.482, 0.008, 0.2, 1.0, 0.18, 0.035, 0.137,];\nvar Pink_Purple = [0.0, 0.075, 0.008, 0.153, 0.098, 0.102, 0.016, 0.176, 0.2, 0.129, 0.024, 0.204, 0.298, 0.267, 0.243, 0.49, 0.4, 0.463, 0.733, 0.941, 0.427, 0.639, 0.843, 0.969, 0.447, 0.851, 0.957, 1.0, 0.478, 0.624, 0.584, 0.867, 0.584, 0.443, 0.306, 0.737, 0.718, 0.502, 0.224, 0.608, 1.0, 0.573, 0.157, 0.482,]\nvar Sunset_Real = [0.0, 0.471, 0.0, 0.0, 0.086, 0.702, 0.086, 0.0, 0.2, 1.0, 0.408, 0.0, 0.333, 0.655, 0.086, 0.071, 0.529, 0.392, 0.0, 0.404, 0.776, 0.063, 0.0, 0.51, 1.0, 0.0, 0.0, 0.627,]\nvar es_autumn_19 = [0.0, 0.102, 0.004, 0.004, 0.2, 0.263, 0.016, 0.004, 0.329, 0.463, 0.055, 0.004, 0.408, 0.537, 0.596, 0.204, 0.439, 0.443, 0.255, 0.004, 0.478, 0.522, 0.584, 0.231, 0.486, 0.537, 0.596, 0.204, 0.529, 0.443, 0.255, 0.004, 0.557, 0.545, 0.604, 0.18, 0.639, 0.443, 0.051, 0.004, 0.8, 0.216, 0.012, 0.004, 0.976, 0.067, 0.004, 0.004, 1.0, 0.067, 0.004, 0.004,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0, 0.165, 0.0, 0.0, 0.176, 0.329, 0.0, 0.0, 1.0, 0.498, 0.165, 0.0, 1.0, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 1.0, 1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Magenta_Red = [0.0, 0.0, 0.0, 0.0, 0.247, 0.165, 0.0, 0.176, 0.498, 1.0, 0.0, 1.0, 0.749, 1.0, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0, 0.165, 0.165, 0.0, 0.0, 0.329, 1.0, 0.0, 0.0, 0.498, 1.0, 0.0, 0.176, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0, 0.247, 0.0, 0.216, 1.0, 0.498, 0.0, 1.0, 1.0, 0.749, 0.165, 1.0, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar palettes = [ib_jul01, es_vintage_57, es_vintage_01, es_rivendell_15, rgi_15, retro2_16, Analogous_1, es_pinksplash_08, es_pinksplash_07, Coral_reef, es_ocean_breeze_068, es_ocean_breeze_036, departure, es_landscape_64, es_landscape_33, rainbowsherbet, gr65_hult, gr64_hult, GMT_drywet, ib15, Fuschia_7, es_emerald_dragon_08, lava, Colorfull, Magenta_Evening, Pink_Purple, Sunset_Real, es_autumn_19, BlacK_Blue_Magenta_White, BlacK_Magenta_Red, BlacK_Red_Magenta_Yellow, Blue_Cyan_Yellow,];\n// palette vars end\n\n// slider code start\nexport var zoom;\nexport var speed;\nvar rangeSlider = function(v, minValue, maxValue, isFloored, isReversed) {\n  var valueRange = maxValue - minValue;\n  var scaledValue = minValue + (v * valueRange);\n  if (isReversed) {\n    scaledValue = maxValue - (v * valueRange);\n  }\n  if (isFloored) {\n    scaledValue = floor(scaledValue);\n  }\n  return scaledValue;\n};\nexport function sliderZoom(v) { \n  zoom = 0.1 + v / 0.75;\n}\nexport function sliderSpeed(v) { \n  speed = rangeSlider(v, 1, 5, false, true)\n}\nexport function toggleDisableSliders(v) {\n  if (v) {\n    speed = 12.000000\n    zoom = 0.3000000\n  }\n}\n// slider code end\n\n// palette code start\nvar PALETTE_HOLD_TIME = 3\nvar PALETTE_TRANSITION_TIME = 1;\nexport var currentIndex = 0;\nvar nextIndex = (currentIndex + 1) % palettes.length;\nexport function triggerIncrementPalette(){\n  currentIndex = (currentIndex + 1) % palettes.length;\n}\nvar pixel1 = array(3);\nvar pixel2 = array(3);\nvar PALETTE_SIZE = 16;\nvar currentPalette = array(4 * PALETTE_SIZE)\nvar inTransition = 0;\nvar blendValue = 0;\nrunTime = 0\nsetPalette(currentPalette);\nbuildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)  \nfunction paint2(v, rgbArray, pal) {\n  var k,u,l;\n  var rows = pal.length / 4;\n  for (i = 0; i < rows;i++) {\n    k = pal[i * 4];\n    if (k >= v) break;\n  }\n  if ((i == 0) || (i >= rows) || (k == v)) {\n    i = 4 * min(rows - 1, i);\n    rgbArray[0] = pal[i+1];\n    rgbArray[1] = pal[i+2];\n    rgbArray[2] = pal[i+3];    \n  }\n  else {\n    i = 4 * (i-1);\n    l = pal[i]   // lower bound    \n    u = pal[i+4]; // upper bound\n    pct = 1 -(u - v) / (u-l);\n    rgbArray[0] = mix(pal[i+1],pal[i+5],pct);\n    rgbArray[1] = mix(pal[i+2],pal[i+6],pct);\n    rgbArray[2] = mix(pal[i+3],pal[i+7],pct);    \n  }\n}\nfunction paletteMix(pal1, pal2, colorPct,palettePct) {\n  paint2(colorPct,pixel1,pal1);\n  paint2(colorPct,pixel2,pal2);  \n  rgb(mix(pixel1[0],pixel2[0],palettePct),\n      mix(pixel1[1],pixel2[1],palettePct),\n      mix(pixel1[2],pixel2[2],palettePct)\n   )\n}\nfunction buildBlendedPalette(pal1, pal2, blend) {\n  var entry = 0;\n  for (var i = 0; i < PALETTE_SIZE;i++) {\n    var v = i / PALETTE_SIZE;\n    paint2(v,pixel1,pal1);\n    paint2(v,pixel2,pal2);  \n    currentPalette[entry++] = v;\n    currentPalette[entry++] = mix(pixel1[0],pixel2[0],blend)\n    currentPalette[entry++] = mix(pixel1[1],pixel2[1],blend)\n    currentPalette[entry++] = mix(pixel1[2],pixel2[2],blend)    \n  }\n}\n// palette code end\n\n// render code start\nexport function beforeRender(delta) {\n  runTime = (runTime + delta / 1000) % 3600;\n  // Palette Manager - handle palette switching and blending with a \n  // tiny state machine  \n  if (inTransition) {\n    if (runTime >= PALETTE_TRANSITION_TIME) {\n      // at the end of a palette transition, switch to the \n      // next set of palettes and reset everything for the\n      // normal hold period.\n      runTime = 0;\n      inTransition = 0\n      blendValue = 0\n      currentIndex = (currentIndex + 1) % palettes.length\n      nextIndex = (nextIndex + 1) % palettes.length   \n    } else {\n      // evaluate blend level during transition\n      blendValue = runTime / PALETTE_TRANSITION_TIME\n    }\n    // blended palette is only recalculated during transition times. The rest of \n    // the time, we run with the current palette at full speed.\n    buildBlendedPalette(palettes[currentIndex],palettes[nextIndex],blendValue)          \n  }\n  else if (runTime >= PALETTE_HOLD_TIME) {\n    // when hold period ends, switch to palette transition\n    runTime = 0\n    inTransition = 1\n  }\n  tf = speed // Overall animation duration constant. A smaller duration runs faster.\n  f  = wave(time(tf * 6.6 / 65.536)) * 5 + 2 // 2 to 7; Frequency (cell density)\n  t1 = wave(time(tf * 9.8 / 65.536)) * PI2  // 0 to 2*PI; Oscillates x shift\n  t2 = wave(time(tf * 12.5 / 65.536)) * PI2 // 0 to 2*PI; Oscillates y shift\n  t3 = wave(time(tf * 9.8 / 65.536)) // Shift h: wavelength of tf * 9.8 s\n  t4 = time(tf * 0.66 / 65.536) // Shift v: 0 to 1 every 0.66 sec\n}\nexport function render2D(index, x, y) {\n  x /= zoom\n  y /= zoom\n  z = (1 + sin(x * f + t1) + cos(y * f + t2)) * .5 \n\n  v = wave(z + t4)\n  v = v * v * v\n  h = triangle(z) / 2 + t3\n  paint(h,v)\n}\nexport function render(index) {\n  pct = index / pixelCount \n  render2D(index, 3 * pct, 0)\n}\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n// render code end\n"
  },
  "preview": "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"
}