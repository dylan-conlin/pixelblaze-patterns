{
  "name": "Perlin fire palettes shimmer",
  "id": "Zctt6BgiHNb25xhwT",
  "sources": {
    "main": "//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\n\nexport var mode = 1\nexport var fireScale = 3\nexport var risingSpeed = 1\nexport var morphSpeed = 1\n\n// Parameter names that correspond to Pixelblaze UI controls\nexport var shimmer = true;\nexport var transition = 0.10;\nexport var secondsPerPalette = 10;\n\n// Internal state variables\nvar paletteIndex;\nvar lastPaletteIndex = -1;\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\n// Helper function to handle palette transitions\nfunction handlePaletteTransitions() {\n  paletteIndex = time(secondsPerPalette / 65.536 * palettes.length) * palettes.length;\n  if (frac(paletteIndex) > (1-transition)) {\n    var transitionFactor = (frac(paletteIndex) - (1-transition)) * (1/transition);\n    if (shimmer) {\n      if (wave(transitionFactor/2 - .25) > random(1)) {\n        paletteIndex = mod(paletteIndex + 1, palettes.length);\n      }\n    }\n  }\n  // Only set the palette if the floor index has changed\n  var floorPaletteIndex = floor(paletteIndex);\n  if (floorPaletteIndex != lastPaletteIndex) {\n    setPalette(palettes[floorPaletteIndex]);\n    lastPaletteIndex = floorPaletteIndex;\n  }\n}\n\nexport function beforeRender(delta) {\n  timeCounter += delta; // Increment the time counter by the time since the last frame\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  handlePaletteTransitions();\n  v = modeFn(x, y + yTime, morphTime ) \n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  v = v * y/fireScale \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n\n\n\n\nvar lava = [0.0, 68/255, 1/255, 84/255, 0.18, 0.071, 0.0, 0.0, 0.376, 0.443, 0.0, 0.0, 0.424, 0.557, 0.012, 0.004, 0.467, 0.686, 0.067, 0.004, 0.573, 0.835, 0.173, 0.008, 0.682, 1.0, 0.322, 0.016, 0.737, 1.0, 0.451, 0.016, 0.792, 1.0, 0.612, 0.016, 0.855, 1.0, 0.796, 0.016, 0.918, 1.0, 1.0, 0.016, 0.957, 1.0, 1.0, 0.278, 1.0, 1.0, 1.0, 1.0,];\nvar ib_jul01 = [0.0, 0.761, 0.004, 0.004, 0.369, 0.004, 0.114, 0.071, 0.518, 0.224, 0.514, 0.11, 1.0, 0.443, 0.004, 0.004,];\nvar es_vintage_57 = [0.0, 0.008, 0.004, 0.004, 0.208, 0.071, 0.004, 0.0, 0.408, 0.271, 0.114, 0.004, 0.6, 0.655, 0.529, 0.039, 1.0, 0.18, 0.22, 0.016,];\nvar es_vintage_01 = [0.0, 0.016, 0.004, 0.004, 0.2, 0.063, 0.0, 0.004, 0.298, 0.38, 0.408, 0.012, 0.396, 1.0, 0.514, 0.075, 0.498, 0.263, 0.035, 0.016, 0.6, 0.063, 0.0, 0.004, 0.898, 0.016, 0.004, 0.004, 1.0, 0.016, 0.004, 0.004,];\nvar es_rivendell_15 = [0.0, 0.004, 0.055, 0.02, 0.396, 0.063, 0.141, 0.055, 0.647, 0.22, 0.267, 0.118, 0.949, 0.588, 0.612, 0.388, 1.0, 0.588, 0.612, 0.388,];\nvar rgi_15 = [0.0, 0.016, 0.004, 0.122, 0.122, 0.216, 0.004, 0.063, 0.247, 0.773, 0.012, 0.027, 0.373, 0.231, 0.008, 0.067, 0.498, 0.024, 0.008, 0.133, 0.624, 0.153, 0.024, 0.129, 0.749, 0.439, 0.051, 0.125, 0.875, 0.22, 0.035, 0.137, 1.0, 0.086, 0.024, 0.149,];\nvar retro2_16 = [0.0, 0.737, 0.529, 0.004, 1.0, 0.18, 0.027, 0.004,];\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0, 0.247, 0.09, 0.0, 1.0, 0.498, 0.263, 0.0, 1.0, 0.749, 0.557, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar es_pinksplash_08 = [0.0, 0.494, 0.043, 1.0, 0.498, 0.773, 0.004, 0.086, 0.686, 0.824, 0.616, 0.675, 0.867, 0.616, 0.012, 0.439, 1.0, 0.616, 0.012, 0.439,];\nvar es_pinksplash_07 = [0.0, 0.898, 0.004, 0.004, 0.239, 0.949, 0.016, 0.247, 0.396, 1.0, 0.047, 1.0, 0.498, 0.976, 0.318, 0.988, 0.6, 1.0, 0.043, 0.922, 0.757, 0.957, 0.02, 0.267, 1.0, 0.91, 0.004, 0.02,];\nvar Coral_reef = [0.0, 0.157, 0.78, 0.773, 0.196, 0.039, 0.596, 0.608, 0.376, 0.004, 0.435, 0.471, 0.376, 0.169, 0.498, 0.635, 0.545, 0.039, 0.286, 0.435, 1.0, 0.004, 0.133, 0.278,];\nvar es_ocean_breeze_068 = [0.0, 0.392, 0.612, 0.6, 0.2, 0.004, 0.388, 0.537, 0.396, 0.004, 0.267, 0.329, 0.408, 0.137, 0.557, 0.659, 0.698, 0.0, 0.247, 0.459, 1.0, 0.004, 0.039, 0.039,];\nvar es_ocean_breeze_036 = [0.0, 0.004, 0.024, 0.027, 0.349, 0.004, 0.388, 0.435, 0.6, 0.565, 0.82, 1.0, 1.0, 0.0, 0.286, 0.322,];\nvar departure = [0.0, 0.031, 0.012, 0.0, 0.165, 0.09, 0.027, 0.0, 0.247, 0.294, 0.149, 0.024, 0.329, 0.663, 0.388, 0.149, 0.416, 0.835, 0.663, 0.467, 0.455, 1.0, 1.0, 1.0, 0.541, 0.529, 1.0, 0.541, 0.58, 0.086, 1.0, 0.094, 0.667, 0.0, 1.0, 0.0, 0.749, 0.0, 0.533, 0.0, 0.831, 0.0, 0.216, 0.0, 1.0, 0.0, 0.216, 0.0,];\nvar es_landscape_64 = [0.0, 0.0, 0.0, 0.0, 0.145, 0.008, 0.098, 0.004, 0.298, 0.059, 0.451, 0.02, 0.498, 0.31, 0.835, 0.004, 0.502, 0.494, 0.827, 0.184, 0.51, 0.737, 0.82, 0.969, 0.6, 0.565, 0.714, 0.804, 0.8, 0.231, 0.459, 0.98, 1.0, 0.004, 0.145, 0.753,];\nvar es_landscape_33 = [0.0, 0.004, 0.02, 0.0, 0.075, 0.125, 0.09, 0.004, 0.149, 0.631, 0.216, 0.004, 0.247, 0.898, 0.565, 0.004, 0.259, 0.153, 0.557, 0.29, 1.0, 0.004, 0.016, 0.004,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016, 0.169, 1.0, 0.267, 0.098, 0.337, 1.0, 0.027, 0.098, 0.498, 1.0, 0.322, 0.404, 0.667, 1.0, 1.0, 0.949, 0.82, 0.165, 1.0, 0.086, 1.0, 0.341, 1.0, 0.255,];\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969, 0.188, 1.0, 0.533, 1.0, 0.349, 0.863, 0.114, 0.886, 0.627, 0.027, 0.322, 0.698, 0.847, 0.004, 0.486, 0.427, 1.0, 0.004, 0.486, 0.427,];\nvar gr64_hult = [0.0, 0.004, 0.486, 0.427, 0.259, 0.004, 0.365, 0.31, 0.408, 0.204, 0.255, 0.004, 0.51, 0.451, 0.498, 0.004, 0.588, 0.204, 0.255, 0.004, 0.788, 0.004, 0.337, 0.282, 0.937, 0.0, 0.216, 0.176, 1.0, 0.0, 0.216, 0.176,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008, 0.165, 0.835, 0.576, 0.094, 0.329, 0.404, 0.859, 0.204, 0.498, 0.012, 0.859, 0.812, 0.667, 0.004, 0.188, 0.839, 0.831, 0.004, 0.004, 0.435, 1.0, 0.004, 0.027, 0.129,];\nvar ib15 = [0.0, 0.443, 0.357, 0.576, 0.282, 0.616, 0.345, 0.306, 0.349, 0.816, 0.333, 0.129, 0.42, 1.0, 0.114, 0.043, 0.553, 0.537, 0.122, 0.153, 1.0, 0.231, 0.129, 0.349,];\nvar Fuschia_7 = [0.0, 0.169, 0.012, 0.6, 0.247, 0.392, 0.016, 0.404, 0.498, 0.737, 0.02, 0.259, 0.749, 0.631, 0.043, 0.451, 1.0, 0.529, 0.078, 0.714,];\nvar es_emerald_dragon_08 = [0.0, 0.38, 1.0, 0.004, 0.396, 0.184, 0.522, 0.004, 0.698, 0.051, 0.169, 0.004, 1.0, 0.008, 0.039, 0.004,];\nvar Colorfull = [0.0, 0.039, 0.333, 0.02, 0.098, 0.114, 0.427, 0.071, 0.235, 0.231, 0.541, 0.165, 0.365, 0.325, 0.388, 0.204, 0.416, 0.431, 0.259, 0.251, 0.427, 0.482, 0.192, 0.255, 0.443, 0.545, 0.137, 0.259, 0.455, 0.753, 0.459, 0.384, 0.486, 1.0, 1.0, 0.537, 0.659, 0.392, 0.706, 0.608, 1.0, 0.086, 0.475, 0.682,];\nvar Magenta_Evening = [0.0, 0.278, 0.106, 0.153, 0.122, 0.51, 0.043, 0.2, 0.247, 0.835, 0.008, 0.251, 0.275, 0.91, 0.004, 0.259, 0.298, 0.988, 0.004, 0.271, 0.424, 0.482, 0.008, 0.2, 1.0, 0.18, 0.035, 0.137,];\nvar Pink_Purple = [0.0, 0.075, 0.008, 0.153, 0.098, 0.102, 0.016, 0.176, 0.2, 0.129, 0.024, 0.204, 0.298, 0.267, 0.243, 0.49, 0.4, 0.463, 0.733, 0.941, 0.427, 0.639, 0.843, 0.969, 0.447, 0.851, 0.957, 1.0, 0.478, 0.624, 0.584, 0.867, 0.584, 0.443, 0.306, 0.737, 0.718, 0.502, 0.224, 0.608, 1.0, 0.573, 0.157, 0.482,]\nvar Sunset_Real = [0.0, 0.471, 0.0, 0.0, 0.086, 0.702, 0.086, 0.0, 0.2, 1.0, 0.408, 0.0, 0.333, 0.655, 0.086, 0.071, 0.529, 0.392, 0.0, 0.404, 0.776, 0.063, 0.0, 0.51, 1.0, 0.0, 0.0, 0.627,]\nvar es_autumn_19 = [0.0, 0.102, 0.004, 0.004, 0.2, 0.263, 0.016, 0.004, 0.329, 0.463, 0.055, 0.004, 0.408, 0.537, 0.596, 0.204, 0.439, 0.443, 0.255, 0.004, 0.478, 0.522, 0.584, 0.231, 0.486, 0.537, 0.596, 0.204, 0.529, 0.443, 0.255, 0.004, 0.557, 0.545, 0.604, 0.18, 0.639, 0.443, 0.051, 0.004, 0.8, 0.216, 0.012, 0.004, 0.976, 0.067, 0.004, 0.004, 1.0, 0.067, 0.004, 0.004,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0, 0.165, 0.0, 0.0, 0.176, 0.329, 0.0, 0.0, 1.0, 0.498, 0.165, 0.0, 1.0, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 1.0, 1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Magenta_Red = [0.0, 0.0, 0.0, 0.0, 0.247, 0.165, 0.0, 0.176, 0.498, 1.0, 0.0, 1.0, 0.749, 1.0, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0, 0.165, 0.165, 0.0, 0.0, 0.329, 1.0, 0.0, 0.0, 0.498, 1.0, 0.0, 0.176, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0, 0.247, 0.0, 0.216, 1.0, 0.498, 0.0, 1.0, 1.0, 0.749, 0.165, 1.0, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar palettes = [\n  // ib_jul01,\n  // es_vintage_57,\n  // es_vintage_01,\n  // es_rivendell_15,\n  // rgi_15,\n  // retro2_16,\n  \n  // yes:\n  \n  Analogous_1,\n  lava,\n  Pink_Purple,\n  BlacK_Blue_Magenta_White,\n  BlacK_Magenta_Red,\n  BlacK_Red_Magenta_Yellow,\n  Blue_Cyan_Yellow,\n \n  // es_pinksplash_08,\n  // es_pinksplash_07,\n  // Coral_reef,\n  // es_ocean_breeze_068,\n  // es_ocean_breeze_036,\n  // departure,\n  // es_landscape_64,\n  // es_landscape_33,\n   // rainbowsherbet,\n  // gr65_hult,\n  // gr64_hult,\n  // GMT_drywet,\n  // ib15,\n  // Fuschia_7,\n  // es_emerald_dragon_08,\n  // Colorfull,\n  // Magenta_Evening,\n  \n  // Sunset_Real,\n  // es_autumn_19,\n  \n];\n\n\nvar rangeSlider = function(v, minValue, maxValue, isFloored, isReversed) {var valueRange = maxValue - minValue; var scaledValue = minValue + (v * valueRange); if (isReversed) {scaledValue = maxValue - (v * valueRange);} if (isFloored) {scaledValue = floor(scaledValue);} return scaledValue;};\nexport function sliderTransitionTime(v) {\n  transition = rangeSlider(v, 0.10, 0.20, false, false);\n}\nexport function toggleShimmer(v) {\n  shimmer = v;\n}\nexport function inputNumberSecondsPerPalette(v) {\n  secondsPerPalette = v;\n}\nexport function showNumberPalette() {\n  return paletteIndex;\n}\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function toggleDisableSliders(v) {\n  if (v) {\n    fireScale =\t11.000000\n    mode = 0.000000\n    morphSpeed = 1.235062\n    risingSpeed = 5.199982\n  }\n}\n"
  },
  "preview": "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"
}