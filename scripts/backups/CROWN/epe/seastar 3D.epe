{
  "name": "seastar 3D",
  "id": "nEfuerkrJPzKStT8q",
  "sources": {
    "main": "// Sea Star 2D\n//\n// 10/27/2021 ZRanger1\n\nvar timebase;\nexport var complexity = 1.5;\nexport var nSides = 5;\nexport var speed = 1.75;\nvar slice = PI / nSides;\nvar waveScale = 8;       // larger values == more complex waves\nvar contrast = 0.02023;  // smaller values == higher contrast\n\ntranslate(-0.5,-0.5)\nscale(.5,.5)\n\nexport function sliderSpeed(v) {\n  speed = (4 * v);\n}\n\nexport function sliderComplexity(v) {\n  complexity = 1+(1.5*v);\n}\n\nexport function sliderReflections(v) {\n  nSides = 1+floor(v * 15);\n  slice = PI / nSides;  \n  waveScale = 8;  \n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 3600;\n  t = timebase * speed; \n  t2 = t / 2 * complexity;\n}\n\n// sets up a kaleidoscope effect - makes the image repeat over evenly divided\n// rotated \"slices\" about the center.\nvar x1,y1,s,temp;\nexport function render2D(index,x,y) {\n  var r,g,b;\n  \n  // fold coordinate space across our slices\n  var angle = atan2(y, x);\n  angle = mod(angle, 2.0 * slice);\n  \n  // rotate image over time\n  angle += t;\n  \n  // map new rotated coordinates back to original image space\n  var d = hypot(x,y);\n  x1 = 1-(d * cos(angle) * waveScale + t2);\n  y1 = d * sin(angle);  \n  \n  // draw a few iterations of our wave function over a short time interval  \n  for (i = 0; i < 3;i++) {\n    y1 += sin(x1*(i*complexity) + (t + i/complexity)) * 0.5;\n    b += i * abs(contrast/y1);\n  }\n\n  b = clamp(b,0,1);\n  hsv(0.6667 - (0.075 * b),1,b)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}