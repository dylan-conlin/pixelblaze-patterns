{
  "name": "Perlin fire",
  "id": "EGo5YspayRQwmRYNB",
  "sources": {
    "main": "/* \nDemonstration of Perlin noise functions to generate fire \nThe first mode shows Perlin noise scaled to 0-1.\nThe second shows a fractal ridge function, creating fire tendrils.\nThe third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\nThe fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n2022 Ben Hencke (wizard)\n*/\n\nvar rgbGradient = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nsetPalette(rgbGradient)\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\nexport var mode = 1, fireScale = 3, risingSpeed = 1, morphSpeed = 1\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function beforeRender(delta) {\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}"
  },
  "preview": "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"
}