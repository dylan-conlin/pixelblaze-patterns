{
  "name": "sparkz",
  "id": "QGFbwvdcEHgKA7bap",
  "sources": {
    "main": "var rgbGradient = [\n  0,    0, 0, 0,  // Black\n  0.2,  1, 0.5, 0, // Orange\n  0.8,  1, 1, 1,  // White\n  1,    0.5, 0.5, 0.5 // Gray\n]\nsetPalette(rgbGradient)\n\n\n// Variants of Perlin noise for spark effect\nmodes = [\n  (x, y, z) => random(1) < 0.1 * perlin(x, y, z, morphSpeed) ? random(1) : 0, // Perlin-controlled random sparks\n  (x, y, z) => perlin(x, y, z, morphSpeed) > 0.8 ? random(1) : 0, // Perlin threshold sparks\n  (x, y, z) => random(1) < 0.05 ? perlin(x, y, z, morphSpeed) : 0, // Sparse Perlin sparks\n  (x, y, z) => (perlin(x * 10, y * 10, z, morphSpeed) + 1) / 2 * random(1) < 0.1 ? 1 : 0 // High frequency Perlin sparks\n]\n\n\nexport var mode = 0, sparkScale = 1, risingSpeed = 1, morphSpeed = 1\nexport function sliderMode(v) {\n  mode = round(v * (modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  sparkScale = 1 + v * 10\n}\nexport function sliderRisingSpeed(v) {\n  v = 1 - v\n  risingSpeed = 0.2 + (v * v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1 - v\n  morphSpeed = 0.2 + (v * v) * 5\n}\n\nexport function beforeRender(delta) {\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(sparkScale, sparkScale)\n}\n\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n\nexport function render2D(index, x, y) {\n  v = modeFn(x, y + yTime, morphTime)\n  v = v * 2 * (1 - abs(x / sparkScale * 1.8))\n  v = v * y / sparkScale\n  v = min(v, 1)\n  paint(v, v)\n}\n"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCACWAGQDASIAAhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAAAAEJ/8QAHRABAQEBAAIDAQAAAAAAAAAAAAERAiFBMWFxkf/EABQBAQAAAAAAAAAAAAAAAAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwDKoAAAAAAABeeL3uTcm38Q9AAfIAAAAAAAAAWZbJZfuewAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACTb5snj2ABgAAAAAAAAAAAAAAAAAAAAAAAAFzJksuedq8d9cXeerzcs2XPFmWfwAQAAAAAH//Z"
}