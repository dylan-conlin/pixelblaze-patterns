{
  "name": "perlin fire (new)",
  "id": "KtGnn5CdoyhMazo2B",
  "sources": {
    "main": "/* \nDemonstration of Perlin noise functions to generate fire \nThe first mode shows Perlin noise scaled to 0-1.\nThe second shows a fractal ridge function, creating fire tendrils.\nThe third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\nThe fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n2022 Ben Hencke (wizard)\n*/\n\nvar rgbGradient = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n // 0.8,  1, 1, 0,\n//  1,    1, 1, 1\n  0.8,  1, 0.5, 0, // Orange-ish instead of yellow\n   1,    1, 0.8, 0.8 // Light red instead of white\n]\n\nsetPalette(rgbGradient)\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\nexport var fireHeight = 1.0;\nexport var mode = 1, fireScale = 3, risingSpeed = 1, morphSpeed = 1\nexport var xOffset = 0.0;\nexport var yOffset = 0.0;\nexport var zOffset = 0.0;\n\nexport function sliderXOffset(v) {\n  xOffset = v * 2 - 1; // Adjust the range as needed\n}\n\nexport function sliderYOffset(v) {\n  yOffset = v * 2 - 1; // Adjust the range as needed\n}\n\nexport function sliderZOffset(v) {\n  zOffset = v * 2 - 1; // Adjust the range as needed\n}\n\nexport function sliderFireHeight(v) {\n  fireHeight = v * 3; // Scale according to your preference, here 0-2 range\n}\n\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function beforeRender(delta) {\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  // Apply offsets to x and y\n  x += xOffset;\n  y += yOffset;\n\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime )\n\n  // Adjust the intensity based on the fireHeight slider\n  v *= fireHeight; // Adjusts the visibility threshold\n\n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  // Apply offsets to x, y, and z\n  x += xOffset;\n  y += yOffset;\n  z += zOffset;\n\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n"
  },
  "preview": "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"
}