{
  "name": "fast pulse palettes",
  "id": "ygDR2xm9TEvoHQoWc",
  "sources": {
    "main": "/*\n  Fast pulse 2D/3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\n// Parameter names that correspond to Pixelblaze UI controls\nexport var shimmer = true;\nexport var transition = 0.10;\nexport var secondsPerPalette = 10;\n\n// Internal state variables\nvar paletteIndex;\nvar lastPaletteIndex = -1;\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\n// Helper function to handle palette transitions\nfunction handlePaletteTransitions() {\n    paletteIndex = time(secondsPerPalette / 65.536 * palettes.length) * palettes.length;\n    if (frac(paletteIndex) > (1-transition)) {\n        var transitionFactor = (frac(paletteIndex) - (1-transition)) * (1/transition);\n        if (shimmer) {\n            if (wave(transitionFactor/2 - .25) > random(1)) {\n                paletteIndex = mod(paletteIndex + 1, palettes.length);\n            }\n        }\n    }\n    // Only set the palette if the floor index has changed\n    var floorPaletteIndex = floor(paletteIndex);\n    if (floorPaletteIndex != lastPaletteIndex) {\n        setPalette(palettes[floorPaletteIndex]);\n        lastPaletteIndex = floorPaletteIndex;\n    }\n}\n\nexport function beforeRender(delta) {\n    /*\n      This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n      both as the single output hue, as well as a basis for the function that \n      creates the rotating / bouncing pulse(s).\n    */\n    t1 = time(10)\n    \n    a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n    b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n    c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n    handlePaletteTransitions();\n    /*\n      The formula for a 3D plane is:\n\n      a(x \u2212 x1) + b(y \u2212 y1) + c(z \u2212 z1) = 0 \n\n      where the plane is normal to the vector (a, b, c). By setting out output\n      brightness to the right hand side, the initial defined plane is the dark\n      region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n      plane in space. By using the `triangle` function, which is repeatedly\n      returning 0..1 for input values continuing in either direction away from 0,\n      we get several resulting 0..1..0.. layers all normal to the vector. \n\n      The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n      is a series of parallel layers, rotating and slicing through 3D space.\n    */\n    v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n    // Aggressively thin the plane by making medium-low v very small, for wider \n    // dark regions\n    v = pow(v, 1)\n\n    // Make the highest brightness values (when v is greater than 0.8) white\n    // instead of a saturated color\n    s = v < .78\n    paint(v,v) \n    // hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n    render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n    // The core of the oscillation is a triangle wave, bouncing across two total\n    // strip lengths. The 1D version removes the rotation element.\n    v = triangle(2 * wave(t1) + index / pixelCount)\n    \n    // Aggressive gamma correction looks good, reduces the pulse width, and makes\n    // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n    v = pow(v, 5)\n    \n    s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n    \n    hsv(t1, s, v)\n}\n\n\nvar lava = [0.0, 68/255, 1/255, 84/255, 0.18, 0.071, 0.0, 0.0, 0.376, 0.443, 0.0, 0.0, 0.424, 0.557, 0.012, 0.004, 0.467, 0.686, 0.067, 0.004, 0.573, 0.835, 0.173, 0.008, 0.682, 1.0, 0.322, 0.016, 0.737, 1.0, 0.451, 0.016, 0.792, 1.0, 0.612, 0.016, 0.855, 1.0, 0.796, 0.016, 0.918, 1.0, 1.0, 0.016, 0.957, 1.0, 1.0, 0.278, 1.0, 1.0, 1.0, 1.0,];\nvar ib_jul01 = [0.0, 0.761, 0.004, 0.004, 0.369, 0.004, 0.114, 0.071, 0.518, 0.224, 0.514, 0.11, 1.0, 0.443, 0.004, 0.004,];\nvar es_vintage_57 = [0.0, 0.008, 0.004, 0.004, 0.208, 0.071, 0.004, 0.0, 0.408, 0.271, 0.114, 0.004, 0.6, 0.655, 0.529, 0.039, 1.0, 0.18, 0.22, 0.016,];\nvar es_vintage_01 = [0.0, 0.016, 0.004, 0.004, 0.2, 0.063, 0.0, 0.004, 0.298, 0.38, 0.408, 0.012, 0.396, 1.0, 0.514, 0.075, 0.498, 0.263, 0.035, 0.016, 0.6, 0.063, 0.0, 0.004, 0.898, 0.016, 0.004, 0.004, 1.0, 0.016, 0.004, 0.004,];\nvar es_rivendell_15 = [0.0, 0.004, 0.055, 0.02, 0.396, 0.063, 0.141, 0.055, 0.647, 0.22, 0.267, 0.118, 0.949, 0.588, 0.612, 0.388, 1.0, 0.588, 0.612, 0.388,];\nvar rgi_15 = [0.0, 0.016, 0.004, 0.122, 0.122, 0.216, 0.004, 0.063, 0.247, 0.773, 0.012, 0.027, 0.373, 0.231, 0.008, 0.067, 0.498, 0.024, 0.008, 0.133, 0.624, 0.153, 0.024, 0.129, 0.749, 0.439, 0.051, 0.125, 0.875, 0.22, 0.035, 0.137, 1.0, 0.086, 0.024, 0.149,];\nvar retro2_16 = [0.0, 0.737, 0.529, 0.004, 1.0, 0.18, 0.027, 0.004,];\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0, 0.247, 0.09, 0.0, 1.0, 0.498, 0.263, 0.0, 1.0, 0.749, 0.557, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar es_pinksplash_08 = [0.0, 0.494, 0.043, 1.0, 0.498, 0.773, 0.004, 0.086, 0.686, 0.824, 0.616, 0.675, 0.867, 0.616, 0.012, 0.439, 1.0, 0.616, 0.012, 0.439,];\nvar es_pinksplash_07 = [0.0, 0.898, 0.004, 0.004, 0.239, 0.949, 0.016, 0.247, 0.396, 1.0, 0.047, 1.0, 0.498, 0.976, 0.318, 0.988, 0.6, 1.0, 0.043, 0.922, 0.757, 0.957, 0.02, 0.267, 1.0, 0.91, 0.004, 0.02,];\nvar Coral_reef = [0.0, 0.157, 0.78, 0.773, 0.196, 0.039, 0.596, 0.608, 0.376, 0.004, 0.435, 0.471, 0.376, 0.169, 0.498, 0.635, 0.545, 0.039, 0.286, 0.435, 1.0, 0.004, 0.133, 0.278,];\nvar es_ocean_breeze_068 = [0.0, 0.392, 0.612, 0.6, 0.2, 0.004, 0.388, 0.537, 0.396, 0.004, 0.267, 0.329, 0.408, 0.137, 0.557, 0.659, 0.698, 0.0, 0.247, 0.459, 1.0, 0.004, 0.039, 0.039,];\nvar es_ocean_breeze_036 = [0.0, 0.004, 0.024, 0.027, 0.349, 0.004, 0.388, 0.435, 0.6, 0.565, 0.82, 1.0, 1.0, 0.0, 0.286, 0.322,];\nvar departure = [0.0, 0.031, 0.012, 0.0, 0.165, 0.09, 0.027, 0.0, 0.247, 0.294, 0.149, 0.024, 0.329, 0.663, 0.388, 0.149, 0.416, 0.835, 0.663, 0.467, 0.455, 1.0, 1.0, 1.0, 0.541, 0.529, 1.0, 0.541, 0.58, 0.086, 1.0, 0.094, 0.667, 0.0, 1.0, 0.0, 0.749, 0.0, 0.533, 0.0, 0.831, 0.0, 0.216, 0.0, 1.0, 0.0, 0.216, 0.0,];\nvar es_landscape_64 = [0.0, 0.0, 0.0, 0.0, 0.145, 0.008, 0.098, 0.004, 0.298, 0.059, 0.451, 0.02, 0.498, 0.31, 0.835, 0.004, 0.502, 0.494, 0.827, 0.184, 0.51, 0.737, 0.82, 0.969, 0.6, 0.565, 0.714, 0.804, 0.8, 0.231, 0.459, 0.98, 1.0, 0.004, 0.145, 0.753,];\nvar es_landscape_33 = [0.0, 0.004, 0.02, 0.0, 0.075, 0.125, 0.09, 0.004, 0.149, 0.631, 0.216, 0.004, 0.247, 0.898, 0.565, 0.004, 0.259, 0.153, 0.557, 0.29, 1.0, 0.004, 0.016, 0.004,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016, 0.169, 1.0, 0.267, 0.098, 0.337, 1.0, 0.027, 0.098, 0.498, 1.0, 0.322, 0.404, 0.667, 1.0, 1.0, 0.949, 0.82, 0.165, 1.0, 0.086, 1.0, 0.341, 1.0, 0.255,];\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969, 0.188, 1.0, 0.533, 1.0, 0.349, 0.863, 0.114, 0.886, 0.627, 0.027, 0.322, 0.698, 0.847, 0.004, 0.486, 0.427, 1.0, 0.004, 0.486, 0.427,];\nvar gr64_hult = [0.0, 0.004, 0.486, 0.427, 0.259, 0.004, 0.365, 0.31, 0.408, 0.204, 0.255, 0.004, 0.51, 0.451, 0.498, 0.004, 0.588, 0.204, 0.255, 0.004, 0.788, 0.004, 0.337, 0.282, 0.937, 0.0, 0.216, 0.176, 1.0, 0.0, 0.216, 0.176,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008, 0.165, 0.835, 0.576, 0.094, 0.329, 0.404, 0.859, 0.204, 0.498, 0.012, 0.859, 0.812, 0.667, 0.004, 0.188, 0.839, 0.831, 0.004, 0.004, 0.435, 1.0, 0.004, 0.027, 0.129,];\nvar ib15 = [0.0, 0.443, 0.357, 0.576, 0.282, 0.616, 0.345, 0.306, 0.349, 0.816, 0.333, 0.129, 0.42, 1.0, 0.114, 0.043, 0.553, 0.537, 0.122, 0.153, 1.0, 0.231, 0.129, 0.349,];\nvar Fuschia_7 = [0.0, 0.169, 0.012, 0.6, 0.247, 0.392, 0.016, 0.404, 0.498, 0.737, 0.02, 0.259, 0.749, 0.631, 0.043, 0.451, 1.0, 0.529, 0.078, 0.714,];\nvar es_emerald_dragon_08 = [0.0, 0.38, 1.0, 0.004, 0.396, 0.184, 0.522, 0.004, 0.698, 0.051, 0.169, 0.004, 1.0, 0.008, 0.039, 0.004,];\nvar Colorfull = [0.0, 0.039, 0.333, 0.02, 0.098, 0.114, 0.427, 0.071, 0.235, 0.231, 0.541, 0.165, 0.365, 0.325, 0.388, 0.204, 0.416, 0.431, 0.259, 0.251, 0.427, 0.482, 0.192, 0.255, 0.443, 0.545, 0.137, 0.259, 0.455, 0.753, 0.459, 0.384, 0.486, 1.0, 1.0, 0.537, 0.659, 0.392, 0.706, 0.608, 1.0, 0.086, 0.475, 0.682,];\nvar Magenta_Evening = [0.0, 0.278, 0.106, 0.153, 0.122, 0.51, 0.043, 0.2, 0.247, 0.835, 0.008, 0.251, 0.275, 0.91, 0.004, 0.259, 0.298, 0.988, 0.004, 0.271, 0.424, 0.482, 0.008, 0.2, 1.0, 0.18, 0.035, 0.137,];\nvar Pink_Purple = [0.0, 0.075, 0.008, 0.153, 0.098, 0.102, 0.016, 0.176, 0.2, 0.129, 0.024, 0.204, 0.298, 0.267, 0.243, 0.49, 0.4, 0.463, 0.733, 0.941, 0.427, 0.639, 0.843, 0.969, 0.447, 0.851, 0.957, 1.0, 0.478, 0.624, 0.584, 0.867, 0.584, 0.443, 0.306, 0.737, 0.718, 0.502, 0.224, 0.608, 1.0, 0.573, 0.157, 0.482,]\nvar Sunset_Real = [0.0, 0.471, 0.0, 0.0, 0.086, 0.702, 0.086, 0.0, 0.2, 1.0, 0.408, 0.0, 0.333, 0.655, 0.086, 0.071, 0.529, 0.392, 0.0, 0.404, 0.776, 0.063, 0.0, 0.51, 1.0, 0.0, 0.0, 0.627,]\nvar es_autumn_19 = [0.0, 0.102, 0.004, 0.004, 0.2, 0.263, 0.016, 0.004, 0.329, 0.463, 0.055, 0.004, 0.408, 0.537, 0.596, 0.204, 0.439, 0.443, 0.255, 0.004, 0.478, 0.522, 0.584, 0.231, 0.486, 0.537, 0.596, 0.204, 0.529, 0.443, 0.255, 0.004, 0.557, 0.545, 0.604, 0.18, 0.639, 0.443, 0.051, 0.004, 0.8, 0.216, 0.012, 0.004, 0.976, 0.067, 0.004, 0.004, 1.0, 0.067, 0.004, 0.004,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0, 0.165, 0.0, 0.0, 0.176, 0.329, 0.0, 0.0, 1.0, 0.498, 0.165, 0.0, 1.0, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 1.0, 1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Magenta_Red = [0.0, 0.0, 0.0, 0.0, 0.247, 0.165, 0.0, 0.176, 0.498, 1.0, 0.0, 1.0, 0.749, 1.0, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0, 0.165, 0.165, 0.0, 0.0, 0.329, 1.0, 0.0, 0.0, 0.498, 1.0, 0.0, 0.176, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0, 0.247, 0.0, 0.216, 1.0, 0.498, 0.0, 1.0, 1.0, 0.749, 0.165, 1.0, 0.176, 1.0, 1.0, 1.0, 0.0,];\n\nvar palettes = [\n    // Reds, Oranges, and Warm Tones:\n    lava,  // 0\n    es_vintage_57, // 1\n    es_rivendell_15, // 2\n    rgi_15, // 3\n    es_autumn_19, // 4\n    BlacK_Magenta_Red, // 5\n    BlacK_Red_Magenta_Yellow, // 6\n    ib15, // 7\n\n    // Pinks and Fuchsias:\n    Sunset_Real, // 8\n    rainbowsherbet, // 9\n    es_pinksplash_08, // 10\n    es_pinksplash_07, // 11\n    Fuschia_7, // 12\n    Pink_Purple, // 13\n    Magenta_Evening, // 14\n\n    // Blues and Cool Tones:\n    Analogous_1, // 15\n    es_vintage_01, // 16 \n    es_ocean_breeze_068, // 17\n    es_ocean_breeze_036, // 18\n    departure, // 19\n    es_landscape_64, // 20\n    gr65_hult, // 21\n    gr64_hult, // 22\n    GMT_drywet, // 23\n    BlacK_Blue_Magenta_White, // 24\n    Blue_Cyan_Yellow, // 25\n\n    // Greens:\n    Coral_reef, // 26\n    es_emerald_dragon_08, // 27\n    es_landscape_33, // 28\n    retro2_16, // 29\n\n    // Yellows and Earth Tones:\n    Colorfull, // 30\n    ib_jul01, // 31\n    \n]\n\nvar rangeSlider = function(v, minValue, maxValue, isFloored, isReversed) {var valueRange = maxValue - minValue; var scaledValue = minValue + (v * valueRange); if (isReversed) {scaledValue = maxValue - (v * valueRange);} if (isFloored) {scaledValue = floor(scaledValue);} return scaledValue;};\nexport function sliderTransitionTime(v) {\n    transition = rangeSlider(v, 0.10, 0.20, false, false);\n}\nexport function toggleShimmer(v) {\n    shimmer = v;\n}\nexport function inputNumberSecondsPerPalette(v) {\n    secondsPerPalette = v;\n}\nexport function showNumberPalette() {\n    return paletteIndex;\n}\n\n"
  },
  "preview": "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"
}