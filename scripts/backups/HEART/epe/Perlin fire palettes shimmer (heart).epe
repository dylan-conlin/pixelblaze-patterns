{
  "name": "Perlin fire palettes shimmer (heart)",
  "id": "Zctt6BgiHNb25xhwT",
  "sources": {
    "main": "//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\n\nexport var mode = 1\nexport var fireScale = 3\nexport var risingSpeed = 4.5\nexport var morphSpeed = 4.4\n\n// Parameter names that correspond to Pixelblaze UI controls\nexport var shimmer = true;\nexport var transition = 0.10;\nexport var secondsPerPalette = 10;\nexport var fireHeight = 1.0;\n\nexport function sliderFireHeight(v) {\n  fireHeight = v * 2; // Scale according to your preference, here 0-2 range\n}\n\n\n// Internal state variables\nvar paletteIndex;\nvar lastPaletteIndex = -1;\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\n// Helper function to handle palette transitions\nfunction handlePaletteTransitions() {\n  paletteIndex = time(secondsPerPalette / 65.536 * palettes.length) * palettes.length;\n  if (frac(paletteIndex) > (1-transition)) {\n    var transitionFactor = (frac(paletteIndex) - (1-transition)) * (1/transition);\n    if (shimmer) {\n      if (wave(transitionFactor/2 - .25) > random(1)) {\n        paletteIndex = mod(paletteIndex + 1, palettes.length);\n      }\n    }\n  }\n  // Only set the palette if the floor index has changed\n  var floorPaletteIndex = floor(paletteIndex);\n  if (floorPaletteIndex != lastPaletteIndex) {\n    setPalette(palettes[floorPaletteIndex]);\n    lastPaletteIndex = floorPaletteIndex;\n  }\n}\n\nexport function beforeRender(delta) {\n  timeCounter += delta; // Increment the time counter by the time since the last frame\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  handlePaletteTransitions();\n  v = modeFn(x, y + yTime, morphTime )\n \n  // Adjust the intensity based on the fireHeight slider\n  v *= fireHeight; // Adjusts the visibility threshold\n\n  // v = v * 2*(1 - abs(x/fireScale*1.8)) \n  //v = v * y/fireScale \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}\n\nexport function sliderDepth(v) {\n  depth = v*10; // Scale according to your preference, here 0-2 range\n}\n\nexport var depth = 5\ndepth2 = depth / 2\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / depth * PI2)) / depth2\n  y1 = (y - sin(z / depth * PI2)) / depth2\n  render2D(index, x1, y1)\n}\n\n\n\n\nvar lava = [0.0, 68/255, 1/255, 84/255, 0.18, 0.071, 0.0, 0.0, 0.376, 0.443, 0.0, 0.0, 0.424, 0.557, 0.012, 0.004, 0.467, 0.686, 0.067, 0.004, 0.573, 0.835, 0.173, 0.008, 0.682, 1.0, 0.322, 0.016, 0.737, 1.0, 0.451, 0.016, 0.792, 1.0, 0.612, 0.016, 0.855, 1.0, 0.796, 0.016, 0.918, 1.0, 1.0, 0.016, 0.957, 1.0, 1.0, 0.278, 1.0, 1.0, 1.0, 1.0,];\nvar ib_jul01 = [0.0, 0.761, 0.004, 0.004, 0.369, 0.004, 0.114, 0.071, 0.518, 0.224, 0.514, 0.11, 1.0, 0.443, 0.004, 0.004,];\nvar es_vintage_57 = [0.0, 0.008, 0.004, 0.004, 0.208, 0.071, 0.004, 0.0, 0.408, 0.271, 0.114, 0.004, 0.6, 0.655, 0.529, 0.039, 1.0, 0.18, 0.22, 0.016,];\nvar es_vintage_01 = [0.0, 0.016, 0.004, 0.004, 0.2, 0.063, 0.0, 0.004, 0.298, 0.38, 0.408, 0.012, 0.396, 1.0, 0.514, 0.075, 0.498, 0.263, 0.035, 0.016, 0.6, 0.063, 0.0, 0.004, 0.898, 0.016, 0.004, 0.004, 1.0, 0.016, 0.004, 0.004,];\nvar es_rivendell_15 = [0.0, 0.004, 0.055, 0.02, 0.396, 0.063, 0.141, 0.055, 0.647, 0.22, 0.267, 0.118, 0.949, 0.588, 0.612, 0.388, 1.0, 0.588, 0.612, 0.388,];\nvar rgi_15 = [0.0, 0.016, 0.004, 0.122, 0.122, 0.216, 0.004, 0.063, 0.247, 0.773, 0.012, 0.027, 0.373, 0.231, 0.008, 0.067, 0.498, 0.024, 0.008, 0.133, 0.624, 0.153, 0.024, 0.129, 0.749, 0.439, 0.051, 0.125, 0.875, 0.22, 0.035, 0.137, 1.0, 0.086, 0.024, 0.149,];\nvar retro2_16 = [0.0, 0.737, 0.529, 0.004, 1.0, 0.18, 0.027, 0.004,];\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0, 0.247, 0.09, 0.0, 1.0, 0.498, 0.263, 0.0, 1.0, 0.749, 0.557, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar es_pinksplash_08 = [0.0, 0.494, 0.043, 1.0, 0.498, 0.773, 0.004, 0.086, 0.686, 0.824, 0.616, 0.675, 0.867, 0.616, 0.012, 0.439, 1.0, 0.616, 0.012, 0.439,];\nvar es_pinksplash_07 = [0.0, 0.898, 0.004, 0.004, 0.239, 0.949, 0.016, 0.247, 0.396, 1.0, 0.047, 1.0, 0.498, 0.976, 0.318, 0.988, 0.6, 1.0, 0.043, 0.922, 0.757, 0.957, 0.02, 0.267, 1.0, 0.91, 0.004, 0.02,];\nvar Coral_reef = [0.0, 0.157, 0.78, 0.773, 0.196, 0.039, 0.596, 0.608, 0.376, 0.004, 0.435, 0.471, 0.376, 0.169, 0.498, 0.635, 0.545, 0.039, 0.286, 0.435, 1.0, 0.004, 0.133, 0.278,];\nvar es_ocean_breeze_068 = [0.0, 0.392, 0.612, 0.6, 0.2, 0.004, 0.388, 0.537, 0.396, 0.004, 0.267, 0.329, 0.408, 0.137, 0.557, 0.659, 0.698, 0.0, 0.247, 0.459, 1.0, 0.004, 0.039, 0.039,];\nvar es_ocean_breeze_036 = [0.0, 0.004, 0.024, 0.027, 0.349, 0.004, 0.388, 0.435, 0.6, 0.565, 0.82, 1.0, 1.0, 0.0, 0.286, 0.322,];\nvar departure = [0.0, 0.031, 0.012, 0.0, 0.165, 0.09, 0.027, 0.0, 0.247, 0.294, 0.149, 0.024, 0.329, 0.663, 0.388, 0.149, 0.416, 0.835, 0.663, 0.467, 0.455, 1.0, 1.0, 1.0, 0.541, 0.529, 1.0, 0.541, 0.58, 0.086, 1.0, 0.094, 0.667, 0.0, 1.0, 0.0, 0.749, 0.0, 0.533, 0.0, 0.831, 0.0, 0.216, 0.0, 1.0, 0.0, 0.216, 0.0,];\nvar es_landscape_64 = [0.0, 0.0, 0.0, 0.0, 0.145, 0.008, 0.098, 0.004, 0.298, 0.059, 0.451, 0.02, 0.498, 0.31, 0.835, 0.004, 0.502, 0.494, 0.827, 0.184, 0.51, 0.737, 0.82, 0.969, 0.6, 0.565, 0.714, 0.804, 0.8, 0.231, 0.459, 0.98, 1.0, 0.004, 0.145, 0.753,];\nvar es_landscape_33 = [0.0, 0.004, 0.02, 0.0, 0.075, 0.125, 0.09, 0.004, 0.149, 0.631, 0.216, 0.004, 0.247, 0.898, 0.565, 0.004, 0.259, 0.153, 0.557, 0.29, 1.0, 0.004, 0.016, 0.004,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016, 0.169, 1.0, 0.267, 0.098, 0.337, 1.0, 0.027, 0.098, 0.498, 1.0, 0.322, 0.404, 0.667, 1.0, 1.0, 0.949, 0.82, 0.165, 1.0, 0.086, 1.0, 0.341, 1.0, 0.255,];\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969, 0.188, 1.0, 0.533, 1.0, 0.349, 0.863, 0.114, 0.886, 0.627, 0.027, 0.322, 0.698, 0.847, 0.004, 0.486, 0.427, 1.0, 0.004, 0.486, 0.427,];\nvar gr64_hult = [0.0, 0.004, 0.486, 0.427, 0.259, 0.004, 0.365, 0.31, 0.408, 0.204, 0.255, 0.004, 0.51, 0.451, 0.498, 0.004, 0.588, 0.204, 0.255, 0.004, 0.788, 0.004, 0.337, 0.282, 0.937, 0.0, 0.216, 0.176, 1.0, 0.0, 0.216, 0.176,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008, 0.165, 0.835, 0.576, 0.094, 0.329, 0.404, 0.859, 0.204, 0.498, 0.012, 0.859, 0.812, 0.667, 0.004, 0.188, 0.839, 0.831, 0.004, 0.004, 0.435, 1.0, 0.004, 0.027, 0.129,];\nvar ib15 = [0.0, 0.443, 0.357, 0.576, 0.282, 0.616, 0.345, 0.306, 0.349, 0.816, 0.333, 0.129, 0.42, 1.0, 0.114, 0.043, 0.553, 0.537, 0.122, 0.153, 1.0, 0.231, 0.129, 0.349,];\nvar Fuschia_7 = [0.0, 0.169, 0.012, 0.6, 0.247, 0.392, 0.016, 0.404, 0.498, 0.737, 0.02, 0.259, 0.749, 0.631, 0.043, 0.451, 1.0, 0.529, 0.078, 0.714,];\nvar es_emerald_dragon_08 = [0.0, 0.38, 1.0, 0.004, 0.396, 0.184, 0.522, 0.004, 0.698, 0.051, 0.169, 0.004, 1.0, 0.008, 0.039, 0.004,];\nvar Colorfull = [0.0, 0.039, 0.333, 0.02, 0.098, 0.114, 0.427, 0.071, 0.235, 0.231, 0.541, 0.165, 0.365, 0.325, 0.388, 0.204, 0.416, 0.431, 0.259, 0.251, 0.427, 0.482, 0.192, 0.255, 0.443, 0.545, 0.137, 0.259, 0.455, 0.753, 0.459, 0.384, 0.486, 1.0, 1.0, 0.537, 0.659, 0.392, 0.706, 0.608, 1.0, 0.086, 0.475, 0.682,];\nvar Magenta_Evening = [0.0, 0.278, 0.106, 0.153, 0.122, 0.51, 0.043, 0.2, 0.247, 0.835, 0.008, 0.251, 0.275, 0.91, 0.004, 0.259, 0.298, 0.988, 0.004, 0.271, 0.424, 0.482, 0.008, 0.2, 1.0, 0.18, 0.035, 0.137,];\nvar Pink_Purple = [0.0, 0.075, 0.008, 0.153, 0.098, 0.102, 0.016, 0.176, 0.2, 0.129, 0.024, 0.204, 0.298, 0.267, 0.243, 0.49, 0.4, 0.463, 0.733, 0.941, 0.427, 0.639, 0.843, 0.969, 0.447, 0.851, 0.957, 1.0, 0.478, 0.624, 0.584, 0.867, 0.584, 0.443, 0.306, 0.737, 0.718, 0.502, 0.224, 0.608, 1.0, 0.573, 0.157, 0.482,]\nvar Sunset_Real = [0.0, 0.471, 0.0, 0.0, 0.086, 0.702, 0.086, 0.0, 0.2, 1.0, 0.408, 0.0, 0.333, 0.655, 0.086, 0.071, 0.529, 0.392, 0.0, 0.404, 0.776, 0.063, 0.0, 0.51, 1.0, 0.0, 0.0, 0.627,]\nvar es_autumn_19 = [0.0, 0.102, 0.004, 0.004, 0.2, 0.263, 0.016, 0.004, 0.329, 0.463, 0.055, 0.004, 0.408, 0.537, 0.596, 0.204, 0.439, 0.443, 0.255, 0.004, 0.478, 0.522, 0.584, 0.231, 0.486, 0.537, 0.596, 0.204, 0.529, 0.443, 0.255, 0.004, 0.557, 0.545, 0.604, 0.18, 0.639, 0.443, 0.051, 0.004, 0.8, 0.216, 0.012, 0.004, 0.976, 0.067, 0.004, 0.004, 1.0, 0.067, 0.004, 0.004,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0, 0.165, 0.0, 0.0, 0.176, 0.329, 0.0, 0.0, 1.0, 0.498, 0.165, 0.0, 1.0, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 1.0, 1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Magenta_Red = [0.0, 0.0, 0.0, 0.0, 0.247, 0.165, 0.0, 0.176, 0.498, 1.0, 0.0, 1.0, 0.749, 1.0, 0.0, 0.176, 1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0, 0.165, 0.165, 0.0, 0.0, 0.329, 1.0, 0.0, 0.0, 0.498, 1.0, 0.0, 0.176, 0.667, 1.0, 0.0, 1.0, 0.831, 1.0, 0.216, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0, 0.247, 0.0, 0.216, 1.0, 0.498, 0.0, 1.0, 1.0, 0.749, 0.165, 1.0, 0.176, 1.0, 1.0, 1.0, 0.0,];\nvar palettes = [\n  // ib_jul01,\n  // es_vintage_57,\n  // es_vintage_01,\n  // es_rivendell_15,\n  // rgi_15,\n  // retro2_16,\n  \n  // yes:\n  \n  Analogous_1,\n  lava,\n  //Pink_Purple,\n  BlacK_Blue_Magenta_White,\n  BlacK_Magenta_Red,\n  BlacK_Red_Magenta_Yellow,\n  Fuschia_7,\n  Blue_Cyan_Yellow,\n \n  // es_pinksplash_08,\n  // es_pinksplash_07,\n  // Coral_reef,\n  // es_ocean_breeze_068,\n  // es_ocean_breeze_036,\n  // departure,\n  // es_landscape_64,\n  // es_landscape_33,\n  // rainbowsherbet,\n  // gr65_hult,\n  // gr64_hult,\n  // GMT_drywet,\n  // ib15,\n  // es_emerald_dragon_08,\n  // Colorfull,\n  // Magenta_Evening,\n  // Sunset_Real,\n  // es_autumn_19,\n  \n];\n\n\nvar rangeSlider = function(v, minValue, maxValue, isFloored, isReversed) {var valueRange = maxValue - minValue; var scaledValue = minValue + (v * valueRange); if (isReversed) {scaledValue = maxValue - (v * valueRange);} if (isFloored) {scaledValue = floor(scaledValue);} return scaledValue;};\nexport function sliderTransitionTime(v) {\n  transition = rangeSlider(v, 0.10, 0.20, false, false);\n}\nexport function toggleShimmer(v) {\n  shimmer = v;\n}\nexport function inputNumberSecondsPerPalette(v) {\n  secondsPerPalette = v;\n}\nexport function showNumberPalette() {\n  return paletteIndex;\n}\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function toggleDisableSliders(v) {\n  if (v) {\n    fireScale =\t11.000000\n    mode = 0.000000\n    morphSpeed = 1.235062\n    risingSpeed = 5.199982\n  }\n}\n"
  },
  "preview": "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"
}