{
  "name": "Raindrops (good)",
  "id": "gj7Myxx57WkPxJsob",
  "sources": {
    "main": "/* Raindrops Falling on a Pool\n\n Requires a 2D LED array and appropriate pixel mapper.\n This is designed for a 16x16 pixel array, and while it\n scales very well in terms of frame rate, it may run out of\n memory if used on anything with more than about 600\n total pixels (on a PB2).   \n\n MIT License\n \n Version  Author        Date      \n 1.0.0    JEM(ZRanger1) 04/09/2021\n*/ \n\n// display size - enter the dimensions of your matrix here\nvar width = 45;\nvar height = 45;\n\n// Global variables for rendering\nvar buffer1 = array(height);  // main drawing surface\nvar buffer2 = array(height);  // secondary drawing surface\nvar bgImage = array(height);  // static \"sea floor\" image.\nvar pb1, pb2;                 // buffer pointers for swapping\nvar speed = 765;              // max interval in milliseconds between drops\nvar nextDrop = speed;         // milliseconds to next drop (random)\nvar damping = 0.85;           // how quickly waves die down  \nvar frameTimer = 9999;        // accumulator for simulation timer\nvar dropTimer = 9999;         // accumulator for raindrop timer\n\n// UI\nexport function sliderRaindrops(v) {\n  speed = 150+1400*(1-v);\n}\n\n// create 2 x 2D buffers for calculation, and one\n// to hold our background image.\nfunction allocateFrameBuffers() {\n  for (var i = 0; i < height; i ++) {\n    buffer1[i] = array(width);\n    buffer2[i] = array(width);\n    bgImage[i] = array(width);\n  }\n  pb1 = buffer1;\n  pb2 = buffer2;\n}\n\n// generate a plausible pseudo-random underwater background.  Slowish, but only\n// has to be done during initialization. (This is the usual hand-tuned \n// sum-of-sine-waves texture)\nfunction initBackground() {\n  var m1 = random(8)-4;\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var x1 = x / width; var y1 = y / height;\n      var dx = x - 0.5;  var dy = y - 0.5;      \n      var val = (wave(x1+y1) + wave(y1 * m1) + \n        wave(sqrt(x1*x1+y1*y1)) + wave(sqrt(dx*dx+dy*dy))) / 4;\n      bgImage[x][y] = 0.667 + (0.4*(val-0.8));\n    }\n  }  \n}\n\nfunction swapBuffers()  {\n  var tmp = pb1; pb1 = pb2; pb2 = tmp;\n}\n\n// No waves! No physics! We're just repeatedly applying a specialized\n// weighted \"blur\" filter which spreads the initial \"raindrop\" out\n// in a roughly circular fashion and attenuates it over time. \nfunction doRipples() {\n  swapBuffers();    \n\n  // we avoid having to clip or wrap our filter calculation by leaving a\n  // one pixel bounding region around the whole display. \n  for (var y = 1; y < height-1; y++) {\n    for (var x = 1; x < width-1; x++) {\n      var val = ((pb1[x-1][y] + pb1[x+1][y] + pb1[x][y-1] + pb1[x][y+1]) / 4) - pb2[x][y];\n      pb2[x][y] = (val * damping);\n    }\n  }\n}\n\n// Initialization\nallocateFrameBuffers();\ninitBackground();\n\nexport function beforeRender(delta) {\n  frameTimer += delta;\n  dropTimer += delta;\n\n  // raindrop timer is random, with upper bound set by the\n  // speed slider\n  if (dropTimer > nextDrop) {\n     var rx = 1+floor(random(width-2));\n     var ry = 1+floor(random(height-2));\n     pb1[rx][ry] = 1;\n    \n    nextDrop = random(speed);\n    dropTimer = 0;\n  }  \n  \n  // drop calculations are limited to 33/sec because it\n  // looks about right...\n  if (frameTimer > 30) {\n    doRipples();  \n    frameTimer = 0;\n  }\n}\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x, y)\n  \n}\nexport function render2D(index, x, y) {\n  // convert x and y to array indices\n  x = floor(x * width);  \n  y = floor(y * height);\n  // get wave height value (which we will use for brightness) from\n  // calculation buffer and gamma correct it\n  bri = 0.3+pb2[x][y]; bri = bri * bri;\n  // render background image using calculated brigtness,\n  // with slight desaturation at wave peaks\n  hsv(bgImage[x][y], 1.3-bri,bri);\n}"
  },
  "preview": "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"
}