{
  "name": "fractal fireball",
  "id": "ie95mpreEuoWYLSS7",
  "sources": {
    "main": "\n\nvar width = 16\nvar height = 16\nvar iterations = 7\nvar scale = .02\nvar speed = .5\nvar fade = .9\n\nvar pixelFade\n\nvar skip = 4\n\n\nvar pixels = array(width * height)\nvar hues = array(width * height)\n\nexport var iter\n\nvar w1, t1, w2\n\n\nexport var bx, by\n\nfunction getIndex(x, y) {\n  \n  var res = floor(x*width) + floor(y*height)*width\n  if (x < 0 || x > 1 || y < 0 || y  > 1 || res < 0 || res > 255) {\n    bx = x; by = y\n  }\n  return res\n}\n\nfunction f(x, y, a, i) {\n  iter++\n  var s = sin(a), c = cos(a), index\n  \n  x += s * i * scale;\n  y += c * i * scale;\n  \n  x = mod(x,.99999)\n  y =  mod(y,.99999)\n  \n  if (i <= skip) {\n    index = getIndex(x,y)\n    pixels[index]++\n    hues[index] = i * .3 + .1 \n  }\n  \n  i--\n  if (i > 0) {\n    f(x, y, a + w2, i)\n    f(x, y, a - w1, i)\n  }\n}\n\n\nexport function beforeRender(delta) {\n  t1 = time(.1 / speed)\n  w1 = sin(t1*PI2) * PI2\n  w2 = sin(time(.13 / speed)*PI2) * PI2\n  w3 = sin(time(.5 / speed) * PI2) * PI2\n  iter = 0\n  \n  pixelFade = delta * fade\n  pixels.mutate(p => p*fade)\n  f(.5,.5, w3, iterations)\n}\n\nexport function render2D(index, x, y) {\n  index = getIndex(x, y)\n  h = hues[index] * .07\n  \n  v = clamp(pixels[index] /10, 0, 1)\n  v = v*v\n  \n  hsv(h, 1, v)\n}"
  },
  "preview": "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"
}