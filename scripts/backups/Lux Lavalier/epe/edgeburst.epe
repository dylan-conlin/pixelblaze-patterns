{
  "name": "edgeburst",
  "id": "iariS6cBuCRAPRSoi",
  "sources": {
    "main": "/*\n  Edgeburst\n  \n  The triangle() function is simple:\n  \n  output:   1  /\\    /\\\n              /  \\  /  \\   etc\n           0 /    \\/    \\/\n  input:    0  .5  1     2\n  \n  triangle() is the go-to function when you want to mirror something (space, or\n  time!) This pattern does both.\n  \n  Mirroring space is the building block for kaleidoscopes (see 'sound - spectro\n  kalidastrip', 'xorcery', and 'glitch bands'). In this pattern we mirror the\n  pixel's position (expressed as a percentage) around the middle of the strip\n  with `triangle(pct)`.\n  \n  Mirroring a 0..1 time sawtooth turns a looping timer into a back-and-forth\n  repetition.\n*/\n\nexport function beforeRender(delta) {\n  t1 = triangle(time(.1))  // Mirror time (bounce)\n}\n\nexport function render(index) {\n  pct = index / pixelCount\n  edge = clamp(triangle(pct) + t1 * 4 - 2, 0, 1)  // Mirror space\n  \n  h = edge * edge - .2  // Expand violets\n  \n  v = triangle(edge)    // Doubles the frequency\n\n  hsv(h, 1, v)\n}\n"
  },
  "preview": "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"
}