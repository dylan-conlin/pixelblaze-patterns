{
  "name": "edgeburst fibonacci",
  "id": "g3jHQAPwsA2cSSg9R",
  "sources": {
    "main": "/*\n  Edgeburst\n  \n  The triangle() function is simple:\n  \n  output:   1  /\\    /\\\n              /  \\  /  \\   etc\n           0 /    \\/    \\/\n  input:    0  .5  1     2\n  \n  triangle() is the go-to function when you want to mirror something (space, or\n  time!) This pattern does both.\n  \n  Mirroring space is the building block for kaleidoscopes (see 'sound - spectro\n  kalidastrip', 'xorcery', and 'glitch bands'). In this pattern we mirror the\n  pixel's position (expressed as a percentage) around the middle of the strip\n  with `triangle(pct)`.\n  \n  Mirroring a 0..1 time sawtooth turns a looping timer into a back-and-forth\n  repetition.\n*/\n\nexport function beforeRender(delta) {\n  t1 = triangle(time(.1))  // Mirror time (bounce)\n}\n\nphysicalToFibonacci = [ 0, 13, 26, 39, 52, 57, 44, 31, 18, 5, 10, 23, 36, 49, 62, 54, 41, 28, 15, 2, 7, 20, 33, 46, 59, 51, 38, 25, 12, 4, 17, 30, 43, 56, 61, 48, 35, 22, 9, 1, 14, 27, 40, 53, 58, 45, 32, 19, 6, 11, 24, 37, 50, 63, 55, 42, 29, 16, 3, 8, 21, 34, 47, 60 ];\n\nexport function render(index) {\n  index = physicalToFibonacci[index];\n  pct = index / pixelCount\n  edge = clamp(triangle(pct) + t1 * 4 - 2, 0, 1)  // Mirror space\n  \n  h = edge * edge - .2  // Expand violets\n  \n  v = triangle(edge)    // Doubles the frequency\n\n  hsv(h, 1, v)\n}\n"
  },
  "preview": "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"
}