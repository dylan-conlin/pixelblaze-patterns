{
  "name": "xorcery 3D",
  "id": "ro9Gei457fBoxop9Y",
  "sources": {
    "main": "/*\n  Xorcery 2D/3D\n\n  An XOR in 2D/3D space based on the 'block reflections' pattern. To think\n  through the math, start with the comments on that pattern. The `^` operator is\n  bitwise exclusive-or (XOR). Combined with modulus (`%`) and `triangle()`, this\n  pattern renders interesting kaleidoscopic blocks in 1D/2D/3D.\n  \n  Output demo: https://youtu.be/7PQGV59N5hM\n*/\n\nexport function beforeRender(delta) {\n  t1 = time(.1)\n  t2 = time(.1) * PI2\n  t3 = time(.5)\n  t4 = time(.2) * PI2\n}\n\nexport function render3D(index, x, y, z) {\n  m = .3 + triangle(t1) * .2\n  h = sin(t2)\n  h += (wave((5 * (x - .5) ^ 5 * (y - .5) ^ 5 * (z - .5)) / 50 * \n    (triangle(t3) * 10 + 4 * sin(t4)) % m))\n  v = (abs(h) + abs(m) + t1) % 1\n  v = triangle(v * v)\n  h = triangle(h) / 5 + (x + y + z) / 3 + t1\n  v = v * v * v\n\n  hsv(h, 1, v)\n}\n\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\n// Repeat the top line of the matrix 4X for a more granular 1D\nexport function render(index) {\n  pct = index / pixelCount\n  render3D(index, 4 * pct, 0, 0)\n}\n"
  },
  "preview": "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"
}