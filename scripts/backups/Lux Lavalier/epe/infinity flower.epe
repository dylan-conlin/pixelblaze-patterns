{
  "name": "infinity flower",
  "id": "KwPTYbJYhxrDhYev9",
  "sources": {
    "main": "/* Infinity Flower\n\n Creates a colorful new flower species every couple of seconds!\n \n Requires a 2D display and appropriate mapping function.\n\n MIT License\n \n Version  Author        Date      \n 1.0.0    JEM(ZRanger1) 05/07/2021\n*/ \nvar radius = array(pixelCount);   // holds every pixel's distance from center\nvar angle = array(pixelCount);    // every pixel's positive radial angle from center\n\nvar lifespan = 1500;              // how long we display each flower\nvar transitionLength = 1000;       // how long the spin/generate phase lasts\nvar speciesTimer = 9999;          // accumulator for frame timing\n\nvar drawFrame = renderFirstPass;  // on first pass, calculate per-pixel stats\nvar prerender = beforeNormal;     // normal renderer\n\nvar tolerance;                    // comparison tolerance for angles\n\nvar maxPetals = 12;               // this seems like plenty...\nvar numPetals;                    // petals in current species\nvar petalShape;                   // rough width of petal\nvar petalLength;                  // radius of each petal   \nvar centerHue;                    // color of flower center\nvar centerSize;                   // radius of flower center\nvar centerBri;                    // max brightness of flower center\nvar colorVariant;                 // enables additional petal coloring\nvar petals = array(maxPetals);    // holds information on each petal\nvar p1 = array(2);                // scratch x,y point array for calculation\n\n// allocate space for petal information. Fields are, in order:\n// x,y,angle,hue.  \nfunction allocate() {\n  for (i = 0; i < maxPetals;i++) {\n    petals[i] = array(4);\n  }\n}\n\n// Create a new flower species with (constrained) randomized parameters.\nfunction initialize() {\n  numPetals = max(2,floor(random(maxPetals)));\n  petalLength = 0.35 + random(0.3);\n  petalShape = 3+random(4);\n  petalHue = random(1);\n  centerHue = petalHue + 0.61803;  // golden ratio conjugate makes good contrasting colors\n  centerSize = (random(1) < 0.7) ? 0.11 : 0.1;\n  colorVariant = random(1) > 0.5;\n  \n  var hueVariance = (0.1 * (-0.5 + random(1)))\n  var petalAngle = 2.39996;        // golden angle separates petals\n  \n  p1[0] = 0.5; p1[1] = petalLength + 0.5;\n\n  for (i = 0; i < numPetals;i++) {\n    petals[i][3] = petalHue + ((i % 2) * hueVariance);\n    \n    setRotationAngle(petalAngle);      \n    rotateVector2D(p1,petals[i]);\n    petals[i][2] = petalAngle;  \n    \n    petalAngle += 2.39996;\n  }  \n  \n  setRotationAngle(0);\n}\n\n// wrapper for atan2 that returns positive angle 0-PI2\nfunction positiveAtan2(x,y) {\n  var rad = atan2(x,y);\n  return (rad >= 0) ? rad : rad + PI2;\n}\n\n// set angle for subsequent 2D rotation calls\nfunction setRotationAngle(angle) {\n  cosT = cos(angle); sinT = sin(angle);\n}\n\nvar cosT = 0;  var sinT = 0;\nfunction rotateVector2D(vIn, vOut) {\n    var x = vIn[0] - 0.5;  var y = vIn[1] - 0.5;\n    vOut[0] = (cosT * x) - (sinT * y) + 0.5;\n    vOut[1] = (sinT * x) + (cosT * y) + 0.5;\n}\n\nfunction renderFirstPass(index,x,y) {\n  x -= 0.5; y -= 0.5;\n  radius[index] = hypot((x),(y));\n  angle[index] = positiveAtan2(x,y);\n  if (index == (pixelCount - 1)) drawFrame = renderNormal;\n}\n\n\nfunction renderNormal(index,x,y) {\n  var h,v,pWidth;\n\n// if pixel is outside max radius, nothing to do  \n  if (radius[index] > petalLength) {\n    rgb(0,0,0);\n    return;\n  }\n  \n// color and shade flower center pixels\n  if (radius[index] < centerSize) {\n    hsv(centerHue,1,centerBri * wave(-0.25+(radius[index]/centerSize*0.9)));\n    return;\n  }\n  \n  // determine for the width of petal at a given radius.\n  // angular comparison tolerance has to decrease with radius to compensate for\n  // fixed pixel pitch in display.  \n  tolerance = 0.06*(0.707/radius[index])\n  pWidth = tolerance * petalShape * (wave(-0.25+(radius[index]/petalLength)));\n\n// color pixel if it lies on a petal.\n  for (i = 0; i < numPetals; i++) {\n    v = PI-abs(PI - abs(angle[index] - petals[i][2]));    \n    v = (v <= pWidth) ? max(0.01,v) : 0;\n    if (v > 0) {\n      h = petals[i][3] + (colorVariant * radius[index] * 0.7);\n      break;\n    }\n  }\n\n  hsv(h, 1-(v*0.33), v) \n\n}\n\n// beforeRender() function that runs when we're building a new flower\nfunction beforeTransition(delta) {\n  speciesTimer += delta;\n  \n// when transition is done, stop spinning and switch back to the\n// normal display beforeRender function.\n  if (speciesTimer >= transitionLength) {\n    initialize();\n    speciesTimer = 0;\n    centerBri = 1;\n    prerender = beforeNormal;\n  }\n  \n  centerBri = 1-(speciesTimer / transitionLength);\n\n  for (i = 0; i < numPetals; i++) {\n    rotateVector2D(petals[i],petals[i]);   \n    petals[i][2] = positiveAtan2(petals[i][0]-0.5,petals[i][1]-0.5);\n  }  \n}\n\n// beforeRender() function that displays the current flower species.\nfunction beforeNormal(delta) {\n  speciesTimer += delta;\n  \n// when we're ready to build a new species, start the spinning effect\n// and set the beforeRender function to the transition \n// generator.\n  if (speciesTimer >= lifespan) {\n    prerender = beforeTransition;\n    setRotationAngle((random(1) < 50) ? 1 : -1);\n    speciesTimer = 0;\n  }\n}\n\n// main entry point\nallocate();\ninitialize();\n\n// system callbacks\nexport function beforeRender(delta) {\n  prerender(delta);\n}\n\nexport function render2D(index,x,y) {\n  drawFrame(index,x,y);\n}"
  },
  "preview": "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"
}