{
  "name": "pride",
  "id": "3jhhqhgBYpqNFEunt",
  "sources": {
    "main": "// Pride pattern\n// based on Pride2015 by Mark Kriegsman: https://gist.github.com/kriegsman/964de772d64c502760e5\n// modified by Ben Hencke to run on Pixelblaze\n\nvar fibonacciToPhysical = [ 0, 39, 19, 58, 29, 9, 48, 20, 59, 38, 10, 49, 28, 1, 40, 18, 57, 30, 8, 47, 21, 60, 37, 11, 50, 27, 2, 41, 17, 56, 31, 7, 46, 22, 61, 36, 12, 51, 26, 3, 42, 16, 55, 32, 6, 45, 23, 62, 35, 13, 52, 25, 4, 43, 15, 54, 33, 5, 44, 24, 63, 34, 14, 53 ]\n\n// beatsin8( BPM, uint8_t low, uint8_t high) returns an 8-bit value that\n// rises and falls in a sine wave, 'BPM' times per minute,\n// between the values of 'low' and 'high'.\nfunction beatsin8(bpm, low, high) {\n  return wave(time(0.91552734375/bpm)) * (high - low) + low\n}\n\nfunction beatsin88(bpm, low, high) {\n  return beatsin8(bpm>>8, low, high);\n}\n\nvar sPseudotime = 0; //was uint16_t modified to be a value between 0 and 1\n// var sLastMillis = 0; //uint16_t\nexport var sHue16 = 0; //was uint16_t seems to work fine as-is\nexport var ledarray = array(pixelCount*3);\n\nfunction pride(deltams, useFibonacciOrder) {\n  // var sat8 = beatsin88( 87, 220, 250); //uint8_t\n  // var brightdepth = beatsin88( 341, 96, 224); //uint8_t\n  var brightdepth = beatsin88(171, 96, 224); //uint8_t\n  // var brightnessthetainc16 = beatsin88( 203, (25 * 256), (40 * 256)); //uint16_t\n  var brightnessthetainc16 = beatsin88( 102, (25 * 256), (40 * 256)); //uint16_t\n  // var msmultiplier = beatsin88(147, 23, 60); //uint8_t\n  var msmultiplier = beatsin88(74, 23, 60); //uint8_t\n\n  var hue16 = sHue16;//gHue * 256; //uint16_t\n  // var hueinc16 = beatsin88(113, 300, 1500); //uint16_t\n  // var hueinc16 = beatsin88(57, 1, 128); //uint16_t\n  var hueinc16 = beatsin88(57, 1, 128*3); //varies a bit more\n\n  // var ms = millis(); //uint16_t\n  // var deltams = ms - sLastMillis ; //uint16_t\n  // sLastMillis  = ms;\n  sPseudotime += (deltams * msmultiplier) >>16;\n  // sHue16 += deltams * beatsin88( 400, 5, 9);\n  sHue16 += deltams * beatsin88( 200, 5, 9);\n  var brightnesstheta16 = sPseudotime; //uint16_t\n\n  for ( var i = 0 ; i < pixelCount; i++) { //uint16_t\n    hue16 += hueinc16;\n    var hue8 = hue16 / 256; //uint8_t\n    //this is doing a triangle\n    var h16_128 = hue16 >> 7; //uint16_t\n    if ( h16_128 & 0x100) {\n      hue8 = 255 - (h16_128 >> 1);\n    } else {\n      hue8 = h16_128 >> 1;\n    }\n\n    brightnesstheta16  += brightnessthetainc16>>16;\n    brightnesstheta16 = mod(brightnesstheta16 + (brightnessthetainc16>>16), 1)\n    var b16 = wave( brightnesstheta16); //uint16_t\n\n    //var bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536; //uint16_t\n    var bri16 = b16 * b16\n    //var bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536; //uint8_t\n    var bri8 = bri16 * (brightdepth>>8)\n    bri8 += (1 - (brightdepth>>8));\n\n    var index = hue8; //uint8_t\n    //index = triwave8( index);\n    index = index/256 * 240;\n\n    // CRGB newcolor = ColorFromPalette( palette, index, bri8);\n\n    var pixelnumber = useFibonacciOrder ? fibonacciToPhysical[i] : i; //uint16_t\n\n    // nblend( ledarray[pixelnumber], newcolor, 8);\n    //TODO palletes, blending in RGB. For now use the 3 byte pixel for hue and value\n    ledarray[pixelnumber*3] = hue8 / 128;\n    ledarray[pixelnumber*3 + 2] = bri8;\n  }\n}\n\nexport function beforeRender(delta) {\n  pride(delta, 1)\n}\n\nexport function render(index) {\n  v = ledarray[index*3+2]\n  hsv(ledarray[index*3], 1, v*v)\n}\n"
  },
  "preview": "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"
}