{
  "name": "fast pulse 3D",
  "id": "BvZoMSk6wu37yZ8zY",
  "sources": {
    "main": "/*\n  Fast pulse 2D/3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\n\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(.1)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x \u2212 x1) + b(y \u2212 y1) + c(z \u2212 z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 5)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < .8\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lengths. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}