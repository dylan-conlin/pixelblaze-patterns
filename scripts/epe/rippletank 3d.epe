{
  "name": "rippletank 3d",
  "id": "5YDWxrtsMQ4SkcDyJ",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nvar theta = 0;\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n// early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // pick a blue/green gradient color based on \"height\", and draw the\n  // region that's inside our radius.\n  hsv(0.6667-(0.02*s),1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}\n"
  },
  "preview": "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"
}