{
  "name": "Minkowski Stars!",
  "id": "Gfu7HvTPEEJTXa2rz",
  "sources": {
    "main": "// Follow that Star! 2D\n//\n// Still kind of experimental at this point.\n//\n// Started life as a frame buffer-less snake pattern, then \n// I started playing around with Minkowski distance using \n// fractional exponents and... Stars!\n//\n// MIT License\n// Take this code and use it to make cool things!\n// 6/12/2022 ZRanger1\n//\n\nvar snakeSize = 0.7;\nvar segSpacing = 1;\nvar segments = 4;\nvar speed = 1.8;\n\nvar timebase = 0;\nvar t1,t2;\nvar xoffs = array(segments);\nvar yoffs = array(segments)\n\n\ntranslate(-0.5,-0.5); \nscale(2,2)\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta / 1000) % 3600;\n  t1 = timebase * speed;\n  t2 = time(0.1);\n  \n  // precalculate distance offsets for each segment\n  for (i = 0;i < segments; i++ ) {\n    var t = t1 - segSpacing * (i+1);     \n     xoffs[i] = 0.92 * sin(t) + 0.05 * cos(t * 6);\n     yoffs[i] = 0.65 * sin(t * 0.85) + 0.13 * sin(t * 2);     \n  }\n}\n\nfunction minkowskiDistance(x1,y1,p) {\n  return pow(pow(abs(x1), p) + pow(abs(y1), p),1.0 / p);\n}\n\nexport function render2D(index,x,y) {\n  var b = 0;\n\n  // Add the light contribution of each star to the current pixel value\n  for (i = 0; i < segments; i++) {\n    var px = xoffs[i];\n    var py = yoffs[i];\n\n    // Division is so handy here, I almost feel like it's cheating -- as \n    // distance approaches 0, the value added to b approches infinity, which makes\n    // it easy to brighten our stars towards the center.\n    b += snakeSize / minkowskiDistance(x-px,y-py,0.375) / (i+1);\n  }\n\n  hsv(t2,2.5-b,b*b);\n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCACWAGQDASIAAhEBAxEB/8QAHAAAAgMBAQEBAAAAAAAAAAAABAUAAwYCAQcJ/8QANxAAAgEDAgQEBAYCAQQDAAAAAQIDAAQRBSESMUFRBhMiYXGBkaEUIzJCsfAVwQck0eHxM1Ji/8QAGgEAAgMBAQAAAAAAAAAAAAAAAQMAAgQFBv/EAC4RAAIBAwMDAwMCBwAAAAAAAAECAAMRIRIxQQQTFFFh8IGhwSJxBSMyQpGx8f/aAAwDAQACEQMRAD8A/NDBM3zo68jLQq4HMY2oSV1MoaPdc1rbTUNNTQZrW4tA+o5zDKM49+Lfty6bDbnnSvULkXnvadHDC188f7mUAMcWW/WRt8K0fgQlvEWnDOP+oTmf/wBCsxLIzXBLbjO9NdLuBCylHEcn6lYcxjl86i9SpwDJSpa2KjGCIX45uIbvWrie1YtbzOZFJ7nc/fNNf+MLuK012Bpn4Vf8obZyzbAfU1lr+YC4eN/07fI0Xp1wpXgj4ioBbY4OR1NHvoSRf2l/GV2anfFre/pHOoQNfaxeRRASTNO/CAclt+nc9u9Lb2GWz/KlRkl6q4wQCMj+a4j1QWN3HKn/AMsZDA9iOVG65qD3twtzdmJp5I1kdo/3dMnG2e+OvvmneWu15u0m+gEWt9Zof+PYLO6e+TUWRbYRAZlYBAc4B35NucH3PesrrqRNfTxwgAK5EY9gduftXD3TMn5eBGTk8PLNA3UzXFwsmSzsdznfNUPUqCTfeIelpZmve9sfOYZbWU3kcRyobIBOwJG5Gfp9RXFnbBrnhlZVc/p4jgfOtLba5aPbW07LFDe2GBCwHpfALZcDmeIbEd/V3OZv7zztXmuicq5Mm5zz3xy332o+UotmTTYgFdo/1izk029/DXeXuo0QOAwwvpHCoPXC8P8AdzKWTX80xWS5JkkYcQeVjkg9ee9SmDq1AyZupiyjVvMlHOUk2OKPkjnEcU3AxVuRAPP+kfWvJdL47oNGQsROSvUd8VrNPjtobaaB1El0w/KAGyEch757fCvI1awUAieVp9SbWBmYng8u386QcMh/Z3Hf2ozwhE9z4hsSOLCzIxZeY36e9SRFkmLyDibcHNNdG8uGRUQKJWzwKBy7f34UtqxRL2zLeYXOYi8WszaxPOeUzmTbfcnJGfnTL/jyON9ct5LhQ1uG4GDY4TxbYOdsb7+1C+Kiv+VNuQRGzFfcNgb/AFo/w4FZfKiHpSMyL3J7/eiaxWiH5lfIu598fiDT6Q73l1HEQGEp8ob7j/1QN/YzWKxpJ6pG2IGduwp5NerbTpIE4pVAyc/urmbUv8g0k1wpef8AUXzz+P1pC1XBBIxHHrb4vCfBOn2sjXR1McEHltHkqGI7EdjnGCPpgmkV7aPBdtChHE2QgHXHQ0wlu24URPSp9WF71TOjXEscnDl+WccjjH3qwqMTc7QecwyDF9vpd1JGx4eEnIUE7sewru30+RplgnbynIyqtv251oT4h8me2kSNGltQojkxzI3ye+/el9xJx3zXhXPEeME75yc4+tQVXO4tB5unaWanoktpdeTcuXmRQrEty22A9gMD5VK5XV5sesiQ93GTUpeqpGj+IHkxTbjyHfhJHE5bn3o0rI/BKvXmfcUME82TK8ieXatNpTW0FncWzqHuJN42PJCP5zy+nyvVfSL8zzCseYquDGkZdl/NbmOlcaPP5GpQzsMrGwkI74Oa9niZ2PGM9Sa8tl81vw+B5j8sfYVTGgiHWbwTxbF/k9Qa4jOC7cfqPIkbj60w8JzrpcqXEo41iUKQOtBagphvJImBXgwrDsQMGrrEG6je3TmBxAd/6M1ds0Qh2k7hvCZbf8beXEKDLtIWQjr7Ch721ewxA6kSndgenYVfDcGzmR1UNKmN2HI/7rq61A3sjzXK+ZLjJfO5+PelDUD7SdyF+HrW2upH/HsYoYuUnv0Hz/70BPL5txLEoEZyQoHL4VVcTyShQpwh9W21erAZXRwCX5GoFsSxMPcxJHpkrLv6XY4VSDkmuo7QgpBK/AzHb2+NM59ecy25CKz2yhI5Dz26/WgbiQyXbXZBIJ4xnuf/ADQDOd8QawNpbqGmrpV01tIqvIoBY5yMkZ2qULHfSuuWwx7uMn71KIDDeQ1MwC2yJMim0MLNwOudxg/GqraKKEBpBlm/YDgj3rWaPbRizkWJBN5gHDJj9B3+53pfUVtAvaYdYii7iC2hdly550isLkWuqxXDZKxOHIBxnG+M1t9TsPLtVgI/MdS/z6D+96+d6nIbcFBszdaHSsKoK+sBqgC8J1S5/HX01yNvOYuR2J5iiPD2oLpOpJeOpdYwRw9CTtg/LNJ9NLSz+WTlTuc1ZqbvFwKBwDPSt5pi3a4lRWGnVHaRi8upYkxlnJQ/6qrU7SSxBhcYl5sOo9qH0m9ZVSQAcY5HtTC8lmv42llUyMBu5G/zrMQyOBxLCoDLPDsVnKT/AJBzFAgzxjnnoK4jk8+eRdlOSBjp7UqvrmRYBn9K9AMUy0iBrrDKCWxv9KDrYGoTLa+J6NMkJAPpZjhVI3Jrr8MEVIpTwMT9PjTO41GcNGQgLQALHIQcrjf+5oTUAx/6nh4eLLAdM9qQrsxAMmuU31kunXDQMFlZQMuGJBPtipQcd7Mi4GGGc5ZQalP0sP8AsGuITfTPMW4jueVbXwNq8kd8qDdWPCynkaxCKsTerdj0rTeH82ayXKZOFwPie/yzWjqlBpkAftOG9ft5JxPo2veVdSLdQfpXYKcbYr534p0Rku3CDKk8SnuDWi07VMKbeTILqTv36UxNqmo6Wbpk4han8wHbbp9wR9K49JqiVSwHqYodYrEifL7gHS4zCuPOfdm/+o7VbCX1e3MJA81BxBu4GxH3oXUi9xeyOSWZmJJNE6GxttQhfnhgSOhHau8cJq53jzVst+JpNA8PgQNNLlYIieI43PtSzWNbbzfLi9EcZJVRyH/c19H1G3htvD0cQlRZ5188RgHLBuW+PY8/evk19bP5jnBPPNYKSl6hNX2+8p5NzpBjWzkXW08kqqzr+nAxxe1bjwV4YAtpp7gcCDb1D7Cvm+k8UVwjrkYI5V9P13xJ+DsLS3i2cIHfHUnff5Y+9CsoUlTlfT39Pz9IT1SrhzMxrWteRqxhhAjgVuHyh136961d54cg1LQYriEqi44mBP6R71891hDdak0yg8MhDD5/+c1r7LXgRNZAkRvGIhw78RA/2R96zMiqqm2bf4PrKeYoyZk7vVIdNmMEKq6L+5kBLHvvUpTeQM9y5Oc57VK6K0aZAvL+QTkGK2VnlPfPOtJo87W09vEuNyCwPLfvQv8AjxFeFHGcMcjtRUMZZnmTfoNuWa6h6cvhpgrVFqLbiPtTaG4u/wAZaKY4cgeXnPCaZwak/BJZMVWC4UBiRsexPwpFpikv+HbnIvXv0/vvWkt9NE9j5y+v8OcP8M7fej4i72nDqMVaw3zt6fTjf6T5prFubSZ0Iw+d6L8PWzXlzEh6EHJ7daZ+KNN4rpZgMeYvFt35GivD1ollGrDeZx9Bn+anjE/p4nTfqR4wI3ML1G4kvJTKxKwwqFGOw2ArOaxIbk+dGMdCB0PetrrGnpDpcaeavHMvmhB3PSsdBERMVYEodiKniKMgZmbp2sSx3EJ0C0SbDzHhwfSOre1aGw0b/Kfibu5fyoI9hn9zEHCgfKs9Fk3OF2UbKK0HiDUnTT7S0T08C8b46sTzPyxU8ReRA5vUueRj582tM++oKs+ycPlE+WAf5709XQ0uNHi1CCQJw7yqWHp329z1/u9Zi6haS48wDZ8NypvZXRzLb59Dr5Yx3A2P1qeInpLOqqtx6QS8hSedpIWQK25DbEHrUoORXVyN6lDxF9I5VIAAMOuYG/GXAAPHhs/7/wB0HZO9vcxKMA5yc8vnWoutO8rWmLgMrPkkciDQt1oX4aWaViFQZ3G5rv8AZPExrXUDQ3pPLmWKaV76BPKX9PAP2n29sCmWl6rIkxgZiYpRuF24qQrLmUW4HCGXYE9eY/1TrS7MT2fnhstbnBB7f+/5qwp3iKgsL/LSeKbNoLaJWXhzuPcHr8KmjWRmnTAPAsStntsCf90z1h11S0it24VliT0nfLDPL+aKQW9loiRoc3nDhsZI4efwzyo9o8iLBQoVVsDOcemB73x94h1Ym9Ek2TwQng4fYDYVnnDTzq6jBzyFaq6MVrbRIZFLzDzShHfofpROheGoLqb8QHC2yjMhYgcNVakBmNoMxOkC5O3z8xBpFkJbgmXbB296bvosV551xPJwxJ6T3Lb4AozWreHSWJtnWUTKCHA5D/vtSXWNZkSO1tgRwovEw7k4zn7fSj2xa8oQ5rG+/wA5HEQtc+XNlRw8B9OOlPYNGjutLW8iZY3B9cZO47EfeuU0aG8H4lX4UYcRBG47iqodV8u7aKI8EOOEAfYn6Ch2rbxrVA4/ljI3gd1GGmJXAB55HWpWjg060v4lmcmNyNwBkVKPYlB1AAsfxFdnrgMzJP6uHOD1FFeJNbN8lpcR8KBRwFV/SMdMdsHr71kZmMOpuOLiQvzXkR3FFP5kMNwkueHmp7kdvlW/STvxNnZCHGxtieX95Hc3L3USiIE44Adlplo+pOk4V3/Kbc55VkluSZCo/QdqfWKGTTXlUEmHdzjkOn3/AJqlNbm4j69ABNJEbazO9i0JJKuSW3222Ir2xvnubhMsSiqGJJ9t6V6tqZ1C2gt2I8yFMI3UjmV+ucfH4UUl5bWuiCNCTfk+ojkE7fHP8U3T+qZOwO2BzLLwm5nkkJJSNuEY7dKOn1xrWyFvGcOcF8Hr0Hy3+tLZryGxtLf8wNNKnm8ONlySMH5AH51NH09NSmad50jt4/VKZGxwj+T8s1CttpFok2BG0YWepi7RYp98HY9apOmxzPPc3LssSHhBx+p+gBoDWZbfTpitpL5ySDIk4cbdsfHNC6trTvDZwcXojGSozuxxkn3xj6UGAtmFOnOu68x5pt4q2DKWCu5IRf770KmmxXNgt1HMFlRsSRHmB0I+/wANu9LmlWYrIJeFUG6nv7fPNVRar5d/IUbgjK8lP0z88VCuwMKUSCxXeaYavFbARjmux+PWpWfikhu18x3MbnYgD71KZZuIjxqY/qveZu21lFuGjkyeHO52+NG6x4gW/MFw8g9KiMheWwwBt7AVkGzxknevSCoKnIHPHetYp4InsD0iEgwie7aK+kdd8ekAnam9jr4W48tmIiAxhjsazx3Oa8pWgKcRz0EqLYzRandmyaLiBYkkgjt3rqzv0mnUhzhVDNnoOtJLm9lu4YIpXLrCvBGD+1c5wPmSfmas/Fxpppt1iHnM2Wlz+3t9T9h703srcniJ8caAOYyudWjlmY+ZnhIAx26Yq+fWlt7Xyg4O/qCnJJrMh+E560Ta2huVlfjREiXjYu2OoAAHUkkbD48gTQp0xUNlOTLeKmPaPLXVVuVVS3F2U/qFVSajEZHLSAspzSrUUt7adls53uIGVSJJI/LJyASCMnkcjn0oQGquiqdN5B0q3vNNaajCbYhmw8n6ASM/3NCJqMborDOSwXHWkxOcb7DYV5xcJBG2Nxio1MAC8g6ZQSZpl1+K2AjDKSOZxnf6VKzQw25JzUpwp3FwfvK+HS5E7tuFpOFlyDRuovLqEscsj8TBFjy3ZQAo+QAHyqVKUrHTb5vO3TUNTNxApoGiUkkEZqhThu4FSpSXJuIhwFNhLZ4fJ4cnJJNeKuZAM7YyfpmpUq390sygNb9pwwwT8askPAgQHsT8alSoCRciLtgzhfUQp612sJ9e49HOpUqAk5hUAyyG3EkTMSc8hVBB4AffFSpVm2l3UBVInfmGI8IA27gGpUqUdbDAMUSbz//Z"
}