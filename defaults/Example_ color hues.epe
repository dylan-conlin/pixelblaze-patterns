{
  "name": "Example: color hues",
  "id": "naDzrf7nK4HLFWBcW",
  "sources": {
    "main": "/*\n  In this example you'll see:\n  - Colors!!!\n  - Using an array to switch between modes\n  - Lambda style function expressions\n  - More colors!\n  - Accumulating delta to make a mode switch timer\n  - Viewing which mode is playing in the variable watcher\n*/\n \n// First, keep track of how many modes there will be\nnumModes = 13\nmodes = array(numModes) // Make an array to store the modes\n\n// Make a bunch of lambda style mode functions and put them in the modes array\n// f is expected to be in 0..4\nmodes[0]  = (f) => f     // As values progress, a rainbow is drawn\nmodes[1]  = (f) => 0     // A hue of 0.0 or 1.0 is red\nmodes[2]  = (f) => 1 / 3 // A hue around 1/3 is green\nmodes[3]  = (f) => 2 / 3 // 2/3 hue is blue\nmodes[4]  = (f) => 1     // This wraps back around to red\nmodes[5]  = (f) => f * .2 % .2 // Using modulus will wrap early and with a sharp edge\nmodes[6]  = (f) => triangle(f) * .2 // Using triangle will keep the transitions smooth\nmodes[7]  = (f) => wave(f) * .2 // Wave also works, but is non-linear\nmodes[8]  = (f) => square(f, .5) * .5 + .33 // Square can make stripes\nmodes[9]  = (f) => wave(f) * triangle(f*4) * .2 // Color textures by combining waveforms\nmodes[10] = (f) => wave(f)*.5 % .2 - triangle(f) * .2 + .66 // More textures\nmodes[11] = (f) => (f + f % .2) * .5 // Mod error overlay\nmodes[12] = (f) => abs(f* .25 - .5) * 2 // Centered  \n\ntimer = 0 // Accumulate all the deltas each animation frame\n\n/*\n  Adding `export` when declaring a variable will send it back to any connected \n  web browser via websockets. To see the current value of `mode`, click \"Enable\"\n  next to \"Vars Watch\" in the web editor.\n*/\nexport var mode = 0 // Start with mode 0\n\n/*\n  The beforeRender function is called once before each animation frame\n  and is passed a delta in fractional milliseconds since the last frame.\n  This has very high resolution, down to 6.25 nanoseconds!\n*/\nexport function beforeRender(delta) {\n  timer += delta // Accumulate all the deltas into a timer\n  if (timer > 600) { // After 600ms, rewind the timer and switch modes\n    timer -= 600\n    mode = (mode + 1) % numModes // Go to the next mode, and keep between 0 and numModes\n  }\n  \n  // Uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n/*\n  The render function is called for every pixel. Here we're going to use \n  the pixel's index to make a number between 0.0 and 4.0. This acts as a 4X \n  frequency modifier, repeating the pattern 4 times across the strip length.\n  That 0-4 value is passed in to the current mode function and its output is \n  used to set the pixel's hue. hsv() \"wraps\" hue between 0.0 and 1.0.\n*/\nexport function render(index) {\n  // Look up the current mode function and call it\n  h = modes[mode](4 * index / pixelCount)\n  hsv(h, 1, 1)\n}\n"
  },
  "preview": "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"
}