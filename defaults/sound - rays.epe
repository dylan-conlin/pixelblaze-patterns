{
  "name": "sound - rays",
  "id": "RFQ83888m35aJfJMZ",
  "sources": {
    "main": "/*\n  Sound - rays\n\n  This pattern is designed to use the sensor expansion board, but falls back to\n  simulated sound data if the sensor board isn't detected.\n\n  The beginning of the strip will originate pixels with color based on the most\n  prevalent frequency in the sound, and brightness based on the magnitude. Those\n  rays of color will then travel down the strip.\n\n  Please check out the \"sound - blink fade\" pattern for more verbose comments\n  explaining the PI controller used below for automatic gain control. \n*/\n\n\n// Speed that the rays travel down the strip\nspeed = 0.05\n\n// These vars are set by the external sensor board, if one is connected. We\n// don't actually use light readings in this pattern, so if the `light` value\n// remains -1, no sensor board is connected.\nexport var light = -1 \nexport var maxFrequencyMagnitude\nexport var maxFrequency\n\nhues = array(pixelCount)\nvals = array(pixelCount)\n\n// A position pointer, in pixels, that turns hues[] and vals[] into a circular\n// buffer\npos = 0\n// Stores the last brightness value to feed back into the PI gain controller \nlastVal = 0\n\nexport var pic = makePIController(.05, .35, 200, 0, 400)\n\n// Make a new PI Controller\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  pic[0] = kp\n  pic[1] = ki\n  pic[2] = start // This is the accumulated error\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\nfunction calcPIController(pic, err) {\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n  return max(pic[0] * err + pic[1] * pic[2], .3)\n}\n\nexport function beforeRender(delta) {\n  // Here the PI controller is aiming for a sensitivity based on chasing recent\n  // maxFrequencyMagnitudes to be 0.5\n  sensitivity = calcPIController(pic, .5 - lastVal)\n  \n  // To make the rays travel along the strip, sweep a position offset pointer\n  // down the arrays of values and hues\n  pos = (pos + delta * speed) % pixelCount\n  \n  if (light == -1) simulateSound()  // No sensor board attached\n  \n  // The brightness value will be determined by the magnitude of the most\n  // intense frequency. This is also our feedback to the PI controller.\n  lastVal = vals[pos] = pow(maxFrequencyMagnitude * sensitivity, 2)\n  \n  /*\n    The base color will be modified by time and strip position in render(), but\n    its hue begins based on the most intense frequency detected. If you played a\n    swept tone between 20 Hz and 5 KHz, it'd trace a rainbow. \n  */\n  hues[pos] = maxFrequency / 5000\n\n  // Used to subtly advance the hue over time\n  t1 = time(6.5 / 65.536)\n}\n\nexport function render(index) {\n  // Reverse indices so that pixels flow to the right\n  index = pixelCount - index\n  // Shift the index circularly based on the position offset\n  i = (index + pos) % pixelCount\n  \n  h = hues[i]\n  /*\n    This rotates color by adding a component based on time and position.  \n    Comment this out to more clearly see the detected maximum frequencies.\n    Adding `index / pixelCount / 4` adds a quarter of the hue wheel across the\n    strip's entire length. Notice that since index is reversed, *adding* t1 back\n    in has the effect of *slowing* the hue progression.\n  */\n  h += index / pixelCount / 4 + t1\n\n  v = vals[i]\n  v = v * v  // Gamma correction\n\n  hsv(h, 1, v)\n}\n\n/* \n  Simulate the sensor board variables used in this pattern, if no senor board is\n  detected. The values and waveforms were chosen to approximate the look when\n  sound is sensed. \n*/\nfunction simulateSound() { \n  t1 = time(10 / 65.536) \n  maxFrequency = 2000 * (1 + wave(t1)) * (0.7 + random(0.3)) \n  maxFrequencyMagnitude = log(1.05 + wave(17 * t1) * wave( 19 * t1) * wave(23 * t1)) \n  maxFrequencyMagnitude *= 0.7 + random(0.3)\n}\n"
  },
  "preview": ""
}