{
  "name": "seastar 2D",
  "id": "nEfuerkrJPzKStT8q",
  "sources": {
    "main": "// Sea Star 2D\n//\n// 10/27/2021 ZRanger1\n\nvar timebase;\nexport var complexity = 1.5;\nexport var nSides = 5;\nexport var speed = 1.75;\nvar slice = PI / nSides;\nvar waveScale = 8;       // larger values == more complex waves\nvar contrast = 0.02023;  // smaller values == higher contrast\n\ntranslate(-0.5,-0.5)\nscale(.5,.5)\n\nexport function sliderSpeed(v) {\n  speed = (4 * v);\n}\n\nexport function sliderComplexity(v) {\n  complexity = 1+(1.5*v);\n}\n\nexport function sliderReflections(v) {\n  nSides = 1+floor(v * 15);\n  slice = PI / nSides;  \n  waveScale = 8;  \n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 3600;\n  t = timebase * speed; \n  t2 = t / 2 * complexity;\n}\n\n// sets up a kaleidoscope effect - makes the image repeat over evenly divided\n// rotated \"slices\" about the center.\nvar x1,y1,s,temp;\nexport function render2D(index,x,y) {\n  var r,g,b;\n  \n  // fold coordinate space across our slices\n  var angle = atan2(y, x);\n  angle = mod(angle, 2.0 * slice);\n  \n  // rotate image over time\n  angle += t;\n  \n  // map new rotated coordinates back to original image space\n  var d = hypot(x,y);\n  x1 = 1-(d * cos(angle) * waveScale + t2);\n  y1 = d * sin(angle);  \n  \n  // draw a few iterations of our wave function over a short time interval  \n  for (i = 0; i < 3;i++) {\n    y1 += sin(x1*(i*complexity) + (t + i/complexity)) * 0.5;\n    b += i * abs(contrast/y1);\n  }\n\n  b = clamp(b,0,1);\n  hsv(0.6667 - (0.075 * b),1,b)\n}"
  },
  "preview": "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"
}