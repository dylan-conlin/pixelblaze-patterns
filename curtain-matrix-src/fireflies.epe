{
  "name": "fireflies",
  "id": "sufPzeHPStbpDWikp",
  "sources": {
    "main": "/*\n  FireFlies\n  \n  This is a fork of the sparks pattern where each spark is:\n    - Slowed down \n    - Given a longer lifetime \n    - Allowed to loop from one end to the other\n  \n  This is a highly upvoted pattern generously contributed to the community\n  pattern library by an unknown person. Please reach out if you'd like an\n  attribution link here!\n*/\n\n\n\nsparkHue = .05       // Set the hue for each spark\nsparkSaturation = 1  // Set the saturation for each spark (0 = white)\nexport var numSparks = 1 + floor(pixelCount / 10)  // Scale number of sparks based on # LEDs\ndecay = .99          // Decay their energy/speed. Use .999 for slower\nmaxSpeed = .2        // The maximum initial speed of any spark / firefly\nnewThreshhold = .01  // Recycle any spark under this energy\n\nsparks = array(numSparks)\nsparkX = array(numSparks)\npixels = array(pixelCount)\n\n\nexport function beforeRender(delta) {\n  delta *= .1\n  \n  for (i = 0; i < pixelCount; i++) pixels[i] *= .9 // Air cooling\n  \n  for (i = 0; i < numSparks; i++) {\n    // Recycle dead sparks\n    if (abs(sparks[i]) <= newThreshhold) {\n      sparks[i] = (maxSpeed / 2) - random(maxSpeed)\n      sparkX[i] = random(pixelCount)\n    }\n    \n    sparks[i] *= decay  // Spark energy decay\n    sparkX[i] += sparks[i] * delta  // Advance each position \u221d its energy\n    \n    // Allow sparks to loop around each end\n    if (sparkX[i] >= pixelCount) sparkX[i] = 0\n    if (sparkX[i] < 0) sparkX[i] = pixelCount - 1\n    \n    // Heat up the pixel at this spark's X position\n    pixels[floor(sparkX[i])] += sparks[i]\n  }\n}\n\nexport function render(index) {\n  v = pixels[index]\n  hsv(sparkHue, sparkSaturation, v * v * 10)\n}\n"
  },
  "preview": "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"
}