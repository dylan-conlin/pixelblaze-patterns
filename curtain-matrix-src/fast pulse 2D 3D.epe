{
  "name": "fast pulse 2D 3D",
  "id": "we5wH2iTAH726n39W",
  "sources": {
    "main": "/*\n  Fast pulse 2D/3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\n\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(10)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x \u2212 x1) + b(y \u2212 y1) + c(z \u2212 z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 3)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < .78\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lengths. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}