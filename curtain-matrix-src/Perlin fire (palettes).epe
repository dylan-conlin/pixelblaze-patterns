{
  "name": "Perlin fire (palettes)",
  "id": "Zctt6BgiHNb25xhwT",
  "sources": {
    "main": "/* \n   Demonstration of Perlin noise functions to generate fire \n   The first mode shows Perlin noise scaled to 0-1.\n   The second shows a fractal ridge function, creating fire tendrils.\n   The third fractal Brownian Motion (fBm), a fairly decent aproximation of fire.\n   The fourth uses a fractal turbulence function, and looks like a blackened rolling fireball.\n\n   2022 Ben Hencke (wizard)\n*/\n\nvar fire = [\n  0,    0, 0, 0,\n  0.2,  1, 0, 0,\n  0.8,  1, 1, 0,\n  1,    1, 1, 1\n]\nvar Analogous_1 = [0.0, 0.012, 0.0, 1.0,    0.247, 0.09, 0.0, 1.0,    0.498, 0.263, 0.0, 1.0,   0.749, 0.557, 0.0, 0.176,   1.0, 1.0, 0.0, 0.0,];\nvar BlacK_Blue_Magenta_White = [0.0, 0.0, 0.0, 0.0,   0.165, 0.0, 0.0, 0.176,   0.329, 0.0, 0.0, 1.0,   0.498, 0.165, 0.0, 1.0,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 1.0,   1.0, 1.0, 1.0, 1.0,];\nvar BlacK_Red_Magenta_Yellow = [0.0, 0.0, 0.0, 0.0,   0.165, 0.165, 0.0, 0.0,   0.329, 1.0, 0.0, 0.0,   0.498, 1.0, 0.0, 0.176,   0.667, 1.0, 0.0, 1.0,   0.831, 1.0, 0.216, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar Blue_Cyan_Yellow = [0.0, 0.0, 0.0, 1.0,   0.247, 0.0, 0.216, 1.0,   0.498, 0.0, 1.0, 1.0,   0.749, 0.165, 1.0, 0.176,   1.0, 1.0, 1.0, 0.0,];\nvar GMT_drywet = [0.0, 0.184, 0.118, 0.008,   0.165, 0.835, 0.576, 0.094,   0.329, 0.404, 0.859, 0.204,   0.498, 0.012, 0.859, 0.812,   0.667, 0.004, 0.188, 0.839,   0.831, 0.004, 0.004, 0.435,   1.0, 0.004, 0.027, 0.129,];\nvar bhw1_04_gp = [0, 229,227,  1,   15, 227,101,  3,    142,  40,  1, 80,   198,  17,  1, 79,   255,   0,  0, 45]\nvar black_Blue_Magenta_White_gp = [0,   0,  0,  0, 42,   0,  0, 45, 84,   0,  0,255, 127,  42,  0,255, 170, 255,  0,255, 212, 255, 55,255, 255, 255,255,255]\nvar es_landscape_33_gp = [0,   1,  5,  0, 19,  32, 23,  1, 38, 161, 55,  1, 63, 229,144,  1, 66,  39,142, 74, 255,   1,  4,  1]\nvar gr65_hult = [0.0, 0.969, 0.69, 0.969,   0.188, 1.0, 0.533, 1.0,   0.349, 0.863, 0.114, 0.886,   0.627, 0.027, 0.322, 0.698,   0.847, 0.004, 0.486, 0.427,   1.0, 0.004, 0.486, 0.427,];\nvar heatmap_gp = [0,     0,  0,  0, 128,   255,  0,  0, 224,   255,255,  0, 255,   255,255,255 ];\nvar inferno = [ 0.0, 0/255, 0/255, 4/255, 0.1, 22/255, 11/255, 57/255, 0.2, 66/255, 10/255, 104/255, 0.3, 106/255, 23/255, 110/255, 0.4, 147/255, 38/255, 103/255, 0.5, 188/255, 55/255, 84/255, 0.6, 221/255, 81/255, 58/255, 0.7, 243/255, 120/255, 25/255, 0.8, 252/255, 165/255, 10/255, 0.9, 246/255, 215/255, 70/255, 1.0, 252/255, 255/255, 164/255, ]\nvar lava = [0.0, 0.0, 0.0, 0.0,   0.18, 0.071, 0.0, 0.0,    0.376, 0.443, 0.0, 0.0,   0.424, 0.557, 0.012, 0.004,   0.467, 0.686, 0.067, 0.004,   0.573, 0.835, 0.173, 0.008,   0.682, 1.0, 0.322, 0.016,   0.737, 1.0, 0.451, 0.016,   0.792, 1.0, 0.612, 0.016,   0.855, 1.0, 0.796, 0.016,   0.918, 1.0, 1.0, 0.016,   0.957, 1.0, 1.0, 0.278,   1.0, 1.0, 1.0, 1.0,];\nvar rainbowsherbet = [0.0, 1.0, 0.129, 0.016,   0.169, 1.0, 0.267, 0.098,   0.337, 1.0, 0.027, 0.098,   0.498, 1.0, 0.322, 0.404,   0.667, 1.0, 1.0, 0.949,   0.82, 0.165, 1.0, 0.086,    1.0, 0.341, 1.0, 0.255,];\n\narrayMutate(bhw1_04_gp,(v, i ,a) => v / 255);\narrayMutate(black_Blue_Magenta_White_gp,(v, i ,a) => v / 255);\narrayMutate(es_landscape_33_gp,(v, i ,a) => v / 255);\narrayMutate(heatmap_gp,(v, i ,a) => v / 255);\n\n\n\nvar sunset = [0.0, 0.471, 0.0, 0.0,    0.086, 0.702, 0.086, 0.0,   0.2, 1.0, 0.408, 0.0,   0.333, 0.655, 0.086, 0.071,   0.529, 0.392, 0.0, 0.404,   0.776, 0.063, 0.0, 0.51,    1.0, 0.0, 0.0, 0.627,];\n// List of palettes\n// good fire palettes:\nvar palettes = [\n  fire,\n  inferno,\n  lava,\n  BlacK_Blue_Magenta_White,\n  Blue_Cyan_Yellow,\n  black_Blue_Magenta_White_gp,\n  gr65_hult,\n]\n\n// These don't look that great as fire palettes:\n// Analogous_1,\n// BlacK_Red_Magenta_Yellow,\n// GMT_drywet,\n// bhw1_04_gp,\n// es_landscape_33_gp,\n// rainbowsherbet,\n// heatmap_gp,\n\nvar currentPalette = random(palettes.length);\nsetPalette(palettes[currentPalette]);\n\nexport function showNumberPaletteMode() {\n  return currentPalette + 1;\n}\n\n//variants of noise can be chosen from\nmodes = [\n  (x,y,z) => (perlin(x, y, z, 0) + 1)/2, //by default perlin returns negative values too, scale this to 0-1\n  (x,y,z) => perlinRidge(x, y, z, 2, .5, 1.1, 3),\n  (x,y,z) => (perlinFbm(x, y, z, 2, .5, 3)+1)/2, //this can also generate negative values\n  (x,y,z) => perlinTurbulence(x, y, z, 2, .5, 3),\n]\nexport var mode = 1\nexport var fireScale = 3\nexport var risingSpeed = 1\nexport var morphSpeed = 1\n\nexport function sliderMode(v) {\n  mode = round(v*(modes.length - 1))\n}\nexport function showNumberMode() {\n  return mode + 1\n}\nexport function sliderScale(v) {\n  fireScale = 1 + v*10 \n}\nexport function sliderRisingSpeed(v) {\n  v = 1-v\n  risingSpeed = 0.2 + (v*v) * 5\n}\nexport function sliderMorphSpeed(v) {\n  v = 1-v\n  morphSpeed = 0.2 + (v*v) * 5\n}\n\nexport function toggleDisableSliders(v) {\n  if (v) {\n    fireScale =\t11.000000\n    mode = 0.000000\n    morphSpeed = 1.235062\n    risingSpeed = 5.199982\n  }\n}\nvar timeCounter = 0; // Initialize a counter to keep track of time\n\nexport function beforeRender(delta) {\n  timeCounter += delta; // Increment the time counter by the time since the last frame\n\n  //by default perlin wraps smoothly every 256, so 0.0 and 256 are the same\n  //animate the perlin noise by moving z across time from 0-256\n  //this also means increasing the interval we use with time() to slow it down\n  //and happens to give us a lot of unique noise\n  morphTime = time(6 * morphSpeed) * 256\n  yTime = time(1.3 * risingSpeed) * 256\n  modeFn = modes[mode]\n  resetTransform()\n  translate(-.5, 0)\n  scale(fireScale,fireScale)\n}\n\nexport function render2D(index, x, y) {\n  //call out to a noise function based on the mode, animating y to rise and using z to morph the fire over time\n  v = modeFn(x, y + yTime, morphTime ) \n  \n  //create a hotter column around the center of x, fading towards the edges\n  v = v * 2*(1 - abs(x/fireScale*1.8)) \n  \n  //fade out the higher it gets\n  v = v * y/fireScale \n  \n  //keep palette from wrapping if noise goes past 1.0\n  v = min(v,1) \n  paint(v, v)\n}"
  },
  "preview": "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"
}