{
  "name": "Wave Pool",
  "id": "7k4hxZxgcXqoJBmmM",
  "sources": {
    "main": "// Water Caustics \n// Bright patterns made by light bouncing around and through the\n// curves made by ripples on the water's surface.  \n//\n// MIT License\n// Take this code and use it to make cool things!\n//\n// 1/27/2022 ZRanger1\n\nvar timebase = 0;\n\nexport var contrast = 1/24;\nexport var whiteLevel = 1.125;\nexport var speed = 3.5;\n\nexport function sliderSpeed(v) {\n  speed = 1 + 8*v;\n}\n\nexport function sliderWhiteLevel(v) {\n  whiteLevel = 0.8 + (1-v)\n}\n\nexport function sliderContrast(v) {\n  contrast = 1/(16+24*v);\n}\n\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase / 6;\n}\n\nexport function render2D(index,x,y) {\n  var px,py,ix,iy,c;\n  \n  // scale coords to work well as angles for sin/cos\n  px = x * PI2 - 20;  py = y * PI2 - 20;\n  ix = px; iy = py;\n  c = 1;\n\n  // build a couple of lumpy circular \"waves\"\n  var t = t1 * (1-speed);\n  tmp = px + cos(t - ix) + sin(t + iy); \n  iy = py + sin(t - iy) + cos(t + ix);\n  ix = tmp;\n\n  c += 1/hypot(px/sin(t + ix)*contrast, py/cos(t + iy)*contrast)\n\n  var t = t1 * (1-speed/2);\n  tmp = px + cos(t - ix) + sin(t + iy); \n  iy = py + sin(t - iy) + cos(t + ix);\n  ix = tmp;\n\n  c += 1/hypot(px/sin(t + ix)*contrast, py/cos(t + iy)*contrast)\n  \n  // scale, gamma correct and draw!\n  c = 1.65-sqrt(c/2);\n  c = c * c * c * c;\n  c = clamp(c,0,1);\n  \n  hsv(0.6667- (0.3 * c),whiteLevel-c,c)\n  \n}\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "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"
}