{
  "name": "sound  - Pew-Pew-Pew!",
  "id": "uSDprvKsfmKv722Pw",
  "sources": {
    "main": "/*\n  sound - Pew-Pew-Pew!\n\n  Pew-pew-pew is one of the most popular user-submitted patterns on the\n  community pattern library, for good reason. It was one of the first Pixelblaze \n  patterns to illustrate bitwise packing, passing functions as arguments, and\n  lightweight 1D particle physics. Who doesn't love an array of lasers?\n\n  If the Pixelblaze Sensor Expansion Board is connected, the blue component\n  reacts to sound.\n\n  Original Author: Scott Balay \n  https://www.scottbalay.com/\n  https://github.com/zenblender/pixel-blaze-patterns\n*/\n\n\n// User variables. These were set for a 150-LED strip; you can adjust the \n// settings to your liking.\n\n/*\n  A laser is a pulse travelling down the strip. When a laser passes the end,\n  it's respawned. `laserCount` sets how many lasers are present at once on\n  the strip. Use a multiple of numPaletteRGBs to have each available color\n  represented equally.\n*/\nlaserCount = 5\n\n// Laser speed. Try values between 0.1 and 10.\nspeedFactor = 1\n\n// Each frame we'll multiply each pixel's brightness by fadeFactor (try values \n// between 0.5 abd 0.99). Higher values create longer tails.\nfadeFactor = 0.9\n\n// Higher values are more dramatically responsive to sound\nsoundLevelPowFactor = 1.2\n\n// When useBlueLightning is true, lasers being respawned cause the entire strip\n// to flash blue. Consider disabling if you're using the sound sensor board.\nuseBlueLightning = true\n\n// Flip to run backwards\nisForwardDirection = true\n\n// Ambient color added to all LEDs to provide a base color\nambientR = 15\nambientG = 0\nambientB = 0\n\n\n// Adjust the user parameters specified above\n\n// Slow lasers inherently need slower fades\nfadeFactor = pow(fadeFactor, speedFactor)\n// To effectively scale delta (which is in ms per frame) into the number of\n// pixels to advance a laser by, we need to scale it. Delta is typically between\n// 5ms and 30ms, depending on Pixelblaze HW and the number of pixels.\nspeedFactor /= 100\n\n\n// Initialize a palette of available colors, specified in RGB\nnumPaletteRGBs = 5\npaletteRGBs = array(numPaletteRGBs)\npaletteRGBs[0] = packRGB(255, 13, 107)\npaletteRGBs[1] = packRGB(232, 12, 208)\npaletteRGBs[2] = packRGB(200, 0,  255)\npaletteRGBs[3] = packRGB(124, 12, 232)\npaletteRGBs[4] = packRGB(70,  13, 255)\n\n\nfunction getRandomVelocity() { return random(4) + 3 }\n\n// Initialize the RGB color of each laser\nlaserRGBs = createArray(laserCount, \n              function(i) { return paletteRGBs[i % numPaletteRGBs] }, true)\n\n// Initialize randomized starting position for each laser\nlaserPositions = createArray(laserCount, \n                   function() { return random(pixelCount) }, true)\n\n// Initialize each laser's velocity. This shows the anonymous short lambda syle.\nlaserVelocities = createArray(laserCount, \n                    () => { return getRandomVelocity() }, true)\n\n// Initialize the full pixel array\npixelRGBs = createArray(pixelCount)\n\n\n// Calculate sound\n\n/*\n  This exported variable is set by the external sensor board, if one is\n  connected. The loudness of the strongest frequency is stored in\n  `maxFrequencyMagnitude`, and it's smallest sensed value is zero. It's\n  initialized here to an \"impossible value\" of -1. If it remains -1 in\n  beforeRender(), then we know that a sensor board is not connected.\n*/\nexport var maxFrequencyMagnitude = -1\n\nsoundLevelVal = 0\n\n// Using a PI controller to autoscale sound readings is well documented in the\n// \"sound - blinkfade\" pattern\npic = makePIController(.05, .35, 30, 0, 400)\n\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  pic[0] = kp\n  pic[1] = ki\n  pic[2] = start\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\nfunction calcPIController(pic, err) {\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n  return pic[0] * err + pic[1] * pic[2]\n}\n\n\nexport function beforeRender(delta) {\n  // Recall that the exported `maxFrequencyMagnitude` is set above to -1 in the\n  // absence of a sensor board\n  sensorBoardConnected = (maxFrequencyMagnitude >= 0)  \n  \n  if (sensorBoardConnected) {\n    // Use the PI controller to set `sensitivity` in a way that seeks a desired\n    // `soundLevelVal` of 0.5\n    sensitivity = calcPIController(pic, .5 - soundLevelVal)\n\n    // Instead of using overall loudness, use the strongest frequency's energy\n    soundLevelVal = pow(maxFrequencyMagnitude * sensitivity, \n                        soundLevelPowFactor)\n  }\n\n  // Fade existing pixels\n  for (i = 0; i < pixelCount; i++) {\n    pixelRGBs[i] = packRGB(\n      floor(getR(pixelRGBs[i]) * fadeFactor),\n      floor(getG(pixelRGBs[i]) * fadeFactor),\n      floor(getB(pixelRGBs[i]) * fadeFactor)\n    )\n  }\n\n  // Advance laser positions\n  for (laserIndex = 0; laserIndex < laserCount; laserIndex++) {\n    currentLaserPosition = laserPositions[laserIndex]\n    nextLaserPosition = currentLaserPosition + \n                        delta * speedFactor * laserVelocities[laserIndex]\n    \n    // Draw new laser edge, but fill in \"gaps\" from last draw\n    for (i = floor(nextLaserPosition); i >= currentLaserPosition; i--) { \n      if (i < pixelCount) {\n        pixelRGBs[i] = packRGB(\n          min(255, getR(pixelRGBs[i]) + getR(laserRGBs[laserIndex])),\n          min(255, getG(pixelRGBs[i]) + getG(laserRGBs[laserIndex])),\n          min(255, getB(pixelRGBs[i]) + getB(laserRGBs[laserIndex]))\n        )\n      }\n    }\n\n    laserPositions[laserIndex] = nextLaserPosition\n    if (laserPositions[laserIndex] >= pixelCount) {\n      // Respawn this laser back at the start\n      laserPositions[laserIndex] = 0\n      laserVelocities[laserIndex] = getRandomVelocity()\n    }\n  }\n}\n\nexport function render(rawIndex) {\n  index = isForwardDirection ? rawIndex : (pixelCount - rawIndex - 1)\n  \n  rgb(\n    (getR(pixelRGBs[index]) + ambientR) / 255,\n    (getG(pixelRGBs[index]) + ambientG) / 255,\n    (getB(pixelRGBs[index]) +                        // Lasers' blue values\n      (useBlueLightning ? getB(pixelRGBs[0]) : 0) +  // Blue lighting on respawn\n      soundLevelVal * 255 +                          // Add blue for sound\n      ambientB                                       // Add ambient blue\n    ) / 255\n  )\n}\n\n\n// Utilities\n\n// Array initialization\nfunction createArray(size, valueOrFn, isFn) {\n  arr = array(size)\n  if (!valueOrFn) return arr\n  for (i = 0; i < size; i++) {\n    arr[i] = isFn ? valueOrFn(i) : valueOrFn\n  }\n  return arr\n}\n\n// RGB functions \n// Assume each component is an 8-bit \"int\" (0-255)\nfunction packRGB(r, g, b) { return _packColor(r, g, b) }\nfunction getR(value) { return _getFirstComponent(value) }\nfunction getG(value) { return _getSecondComponent(value) }\nfunction getB(value) { return _getThirdComponent(value) }\n\n// HSV functions \n// Assume each component is an 8-bit \"int\" (0-255)\nfunction packHSV(h, s, v) { return _packColor(h, s, v) }\nfunction getH(value) { return _getFirstComponent(value) }\nfunction getS(value) { return _getSecondComponent(value) }\nfunction getV(value) { return _getThirdComponent(value) }\n\n// \"Private\" color functions\n// Assume each component is an 8-bit \"int\" (0-255)\nfunction _packColor(a, b, c) { return (a << 8) + b + (c >> 8) }\nfunction _getFirstComponent(value)  { return (value >> 8) & 0xff } // R or H\nfunction _getSecondComponent(value) { return  value       & 0xff } // G or S\nfunction _getThirdComponent(value)  { return (value << 8) & 0xff } // B or V\n"
  },
  "preview": ""
}