{
  "name": "sparks center",
  "id": "FaJD9BrFGvxoSQ2Rg",
  "sources": {
    "main": "/*\n  Sparks center\n  \n  This pattern builds on the \"sparks\" pattern.\n  \n  If you understood the comments on that one, this is a straightforward\n  adaptation to spawn sparks at the center of the strip. The comments here focus\n  on that adaptaton.\n*/\n\nnumSparks = floor(pixelCount / 6)\n\n// Middle index of the strip\nmidIndex = pixelCount / 2\n\n// These constants set the bounds for a newly spawned spark's initial velocity\nISEM = 0.45           // ISEM = Initial Spark Energy Minimum\nISER = 0.66 * ISEM    // ISER = Initial Spark Energy Range\n\n// Each spark has half the strip distance to cover, so halve the friction\nfriction = 1 / pixelCount / 2\nsparks = array(numSparks)  // Energy of each spark\nsparkX = array(numSparks)  // Positions of each sprak\npixels = array(pixelCount) // Heat / intensity in each pixel\n\nfor (i = 0; i < numSparks; i++) {\n  // Initialize each spark's position to a random point on the strip\n  sparkX[i] = random(pixelCount)\n  // Sparks further from the center are older and have less energy\n  sparks[i] = ISEM * (1 - abs(sparkX[i] - midIndex) / midIndex) + random(ISER)\n  // Set the sparks left of center to head left (I..E. have negative energy) \n  if (sparkX[i] < pixelCount / 2) sparks[i] *= -1\n}\n\n\nexport function beforeRender(delta) {\n  delta *= .1  \n\n  for (i = 0; i < pixelCount; i++)\n    pixels[i] *= min(0.1 / delta, 0.99)\n  \n  // Examining each spark...\n  for (i = 0; i < numSparks; i++) {\n    // If a spark has fizzled out...\n    if (abs(sparks[i]) < 0.001) {\n      // Set this spark's energy to a value between ISEM and (ISEM + ISER)\n      sparks[i] = ISEM + random(ISER)\n      // Randomly set half the sparks to go left (IE negative energy)\n      if (random(1) > 0.5) sparks[i] *= -1\n      // Set the spark's position back to the center\n      sparkX[i] = midIndex\n    }\n\n    // Slow it down (lose some energy) with friction; preserve the sign\n    sparks[i] -= friction * delta * (sparks[i] > 0 ? 1 : -1)\n    \n    /*\n      Advance the position of each spark proportional to how much time has \n      passed. sparks[i] is signed, so negative energy reduces its position.\n      Notice we opted to not use the square of sparks[i] this time. You can,\n      but don't forget to add the sign back:\n\n      sparkX[i] += pow(sparks[i], 2) * delta * (sparks[i] > 0 ? 1 : -1)\n\n      As-is, it functions more like a velocity, where Δx = v ⋅ Δt\n    */\n    sparkX[i] += sparks[i] * delta\n    \n    /*\n      If a spark's position exceeds either end of the strip, reset its energy\n      to 0. It'll be reinitialized in the next beforeRender(). The position in \n      sparkX also needs to be set to zero in order to avoid an \"array index out \n      of bounds\" error in the next part.\n    */\n    if (sparkX[i] >= pixelCount || sparkX[i] < 0) {\n      sparkX[i] = 0\n      sparks[i] = 0\n    }\n    \n    // Since negative energy is allowed, we need to drop the sign when \n    // accumulating the heat\n    pixels[sparkX[i]] += abs(sparks[i])\n  }\n}\n\n// For every pixel...w\nexport function render(index) {\n  v = pixels[index]  // Brightness is the heat in this pixel\n  v *= v // Gamma correction. Small v (0 < v < 1) becomes smaller.\n  \n  /*\n    h: The hue is set to 0.63, so sparks cool (saturate) to blue\n    s: Make hot/fast pixels white (v close to or above 1 means s is near 0)\n    v: The heat (brightness) in the pixel\n  */\n  hsv(.63, 1 - v, v)\n}\n"
  },
  "preview": ""
}