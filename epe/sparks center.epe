{
  "name": "sparks center",
  "id": "FaJD9BrFGvxoSQ2Rg",
  "sources": {
    "main": "/*\n  Sparks center\n  \n  This pattern builds on the \"sparks\" pattern.\n  \n  If you understand that one, this is a straightforward adaptation to spawn\n  sparks at the center of the strip.\n*/\n\n// If we have 240 px, there's 40 sparks total, 20 per direction (per side)\nnumSparks = floor(pixelCount / 12 * 2)\n\n// Each spark has half the strip distance to cover, so halve the friction\nfriction = 1 / pixelCount / 2\nsparks = array(numSparks)  // Energy of each spark\nsparkX = array(numSparks)  // Positions of each sprak\npixels = array(pixelCount) // Heat / intensity of each pixel\n\nfor (i = 0; i < numSparks; i++) {\n  // Initialize each spark's position to a random point on the strip\n  sparkX[i] = random(pixelCount)\n  // Further sparks are older and have less energy\n  sparks[i] = random(0.4) + (1 - sparkX[i] / pixelCount)\n  // Set the sparks left of center to head left (I..E. have negative energy) \n  if (sparkX[i] < pixelCount / 2) sparks[i] *= -1\n}\n\n// Once per frame\nexport function beforeRender(delta) {\n  delta *= .1  \n  // Reduce each spark's energy proportionaly to the time passed between frames\n  for (i = 0; i < pixelCount; i++)\n    pixels[i] *= min(0.1 / delta, 0.99)\n  \n  // Examining each spark...\n  for (i = 0; i < numSparks; i++) {\n    // If a spark has fizzleè out...\n    if (abs(sparks[i]) < 0.001) {\n      // Set the spark's position back to the center\n      sparkX[i] = pixelCount / 2\n      // Initialize this spark's energy to a random value between 0.4 and 0.8\n      sparks[i] = 0.3 + random(.4)\n      // Randomly set half the sparks to go left (IE negative energy)\n      if (random(1) > 0.5) sparks[i] *= -1\n    }\n\n    // Slow it down (lose some energy) with friction\n    sparks[i] -= friction * delta * (sparks[i] > 0 ? 1 : -1)\n    \n    // Advance the position of each spark proportional to how much time has passed\n    // Notice we preserve the sign of sparks[], so left moves left\n    sparkX[i] += sparks[i] * delta\n    \n    // If a spark's position exceeds EITHER end of the strip, reset its position\n    // and energy to 0. It'll be reinitialized in the next beforeRender()\n    if (sparkX[i] >= pixelCount || sparkX[i] < 0) {\n      sparkX[i] = 0\n      sparks[i] = 0\n    }\n    \n    /*\n      This adds the energy from this spark to the existing heat in the pixel at\n      its current positon. Notice that sparkX[i] contains decimal values; using\n      it as an array index implicitly drops the fractional part, as if we had \n      first called floor() on it.\n    */\n    pixels[sparkX[i]] += abs(sparks[i])\n  }\n}\n\n// For every pixel...w\nexport function render(index) {\n  v = pixels[index]  // Brightness is the heat in this pixel\n  v *= v // Gamma correction. Small v (v < 0) becomes smaller.\n  \n  /*\n    h: The hue is set to 0.63, so sparks cool (saturate) to blue\n    s: Make hot pixels white (v close to or above 1 means s approaches 0)\n    v: The heat (brightness) in the pixel\n  */\n  hsv(.63, 1 - v, v)\n}\n"
  },
  "preview": ""
}