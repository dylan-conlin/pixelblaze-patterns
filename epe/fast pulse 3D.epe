{
  "name": "fast pulse 3D",
  "id": "BvZoMSk6wu37yZ8zY",
  "sources": {
    "main": "/*\n  Fast pulse 3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\n\n\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(.1)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x − x1) + b(y − y1) + c(z − z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 5)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < .8\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lenghts. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}