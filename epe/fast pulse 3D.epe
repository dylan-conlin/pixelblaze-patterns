{
  "name": "fast pulse 3D",
  "id": "BvZoMSk6wu37yZ8zY",
  "sources": {
    "main": "/*\n  Fast pulse 3D\n  \n  3D example: https://youtu.be/EGUTLHb98wM\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully\n  degrade in 2D and 1D.\n  \n  The 3D variant of this pattern sweeps a series of parallel planes (layers) \n  though space and rotates them.\n  \n  The 1D variant is a single Cylon-like eye that changes colors slowly, and\n  bounces across the boundary of the strip's endpoints with a circular\n  continuance.\n*/\nexport function beforeRender(delta) {\n  /*\n    This 0..1 time() output cycles every (0.1 * 65.535) seconds. We'll use this \n    both as the single output hue, as well as a basis for the function that \n    creates the rotating / bouncing pulse(s).\n  */\n  t1 = time(.1)\n  \n  a = sin(time(.10) * PI2)  // -1..1 sinusoid every 6.5 seconds\n  b = sin(time(.05) * PI2)  // -1..1 sinusoid every 3.3 seconds\n  c = sin(time(.07) * PI2)  // -1..1 sinusoid every 6.6 seconds\n}\n\nexport function render3D(index, x, y, z) {\n  /*\n    The formula for a 3D plane is:\n\n      a(x − x1) + b(y − y1) + c(z − z1) = 0 \n\n    where the plane is normal to the vector (a, b, c). By setting out output\n    brightness to the right hand side, the initial defined plane is the dark\n    region, where `v == 0`. This pattern oscillates a, b, and c to rotate the\n    plane in space. By using the `triangle` function, which is repeatedly\n    returning 0..1 for input values continuing in either direction away from 0,\n    we get several resulting 0..1..0.. layers all normal to the vector. \n\n    The `3 * wave(t1)` term introduces a periodic phase shift. The final result\n    is a series of parallel layers, rotating and slicing through 3D space.\n  */\n  v = triangle(3 * wave(t1) + a * x + b * y + c * z)\n\n  // Aggressively thin the plane by making medium-low v very small, for wider \n  // dark regions\n  v = pow(v, 5)\n\n  // Make the highest brightness values (when v is greater than 0.8) white\n  // instead of a saturated color\n  s = v < .8\n  \n  hsv(t1, s, v)\n}\n\n// The 2D version is a slice (a projection) of the 3D version, taken at the\n// z == 0 plane\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  // The core of the oscillation is a triangle wave, bouncing across two total\n  // strip lenghts. The 1D version removes the rotation element.\n  v = triangle(2 * wave(t1) + index / pixelCount)\n  \n  // Aggressive gamma correction looks good, reduces the pulse width, and makes\n  // the dimmer parts of the pulse very smooth on APA102s / SK9822s.\n  v = pow(v, 5)\n  \n  s = v < .9  // For the top 0.1 (10%) of brightness values, make it white\n  \n  hsv(t1, s, v)\n}\n"
  },
  "preview": "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"
}