{
  "name": "Example: time and animation",
  "id": "HMHMSME9qxS4CzbMv",
  "sources": {
    "main": "/*\n * In this example you'll see:\n * - time and animation\n * - using an array to switch between modes\n * - lambda style function expressions\n * - accumulating delta to make a mode switch timer\n */\n\nvar t2 // declare this variable here so we can reference it in our mode functions\n\n// keep track of how many modes there will be\nnumModes = 14\nmodes = array(numModes) // make an array to store the modes\n// make a bunch of lambda style mode functions and put them in the modes array\nmodes[0] = (f, t) => (f + t) % 1 // moving left\nmodes[1] = (f, t) => (1 + f - t) % 1 // moving right\nmodes[2] = (f, t) => (f + triangle(t)) % 1 // bounce back and forth\nmodes[3] = (f, t) => (f + wave(t)) % 1 // smooth back and forth, \nmodes[4] = (f, t) => square(f + t, .5) // a chaser \nmodes[5] = (f, t) => (f + triangle(triangle(t) * t)) % 1 // combining wave functions can create interesting effects\nmodes[6] = (f, t) => (f + wave(wave(t))) % 1 // warbly movemovent\nmodes[7] = (f, t) => square(triangle(wave(t)) + f, .5) // bouncing\nmodes[8] = (f, t) => wave(f + t) * wave(f + t2) // times with different intervals create interesting waveform interactions\nmodes[9] = (f, t) => wave(wave(f + t) + wave(f - t2) + f - t) //wave textures\nmodes[10] = (f, t) => wave(f + wave(wave(t) + f / 4)) // stretchy efect\nmodes[11] = (f, t) => wave((f - 2) * (1 + wave(t))) * wave(wave(t2) + f) // zoomed and blended\nmodes[12] = (f, t) => 2 * triangle(f + wave(t)) - wave(f * .75 + wave(t2)) // kinetic\nmodes[13] = (f, t) => abs(triangle(f - triangle(t2)) - wave(f * 2 + triangle(t))) // glitch conveyer belt\n\ntimer = 0 // accumulate all the deltas each animation frame\nmode = 0 // start with mode 0\n\n// the beforeRender function is called once before each animation frame\n// and is passed a delta in fractional milliseconds since the last frame\n// this has very high resolution, down to 6.25 nanosecons!\nexport function beforeRender(delta) {\n  t = time(.05)\n  t2 = time(.03)\n  timer += delta // accumulate all the deltas into a timer\n  if (timer > 600) { // after 800ms, rewind the timer and switch modes\n    timer -= 600\n    mode = (mode + 1) % numModes // go to the next mode, and keep between 0 and numModes\n  }\n  // uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n// the render function is called for every pixel. here we're going to use \n// the pixel's index to make a number between 0.0 and 4.0\n// then pass that in to the current mode function and use it for brightness\nexport function render(index) {\n  // look up the current mode function and call it\n  v = modes[mode](4 * index / pixelCount, t)\n  hsv(0, 0, v)\n}"
  },
  "preview": "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"
}