{
  "name": "Example: time and animation",
  "id": "HMHMSME9qxS4CzbMv",
  "sources": {
    "main": "/*\n * In this example you'll see:\n * - time and animation\n * - using an array to switch between modes\n * - lambda style function expressions\n * - Another way to make a mode switch timer\n */\n\nvar t2 // Declare this variable here so we can reference it in our mode functions\n\n// Keep track of how many modes there will be\nnumModes = 14\nmodes = array(numModes) // Make an array to store the modes\n\n// Make a bunch of lambda style mode functions and put them in the modes array\n// f is expected to be in 0..4\nmodes[0] = (f, t) => (f + t) % 1 // Moving left\nmodes[1] = (f, t) => (1 + f - t) % 1 // Moving right\nmodes[2] = (f, t) => (f + triangle(t)) % 1 // Bounce back and forth\nmodes[3] = (f, t) => (f + wave(t)) % 1 // Smooth back and forth\nmodes[4] = (f, t) => square(f + t, .5) // A chaser \nmodes[5] = (f, t) => (f + triangle(triangle(t) * t)) % 1 // Combining wave functions can create interesting effects\nmodes[6] = (f, t) => (f + wave(wave(t))) % 1 // Warbly movemovent\nmodes[7] = (f, t) => square(triangle(wave(t)) + f, .5) // Bouncing\nmodes[8] = (f, t) => wave(f + t) * wave(f + t2) // Times with different intervals create interesting waveform interactions\nmodes[9] = (f, t) => wave(wave(f + t) + wave(f - t2) + f - t) // Wave textures\nmodes[10] = (f, t) => wave(f + wave(wave(t) + f / 4)) // Stretchy efect\nmodes[11] = (f, t) => wave((f - 2) * (1 + wave(t))) * wave(wave(t2) + f) // Zoomed and blended\nmodes[12] = (f, t) => 2 * triangle(f + wave(t)) - wave(f * .75 + wave(t2)) // Kinetic\nmodes[13] = (f, t) => abs(triangle(f - triangle(t2)) - wave(f * 2 + triangle(t))) // Glitch conveyer belt\n\nmode = 0 // Start with mode 0. Remember you can prepend \"export var\" to use the Var Watch.\n\n// The beforeRender function is called once before each animation frame\n// and is passed a delta in fractional milliseconds since the last frame.\n// This has very high resolution, down to 6.25 nanosecons!\nexport function beforeRender(delta) {\n  t = time(.05)  // Loops 0..1 about every 3.3 seconds\n  t2 = time(.03) // Loops 0..1 about every 1.3 seconds\n  modeT = time(numModes * 0.6 / 65.536) // 600ms per mode, so 0..1 every numModes * 0.6 seconds\n  mode = floor(modeT *  numModes) // mode will be 0, 1, 2, etc up to (numModes - 1)\n\n  // Uncomment this line to check out a specific mode\n  // mode = 12\n}\n\n// The render function is called for every pixel. Here we're going to use \n// the pixel's index to make a number between 0.0 and 4.0. This acts as a 4X \n// frequency modifier, repeating the pattern 4 times across the strip length.\n// That 0-4 value is passed in to the current mode function and its output is \n// used to set the pixel's hue. hsv() \"wraps\" hue between 0.0 and 1.0.\nexport function render(index) {\n  // Look up the current mode function and call it\n  v = modes[mode](4 * index / pixelCount, t)\n  hsv(0, 0, v)\n}"
  },
  "preview": ""
}