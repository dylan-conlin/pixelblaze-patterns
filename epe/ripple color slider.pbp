{
  "name": "ripple color slider",
  "id": "7bAHFwbcGjzZW9ien",
  "sources": {
    "main": "// Ripple tank/Stargate pool\n// Ripple tank with two animated wave generators that can be rendered\n// inside a user-controlled circle, making it useful for that stargate\n// everybody's always wanted to build!\n// \n// MIT License\n// Take this code and use it to build cool things!\n//\n// 03/05/2022 ZRanger1\n\nvar timebase = 0;\nvar x1 = y1 = x2 = y2 = 0;\n\nexport var speed = 6;\nexport var waveScale = 26;\nexport var attenuation = 0.08;\nexport var poolRadius = 0.54;\nexport var color = 0;\nvar theta = 0;\n\n// UI Sliderws\nexport function sliderSpeed(v) {\n  speed = 0.1+(15*v);\n}\n\nexport function sliderWavelength(v) {\n  waveScale = 1+29*(1-v);\n}\n\n// how quickly the waves die down\nexport function sliderAttenuation(v) {\n  attenuation = (v * v *v);\n}\n\n// how quickly the waves die down\nexport function sliderColor(v) {\n  color = v;\n}\n\nexport function sliderRadius(v) {\n  poolRadius = v;\n}\n\n// move coordinate origin to center of display.\ntranslate(-0.5,-0.5);\n\nfunction smoothstep(l,h,v) {\n    var t = clamp((v - l) / (h - l), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\nexport function beforeRender(delta) {\n  timebase = (timebase + delta/1000) % 1000;\n  t1 = timebase * speed;\n  \n  // make two point wave sources that circle the edge of the \n  // display in opposite directions. \n  theta = (theta + speed/500) % PI2;\n  x1 = 0.575 * cos(theta); y1 = 0.575 * sin(theta);\n  t2 = PI2 - theta;\n  x2 = 0.25 * cos(t2); y2 = 0.25 * sin(t2);  \n}\n\nexport var pr;\nexport function render2D(index,x,y) {\n  var nx,ny,nz;\n\n// early out for pixels outside our radius\n  pr = poolRadius - hypot(x,y);\n  if (pr < 0) {\n    rgb(0,0,0);\n    return;\n  }\n  \n  nx = ny = 0;\n\n  // wave source 1 (x1,y1)\n  qx = (x-x1) * waveScale; qy = (y-y1) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;\n  \n  // wave source 2 (x2,y2)\n  qx = (x-x2) * waveScale; qy = (y-y2) * waveScale;\n  r = hypot(qx,qy);\n  tmp = (sin(r-t1)*.02-cos(r-t1))*exp(-r*attenuation)/r\n  nx += qx * tmp; ny += qy * tmp;  \n\n  // Generate a little highlighting on wave edges \n  // normalize n and modify brightness based on angle to light source\n  tmp = hypot3(nx,ny,1);\n  nx /= tmp; ny /= tmp; nz = 1/tmp;\n  s = clamp(nx * -0.1826 + ny * 0.3651 + nz * 0.90218,0,1);\n\n  // pick a blue/green gradient color based on \"height\", and draw the\n  // region that's inside our radius.\n  //hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n  hsv(color,1.9-s,smoothstep(0,1,pr/poolRadius)*s*s*s*s);\n  \n}\n\n// You can also project up a dimension. Think of this as mixing in the z value\n// to x and y in order to compose a stack of matrices.\nexport function render3D(index, x, y, z) {\n  x1 = (x - cos(z / 4 * PI2)) / 2\n  y1 = (y - sin(z / 4 * PI2)) / 2\n  render2D(index, x1, y1)\n}"
  },
  "preview": "/9j/4AAQSkZJRgABAQAAAQABAAD/4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7/wAARCACWAGQDASIAAhEBAxEB/8QAGwAAAwEBAQEBAAAAAAAAAAAAAAMEAgEFBgj/xAA/EAACAQMBBQUFBAcIAwAAAAABAgMABBESBSEiMWETQVFxoRQykbHBI2KB8DNCUnKCstEVJCVDY6Lh8TTC8v/EABkBAAMBAQEAAAAAAAAAAAAAAAABAgMEBf/EACwRAAIBAwMCBAYDAQAAAAAAAAABAhEhMQMSQSJhE3Gx8DJRgZGhwQQz0UL/2gAMAwEAAhEDEQA/APyNY2LRXIeXB0nhHia9KZklt5UjGZIhqB8SOdRXMwt0Llg0nJfOrtn26xQrqbLkZkHnzrK7yeTrSbpOX0I9rudNveJvwcnyIzUxuWuZlij3LzJqxYxLs97ZucbNH+IO6preD2eIrzkc4/Ch4NdNxUaPKwIu5S7i2g5E4JHea1a28kDDtdyyjHkedPt4I7diqb5DzY9wpk0bMgVieeob+8VLfCKeol0rBqxjIMmsjJkKg/dG+nO5uI3Vx9k3CKUCRCd3EfswB3n/AKrtxcrFItvj7I8GrrQmYNOUqrJns44Yk7LeYve65qm3WJBqXk3Eeg50gvEBwHIQ6X8jRMnZ2rIrcUpCLjqaFkTTlZjYklmRptWCxJUVoMZ4VxuLDDfhzrE4nEgMWdEWAMdKXLN2Mk0S+9IwaPHgw3/I013JUXLA1XEQ0RLqUd/WilNcC2xCFDEDecd9FKo/DbvQgsbWVrkPODhN+Cc56V6+OynimLbnbQ+/lnlUskphQyyn3eQ8TW4YZzs6RpDlpE7Qd2COIVVal6snPqljB1+C+uY+9wJF67sGkStoGtjxtwqD40bXkYPa3yciu/yO/wCpqeGRri4NywwsY3DrRJF6cG4qXv5HLyUxKIYye0f3sfKuWjXGCr6t41Lnnkf90y3hKSdrKdUrHI6U+YyYQ4wVOoeXIipqqUNHJJbUZtXM13Hgbo11N+/yqi6SGWJ7YDix733q5ahIEkkON5Mh+HL40ao0RYm/SSDVq6nfT8jnk6yquBUVt2EaqWyW3Oep3il2KzttBRL7sOT+PIVSyYGnUDq4W6HmKdDKqxl2ABUZY+OKSyN6jo+ahJPIkjKg4I9zdfGsTwqbqK5ABCIcde8fOuRzNHHErJ741SfxVuN9NuQ/+UxVuuDu+YppmVHHAtUhQYmGpzvPSigNEADPkyNvNFTUqj7nlW4mu7pRKSVU5bPdXv27OtyEkHBIMqPL/jNRpIq6nKBVUZatQySNbJcSD3ZVkX90nB9DV1rgvWb1OKLBlY1lsGtX5xs0efI7qSsaW8Wn9VMsx8TVEzCLac0LEATAOvnjB+VSTMGuEgByq8chHTuoY4Vfk7mbmcwx6icyON3QeNZtbuR1btP1eIHpyNEMJllNzPkDPCvj4VRJoATRGAFOP4TuP0qbJUNXsS20qzRKv2UA/wA1gx6Jz+lMvYFkjY6sTnjXp4UvZ0GmeSZzgKSidF55+Bpq6WXtC32kh1oOndTZhJ7ZdLwTwQyxw8Zy8o1b/wBobxWjcpcxJbKMSSsFfpv301xIMajvbiXoR/xXbOyQXntSnc3IeBNCyNzjRylngfNLEknZlRv59AeXpUlyG9t9lPuylZG/hyD/ACimq8TjLDfcMdJzyXOBTUVJY452xrCFSfn8jTRnHoE9jHKTJK+kscgdO6itKqSjtHbTq5DpRU07D3NcnlyXUl4yW6jTrIDV7KDtUms9IAMREfljH1FRWlmkV00obIPujwzVNvcdq8M4zpWbQOqtkD1xVsvWafwKy9STaqvPZ215HnUFGo9/5zmk2UeiAvJkM5yxPPSK9CE6PaLfG6OU4H3W3j51JdsGZYTuLnLDwUUMqE21s4/WQeURqZpf4VrEd5HNqymnT/LU0iy3lxwLhBuB7gKq9nigRBjJI0Sfj3+lTRJGrjCKo8lEjf3XQp4pCI0/Hv8AhRtGBjH28bHXGQUXoKTs9JJbwFvdtwUHU8h6EVWuZNc+cg5Cr4rTMJdEre+xJC0xiaSQHU32iDy7vhVTyhLB5oznUvAOp/7rLMSo4cAcSDoOY+FTWtrKNpImWMCt2g37vEUo5H0yu7UueiY4YtELY1BQqnwxuqedyFmtwcO8oC9A+Cf/AGpjiOVpCx4nYpH/AA7vmKyYjNdQXg3Bof8Acf8A69KaMo0V5e2YNu0zF1YKoOFB8BRWwjTcUbaU5L5UVFOw97VqirlxFaySK2QV4Pxp6jTs+S3UBZIYQ/mRv+YFeJbtJLLFauTp7QAjw319ArxtfRsMY1GGTrldXzWtKUNNaHh0X1+2CHas5gvY7uLfHMg1Dx/IIqe11zF7mTcXOlegHOrhEk9gLeb3oWMZPgQf6YqecKiLBFu1nQvQd5pSKhJbdqV8V7G42JOIxgV2Ts8adQJBw3TNRTX3ZsY4VGBuz1rFqsjHtJCdM4K5z3/kVO21yvCdNzsemW7K1lZBxHcOrHhH0pN4JbYxSr+iixGfLlWbRnnu4oP1YOJ+rDcPpVkgNyksZH2Z4F8x3/Gq8zJ9Er/UkjuzMJH04VDqTdzHeKvSXsbZpeaIpZT4+FTdlHDCiLzjHF1B51JAZmuV2axzFr3n7o3/ACoWQcIzVsL09+p6MdsOyh1MRIqjA68z61l3MdnLGu4iQoo/eOR6N6VqZWmmmkDYKnSgzzI5+uaVIrPtKN1/RSRibHUDA+YoRnG/xPuKlWUvpgzoXhFFVq5UaYhlRuz40UtlSvEa4I4LUjarTfq+8PM1TBpFg9wu9hJ22OgfPyB+NdaQKjSDkqls9MZrVrENNrHngntzE3TK5z6NVMU5tqr4p+BF5MlntGZHH2c2HBHceR9RUkbG5ne4AwBwRj51TcW/t+z7d86ZEXSc95G4/KlFVtoFRTnfpHUnmaJOiNYOKjRfFgmm2cwAMTaqteEezRQHmmCD1FahDoQGGQa5cSh2a3X9Ig1fn40qtob1JzaXyNxstvbTTADVvY/vcgPjXI5TFPHZHl2eM/eG8/Wkwy9vNBbgHAPaS+a93xFM2sFESXEfvwyjJ8fyaERt6tsufaGzPGDgHLRn7QdDT4OyjBldRlFPF92vItBJJI1xJ+jmJRqZHcySINmsp1swjLdM76ORz0XhPz/ZT2dwUt5VyccbdSeI/OnGQRbPcqMtGWRd3XCj+WmvOyvLoHAm4fDJqScsdoiIDMT6ZxjouPmBQjKNZ5XcXLfLaN7OACVHEetFbOy1lJkkbibnvooRqpfx/wDrItpP8J155xafx5VW57OSRiSEtmiAwO7dn0Y14wclEsv9XHrXup9rJcQbvty6L56FH0NMNaOzPf7W/VRDOkF7c20jadb9omeo31C8oluWmU5jgXhx3k0/akD3trb3cY1P2Y1Dx/JzWIIRDCI3xw8T9T4USY4bVGvOP9ObNujMTG+Nfd1qSSSQbQeZRuEmnPpXLnNre6k5HiHUGr7FY/7NR3GSxJPxNGEbS26fWlZjbRY4EmucAscvnpjOPjW5INey3jJBcplv3udIZ1YxWw39q4ZuiDeflT7N3F7cxyH3gHAPhvH1pI5ZVXVzkEiCWMVuQAdPP73OmWsMPbC6cYkQEN9TXbsBoSAePGoVGb1ZbcwR59okIj+O40ciipTTpzkot7yKNNEwGZB2h/iOfqK3HojtFkYAtCrR56KcD5D41Jta1HttroHCzBN3djGPSt3BxdGzIIV3WQn7oG/1WmPZGSTjzdlcHaNECx3mikR7VhC4JAIPjRSqjJ6WpX4Ty1X/ABsD/Xz65r2kIjSF9WG9odsnw7TQfRvSoI4Sdus2NwGrl0xVUam5t1QDeYZyPNnGPlVNnRryUttcWr9mdiPZzXNrnBSQsg+62/FQzs0l2tvG24cTnNb22ryiC/hBGqMasd3f9fSpk1Wtm0hH2r79/cKTK0oKm7l+p3ayYjjc8wSpq2GIts+FR+yPXfS7ke0bPLKN7KG/Gu31wLW0jiX3tOAPLdRS1Abcoxgs1NbOgCSyyueRKr0Xn9aaW1bQhk3DtYWX4HNIRn9kVc8bkRjHqfhVG0NML2Ui+6shXPmMfSkjOVXO/NV+CLaFyY9qrhjpRQpH586rsrKM3q3atu3nT4GooLcXs1zMQCNWBV0n93spAr5dhpUdTup8l6jolCLvhlFsntEAnbudpE8t+PpS1jWdI5ySH7MxHPQ7z6H41TZOqwsgPDE3Z/gAK897gKrwrnU8gKjowDH1zSOaO6UnT2jxr2Iw3UkZ7m3UV7F9Ye0yrL3lRmiq3HpQ/lQ2qruUxgdp2njRYfYrbv3CKEfi5YUhHIs9fhDq/wBtMUF7Gdd4ZLWIr+8uoig8+UbNPsFudEc1tjdDIygH9knI+dTyRdrq1kAsMAVnbEzQXkd5D7k6AkeOB/TFTW1xLNcdo25Ry86ma5N4acmvEXPrz+SnZZDWaqf1SVI/PnUt/mbaaRHcOEfHfVNhwzXMWPdkyPI0pB2m1ZZO6NfXGKqpcenUlLt6jwdV5rUcESFv4jurF67S7DR++ObBPx/qKfZxgOY2/WfUfIDH0rE8YGy76MfqTlv5TUx+ZmpLcuzXv8ndkfZ7LLDmzk+mKTZxTTbTR3yY0OseY5etX2UWNmwoRjgyfxriXCRpI640xgk9abyQ9R7p7Vk6MpHtNAd6rrB80/4pT2/ZTw3MgGI4tJ887vnWZZSizId7zWg+OSPrTrwtcW8yrv0lgfw3/WglVT7P/Ei+IgJjd0oqezJks4X8UHyopnJKNG0eYHP9kF/9LT9Ku/Qyt35uY48dAgNFFJnbqZa8/wBCUiWfZ4gl3mNmQN5HGfhS4oYoh2Srz35ooodxbnVrgTA2Nqypjc6g+gptnH/5L97zFfwzRRRwball9EbjkLFpAME4UU9E1zX0ZxhlQ8vFT/SiiphcxnatPd0avZPZ7LKjkMD8BUEWWsYo25zuAx6ZoopvI9FdFe43aqAbVslHJ9Kny1ZphJi2i0I92UKx9R9KKKbwCvCPk/Uo2HxbNjH7JYepoooq0cev/ZLzP//Z"
}