{
  "name": "Example: color hues",
  "id": "HrdcZhjotup8rx7L8",
  "sources": {
    "main": "/*\n * In this example you'll see:\n * - colors!!!\n * - using an array to switch between modes\n * - lambda style function expressions\n * - more colors!\n * - accumulating delta to make a mode switch timer\n */\n \n// first, keep track of how many modes there will be\nnumModes = 13\nmodes = array(numModes) // make an array to store the modes\n// make a bunch of lambda style mode functions and put them in the modes array\nmodes[0] = (f) => f // as values progress, a rainbow is drawn\nmodes[1] = (f) => 0 // a hue of 0.0 or 1.0 is red\nmodes[2] = (f) => 1/3 // a hue around 1/3 is green\nmodes[3] = (f) => 2/3 // 2/3 hue is blue\nmodes[4] = (f) => 1 // this wraps back around to red\nmodes[5] = (f) => f * .2 % .2 // using modulus will wrap early and with a sharp edge\nmodes[6] = (f) => triangle(f) *.2 // using triangle will keep the transitions smooth\nmodes[7] = (f) => wave(f) * .2 // wave also works, but is non-linear\nmodes[8] = (f) => square(f, .5) * .5 + .33 // square can make stripes\nmodes[9] = (f) => wave(f) * triangle(f*4) * .2 // color textures by combining waveforms\nmodes[10] = (f) => wave(f)*.5 % .2 - triangle(f) *.2 + .66 // more textures\nmodes[11] = (f) => (f + f % .2) * .5 // mod error overlay\nmodes[12] = (f) => abs(f* .25 - .5)*2 // centered  \n\ntimer = 0 // accumulate all the deltas each animation frame\nmode = 0 // start with mode 0\n\n// the beforeRender function is called once before each animation frame\n// and is passed a delta in fractional milliseconds since the last frame\n// this has very high resolution, down to 6.25 nanosecons!\nexport function beforeRender(delta) {\n  timer += delta // accumulate all the deltas into a timer\n  if (timer > 800) { // after 800ms, rewind the timer and switch modes\n    timer -= 800\n    mode = (mode + 1) % numModes // go to the next mode, and keep between 0 and numModes\n  }\n  // uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n// the render function is called for every pixel. here we're going to use \n// the pixel's index to make a number between 0.0 and 4.0\n// then pass that in to the current mode function and use it for brightness\nexport function render(index) {\n  // look up the current mode function and call it\n  h = modes[mode](4 * index / pixelCount)\n  hsv(h, 1, 1)\n}"
  },
  "preview": ""
}