{
  "name": "Example: color hues",
  "id": "HrdcZhjotup8rx7L8",
  "sources": {
    "main": "/*\n * In this example you'll see:\n * - Colors!!!\n * - Using an array to switch between modes\n * - Lambda style function expressions\n * - More colors!\n * - Accumulating delta to make a mode switch timer\n * - Viewing which mode is playing in the variable watcher\n */\n \n// First, keep track of how many modes there will be\nnumModes = 13\nmodes = array(numModes) // Make an array to store the modes\n\n// Make a bunch of lambda style mode functions and put them in the modes array\n// f is expected to be in 0..4\nmodes[0] = (f) => f // As values progress, a rainbow is drawn\nmodes[1] = (f) => 0 // A hue of 0.0 or 1.0 is red\nmodes[2] = (f) => 1/3 // A hue around 1/3 is green\nmodes[3] = (f) => 2/3 // 2/3 hue is blue\nmodes[4] = (f) => 1 // This wraps back around to red\nmodes[5] = (f) => f * .2 % .2 // Using modulus will wrap early and with a sharp edge\nmodes[6] = (f) => triangle(f) *.2 // Using triangle will keep the transitions smooth\nmodes[7] = (f) => wave(f) * .2 // Wave also works, but is non-linear\nmodes[8] = (f) => square(f, .5) * .5 + .33 // Square can make stripes\nmodes[9] = (f) => wave(f) * triangle(f*4) * .2 // Color textures by combining waveforms\nmodes[10] = (f) => wave(f)*.5 % .2 - triangle(f) *.2 + .66 // More textures\nmodes[11] = (f) => (f + f % .2) * .5 // Mod error overlay\nmodes[12] = (f) => abs(f* .25 - .5) * 2 // Centered  \n\ntimer = 0 // Accumulate all the deltas each animation frame\n\n// Adding `export` when declaring a variable will send it back to any connected web\n// browser. To see the current value of `mode`, click \"Enable\" next to \"Vars Watch\".\nexport var mode = 0 // Start with mode 0\n\n// The beforeRender function is called once before each animation frame\n// and is passed a delta in fractional milliseconds since the last frame.\n// This has very high resolution, down to 6.25 nanoseconds!\nexport function beforeRender(delta) {\n  timer += delta // Accumulate all the deltas into a timer\n  if (timer > 600) { // After 600ms, rewind the timer and switch modes\n    timer -= 600\n    mode = (mode + 1) % numModes // Go to the next mode, and keep between 0 and numModes\n  }\n  \n  // Uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n// The render function is called for every pixel. Here we're going to use \n// the pixel's index to make a number between 0.0 and 4.0. This acts as a 4X \n// frequency modifier, repeating the pattern 4 times across the strip length.\n// That 0-4 value is passed in to the current mode function and its output is \n// used to set the pixel's hue. hsv() \"wraps\" hue between 0.0 and 1.0.\nexport function render(index) {\n  // Look up the current mode function and call it\n  h = modes[mode](4 * index / pixelCount)\n  hsv(h, 1, 1)\n}"
  },
  "preview": "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"
}