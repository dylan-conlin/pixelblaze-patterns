{
  "name": "Example: color hues",
  "id": "naDzrf7nK4HLFWBcW",
  "sources": {
    "main": "/*\n * In this example you'll see:\n * - Colors!!!\n * - Using an array to switch between modes\n * - Lambda style function expressions\n * - More colors!\n * - Accumulating delta to make a mode switch timer\n * - Viewing which mode is playing in the variable watcher\n */\n \n// First, keep track of how many modes there will be\nnumModes = 13\nmodes = array(numModes) // Make an array to store the modes\n\n// Make a bunch of lambda style mode functions and put them in the modes array\n// f is expected to be in 0..4\nmodes[0] = (f) => f // As values progress, a rainbow is drawn\nmodes[1] = (f) => 0 // A hue of 0.0 or 1.0 is red\nmodes[2] = (f) => 1/3 // A hue around 1/3 is green\nmodes[3] = (f) => 2/3 // 2/3 hue is blue\nmodes[4] = (f) => 1 // This wraps back around to red\nmodes[5] = (f) => f * .2 % .2 // Using modulus will wrap early and with a sharp edge\nmodes[6] = (f) => triangle(f) *.2 // Using triangle will keep the transitions smooth\nmodes[7] = (f) => wave(f) * .2 // Wave also works, but is non-linear\nmodes[8] = (f) => square(f, .5) * .5 + .33 // Square can make stripes\nmodes[9] = (f) => wave(f) * triangle(f*4) * .2 // Color textures by combining waveforms\nmodes[10] = (f) => wave(f)*.5 % .2 - triangle(f) *.2 + .66 // More textures\nmodes[11] = (f) => (f + f % .2) * .5 // Mod error overlay\nmodes[12] = (f) => abs(f* .25 - .5) * 2 // Centered  \n\ntimer = 0 // Accumulate all the deltas each animation frame\n\n// Adding `export` when declaring a variable will send it back to any connected web\n// browser. To see the current value of `mode`, click \"Enable\" next to \"Vars Watch\".\nexport var mode = 0 // Start with mode 0\n\n// The beforeRender function is called once before each animation frame\n// and is passed a delta in fractional milliseconds since the last frame.\n// This has very high resolution, down to 6.25 nanoseconds!\nexport function beforeRender(delta) {\n  timer += delta // Accumulate all the deltas into a timer\n  if (timer > 600) { // After 600ms, rewind the timer and switch modes\n    timer -= 600\n    mode = (mode + 1) % numModes // Go to the next mode, and keep between 0 and numModes\n  }\n  \n  // Uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n// The render function is called for every pixel. Here we're going to use \n// the pixel's index to make a number between 0.0 and 4.0. This acts as a 4X \n// frequency modifier, repeating the pattern 4 times across the strip length.\n// That 0-4 value is passed in to the current mode function and its output is \n// used to set the pixel's hue. hsv() \"wraps\" hue between 0.0 and 1.0.\nexport function render(index) {\n  // Look up the current mode function and call it\n  h = modes[mode](4 * index / pixelCount)\n  hsv(h, 1, 1)\n}"
  },
  "preview": "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"
}