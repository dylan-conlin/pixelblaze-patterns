{
  "name": "sound - blinkfade",
  "id": "8pcj483btM54uKnAc",
  "sources": {
    "main": "/*\n  sound - blink fade\n\n  This pattern is designed to use the sensor expansion board.\n\n  First please check out the \"blink fade\" pattern. With that as background, the\n  goal now is to make it sound reactive.\n\n  We're going to use something called a PI controller to perform an important\n  function common to many sound-reactive patterns: Adjusting the sensitivity\n  (the gain).\n\n  Imagine a person who observes the pixels reacting to sound and is continuously\n  tuning the overall brightness knob to keep things looking good. They would\n  turn the brightness up when the sound is faint and everything's too dark, and\n  turn it down if the sound is loud and the LEDs are pegged too bright. The PI\n  controller is code to perform this job. This form of Automatic Gain Control\n  allows the pattern to adapt over time so it can be in a visual Goldielocks\n  zone, whether the environment's sound is soft, loud, or changing.\n\n  The wikipedia article is more approachable than some:\n\n    https://en.wikipedia.org/wiki/PID_controller#PI_controller\n*/\n\n/*\n  By exporting these special reserved variable names, they will be set to\n  contain data from the sensor board at about 40 Hz. \n\n  By initializing energyAverage to a value that's not possible when the sensor\n  board is connected, we can choose when to simulate sound instead.\n*/\nexport var energyAverage = -1 // Overall loudness across all frequencies\nexport var maxFrequency       // Loudest detected tone with about 39 Hz accuracy\n\nvals = array(pixelCount)\nhues = array(pixelCount)\n\n// The PI controller will work to tune the gain (the sensitivity) to achieve \n// 20% average pixel brightness\ntargetFill = 0.2\n\n/*\n  We'll add up all the pixels' brightnesses values in each frame and store it\n  in brightnessFeedback. The difference between this (per pixel) and targetFill\n  will be the error that the PI controller is attempting to eliminate.\n*/\nbrightnessFeedback = 0   \n\n/*\n  The output of a PI controller is the movement variable, which in our case is\n  the `sensitivity`. Sensitivity can be thought of as the gain applied to the\n  current sound loudness. It's a coefficient found to best chase our targetFill.\n  You can add \"export var\" in front of this to observe it react in the Vars \n  Watch. When the sound gets quieter, you can watch sensitivity rise. If it's\n  always at its maximum value of 150 (ki * max), try increasing the accumulated\n  error's starting value and max in makePIController().\n*/\nsensitivity = 0\n\n/*\n  With these coefficients, it can take up to 20 seconds to fully adjust to a\n  sudden change, for example, from a long period of very loud music to silence.\n  Export this to watch pic[2], the accumulated error.\n*/\npic = makePIController(.05, .15, 300, 0, 1000)\n\n// Makes a new PI Controller \"object\", which is 4 parameters and a state var for\n// the accumulated error\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  \n  // kp is the proportional gain coefficient - the weight placed on the current \n  // difference between where we are and where we want to be (targetFill)\n  pic[0] = kp\n\n  /*\n    ki is the integral gain - the weight placed on correcting a situation where\n    the proportional corrective pressure isn't enough, so we want to use the\n    fact that time has passed without us approaching our target to step up\n    the corrective pressure.\n  */\n  pic[1] = ki\n\n  /*\n     pic[2] stores the error accumulator (a sum of the historical differences \n     between where we want to be and where we were then). This is an integral,\n     the area under a curve. While you could certainly store historical samples\n     and evict the oldest, it's simpler to just have a min and max for what the\n     area under this curve could be.\n\n     We initialize it to a starting value of 300, and keep it within 0..1000.\n  */\n  pic[2] = start\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\n/*\n  Calculate a new output (the manipulated variable `sensitivity`), given\n  feedback about the current error. The error is the difference between the\n  current average brightness and `targetFill`, our desired setpoint.\n\n  Notice that the error can be negative when the LEDs are fuller than desired.\n  This happens when the sensitivity was in a steady state and the sound is now\n  much louder.\n*/\nfunction calcPIController(pic, err) {\n  // Accumulate the error, subject to a min and max\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n\n  // The output of our controller is the new sensitivity. \n  //   sensitivity = Kp * err + Ki * ∫err \n  // Notice that with Ki = 0.15 and a max of 1000, the output range is 0..150.\n  return max(pic[0] * err + pic[1] * pic[2], .3)\n}\n\nexport function beforeRender(delta) {\n  sensitivity = calcPIController(pic,\n                  targetFill - brightnessFeedback / pixelCount)\n\n  // Reset the brightnessFeedback between each frame\n  brightnessFeedback = 0\n  \n  if (energyAverage == -1) { // No sensor board is connected\n    simulateSound()\n  } else {                   // Load the live data from the sensor board\n    _energyAverage = energyAverage\n    _maxFrequency = maxFrequency\n  }\n\n  for (i = 0; i < pixelCount; i++) {\n    // Decay the brightness of each pixel proportional to how much time has\n    // passed as well as how loud it is right now\n    vals[i] -= .0005 * delta + abs(_energyAverage * sensitivity / 5000)\n\n    // If a pixel has faded out, reset it with a random brightness value that is\n    // scaled by the detected loudness and the computed sensitivity\n    if (vals[i] <= 0) {\n      vals[i] = random(1) * _energyAverage * sensitivity \n\n      /*\n        The reinitialized pixel's color will be selected from a rotating \n        pallette. The base hue cycles through the hue wheel every 4.6 seconds.\n        Then, up to 20% hue variation is added based on the loudest frequency\n        present. More varied sound produces more varied colors.\n      */\n      hues[i] = time(.07) + .2 * triangle(_maxFrequency / 1000)\n    }\n  }\n}\n\nexport function render(index) {\n  v = vals[index]\n  v = v * v  // This could also go below the feedback calculation\n  \n  /*\n    Accumulate the brightness value from this pixel into an overall sum that \n    will be averaged across all pixels. This average will be fed back into the\n    PI controller so it can adjust the sensitivity continuously, trying to make\n    the average v equal the targetFill of 0.2.\n  */\n  brightnessFeedback += clamp(v, 0, 1)\n\n  hsv(hues[index], 1, v)\n}\n\n\n\n/*\n  These functions are used if the sensor baord is not detected to simulate the\n  sound variables used in this pattern. This allows the pattern stil be lively \n  in the sequencer when there's no sensor board connected.\n  \n  16th notes (sequencerSlot)       S                              S\n  SB samples @40Hz (timeSlots)     T      T      T      T      T\n  beforeRender() e.g.~150FPS       B B B B B B B B B B B B B B B B B\n  \n  We cache the semi-random simulated data at the timeSlot level.\n*/\n\nBPM = 130  // Tempo in Beats Per Minute\nvar measurePeriod = 4 * 60 / BPM  // Seconds per 4 beat measure\nvar samplesPerMeasure = ceil(measurePeriod * 40)  // SB updates at 40Hz\n\n// These globals store the simulated versions of the sensor data\nvar _energyAverage = 0, _maxFrequency = 0, _maxFrequencyMagnitude = 0\nvar _frequencyData = array(32)\n\n// Lookup table of frequencyData center frequencies\nvar freqs = array(32)\nfreqs[0] = 37.5; freqs[1] = 50; freqs[2] = 75; freqs[3] = 100; freqs[4] = 125; freqs[5] = 163; freqs[6] = 195; freqs[7] = 234; freqs[8] = 312; freqs[9] = 391; freqs[10] = 469; freqs[11] = 586; freqs[12] = 703; freqs[13] = 859; freqs[14] = 976; freqs[15] = 1170; freqs[16] = 1370; freqs[17] = 1560; freqs[18] = 1800; freqs[19] = 2070; freqs[20] = 2380; freqs[21] = 2730; freqs[22] = 3120; freqs[23] = 3590; freqs[24] = 4100; freqs[25] = 4650; freqs[26] = 5310; freqs[27] = 6020; freqs[28] = 6840; freqs[29] = 7770; freqs[30] = 8790; freqs[31] = 9960\n\nvar beat, beatPct, timeSlot, sequencerPos, sequencerSlot\nfunction calcSequencerTime() {\n  t1 = time(measurePeriod / 65.536)   // 0-1 every measure\n  beat = floor(t1 * 4)                // 0, 1, 2, 3\n  beatPct = t1 * 4 % 1                // 0-1.0 continuous for every beat\n  // There are samplesPerMeasure 40Hz timeSlots in each measure\n  timeSlot = floor(t1 * samplesPerMeasure)\n  sequencerPos = 16 * t1              // can be fractional 0..15.999\n  sequencerSlot = floor(sequencerPos) // 0-15 every measure\n}\n\n// Calculate and memoize all simulated sensor board sound data\nvar cachedTimeSlot = -1\nfunction simulateSound() {\n  calcSequencerTime() \n  if (timeSlot == cachedTimeSlot) return // 140FPS -> 208FPS\n  \n  var energyTotal = 0, maxBin = 0, maxBinEnergy = 0\n  for (fBin = 0; fBin < 32; fBin++) {\n    binEnergy = simulateFrequencyData(fBin)\n    energyTotal += binEnergy\n    if (binEnergy > maxBinEnergy) {\n      maxBin = fBin; maxBinEnergy = binEnergy\n    }\n  }\n  _energyAverage = energyTotal / 32\n  _maxFrequency = binomSample(freqs[maxBin], 8)\n  _maxFrequencyMagnitude = binomSample(maxBinEnergy, 8)\n  cachedTimeSlot = timeSlot\n}\n\n\nvar instrumentCount = 4\nvar instruments = array(instrumentCount)\ninstruments[0] = makeInstrument(0b1000100010001000, 1, 3, 0.01)    // kick drum\ninstruments[1] = makeInstrument(0b1001001010001000, 5, 2, 0.01)    // bass\ninstruments[2] = makeInstrument(0b1011101000011100, 10, 6, 0.01)   // lead synth\ninstruments[3] = makeInstrument(0b0010001100100011, 20, 13, 0.05)  // high hat\n\nfunction makeInstrument(sequence, centerBin, bandwidth, magnitude) {\n  inst = array(4)\n  inst[0] = sequence   // 16 slot binary vector sequencer\n  inst[1] = centerBin  // center freq (bin index)\n  inst[2] = bandwidth  // half-bandwidth, in bins. Further bins are attenuated.\n  // Max instrument magnitude, if right on the sequencer attack and centerBin\n  inst[3] = magnitude    \n  return inst\n}\n\n// For the current 40Hz timeSlot, simulate a _frequencyData[fBin]\nfunction simulateFrequencyData(fBin) {\n  slotProximity = 1 - sequencerPos % 1 // Directly on-beat = 1. The D in ADSR.\n  var fDataBinSum = 0, binProximity = 0\n  for (inst = 0; inst < instrumentCount; inst++) {\n    // If this instrument is \"on\" in this sequencer slot\n    if ((instruments[inst][0] >> (15 - sequencerSlot)) & 1) {\n      // How close we are to the center frequency bin of the instrument\n      binProximity = max(0, 1 - abs(fBin - instruments[inst][1]) / instruments[inst][2])\n      // Add some energy to this bin that's statistically close to the\n      // instrument's nominal energy magnitude, decayed and splayed across bins\n      fDataBinSum += binomSample(instruments[inst][3], 3) * slotProximity * binProximity\n    }\n  }\n  return _frequencyData[fBin] = fDataBinSum\n}\n\n/*\n  Returns a sample from a binomial distribution centered around a mean. Binomial\n  approaches a discrete normal distribution (a bell curve). Takes a whole number\n  `concentration` that determines how close the result usually is to the mean. A\n  high concentration implies low variance around the mean. concentration == 1\n  means it was selected from a flat distribution within +/- 50% of the mean.\n*/\nfunction binomSample(mean, concentration) {\n  sum = 0\n  for (i = 0; i < concentration; i++) sum += random(1)\n  return mean * (0.5 + sum / concentration)\n}\n"
  },
  "preview": ""
}