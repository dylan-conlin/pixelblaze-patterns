{
  "name": "cube fire 3D",
  "id": "aRQN3PrptmG4zdGXr",
  "sources": {
    "main": "/*\n  Cube fire 3D\n  \n  3D example: https://youtu.be/iTM-7ILud4M\n  \n  This pattern is designed for 3D mapped projects, but degrades gracefully in 2D\n  and 1D.\n  \n  The base 3D variant is based on multiplying sine waves of x, y, and z \n  position. This results in a regular 3D array of spheres. The size of the\n  spheres pulses, and their position in 3D space oscillates at different\n  frequencies.\n*/\n\n\nspeed = 1  // How fast the spheres travel through 3D space\n\nexport function beforeRender(delta) {\n  t1 = time(.1 / speed)    // x offset\n  t2 = time(.13 / speed)   // y offset\n  t3 = time(.085 / speed)  // z offset\n\n  // Oscillate the scale coeffecient of space between 0.25 and 0.75\n  scale = (.5 + wave(time(.1))) / 2\n}\n\nexport function render3D(index, x, y, z) {\n  // Color is 20% dependent on each axis and cycling every 6.5 seconds\n  h = x / 5 + y / 5 + z / 5 + t1\n  \n  // Since wave() returns a 0..1 sinusoid, and we multiply it by other \n  // phase-offset wave()s, the final output will be a series of spheres in space\n  // with a value of 0..10\n  v = 10 * (wave(x * scale + wave(t1)) * \n            wave(y * scale + wave(t2)) * \n            wave(z * scale + wave(t3)))\n            \n  // The outer surface of the spheres, with the lowest values, will be white. v\n  // values between 2 and 10 (the core of the spheres) will be colorful.\n  s = v - 1\n\n  /*\n    This looks like typical gamma correction here, but really it only serves to\n    increase the negative spcae between nearby spheres; after this the cores\n    will all have v > 1 (e.g. center v == 10^3)\n  */\n  v = v * v * v  \n  \n  hsv(h, s, v) // Recall that v is automatically capped at 1.0 by hsv()\n}\n\n// As we commonly do with 3D fields, a decent 2D rendering is a slice at z == 0\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\n/*\n  A common approach to creating 1D versions of 3D patterns is to render the line\n  in 3D where y & z = 0. To translate pixel indices to x's 0..1 world \n  coorinates, divide index by pixelCount to output a 'percent this pixel is into\n  the strip', i.e. 0..1. Evaluating this aesthetically in 1D, it seems to look\n  best scaled out so we multiply by 8 to plot a longer line from 3D space.\n*/\nexport function render(index) {\n  render3D(index, index / pixelCount * 8, 0, 0)\n}\n"
  },
  "preview": ""
}