{
  "name": "static random colors",
  "id": "SjRfgcSSYXWAunFjZ",
  "sources": {
    "main": "/* \n  Static random colors\n  \n  What if you need a sequence of random numbers? Well, you could set up a loop\n  that runs once and populates an array with random values. \n  \n    var a = array(n)\n    for(i = 0; i < n; i++) a[i] = random(1)\n  \n  They would be a different sequence of random values each time you resarted the\n  pattern. But what if you need to be able to access the same sequence of random\n  numbers each time you run your program? You need a pseudorandom number\n  generator (PRNG) that accepts a seed. The same random sequence is repeatably\n  generated when the PRNG is given a particular seed. \n\n  This pattern generates random colors each time it's loaded. With a simple\n  tweak, it can render the same random sequence on each restart.\n*/\n\n// This seed will be set to a random value each time the pattern is loaded\nvar seed = random(0xffff) \n\n// 16 bit xorshift from \n// http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html\nvar xs\nfunction xorshift() {\n  xs ^= xs << 7\n  xs ^= xs >> 9\n  xs ^= xs << 8\n  return xs\n}\n\n// Return a pseudorandom value between 0 and 1\nfunction pseudorandomFraction() {\n  return xorshift() / 100 % 1\n}\n\nexport function beforeRender(delta) {\n  /*\n    Reset the initial shift register for each render frame so that each frame\n    renders the same random sequence. Need repeatability across power cycles?\n    Set this to a particular constant. Like 42.\n  */\n  xs = seed \n}\n\nexport function render(index) {\n  h = pseudorandomFraction()\n\n  // s is a different random 0..1 value from h, but yet oddly completely\n  // repeatably random while still dependant on the fact that h was just emitted\n  // prior ;) John \n  s = pseudorandomFraction()\n\n  // Adjust saturation to favor vibrant colors, but still allow whites/pastels\n  s = 1 - s * s * s \n\n  hsv(h, s, 1)\n}\n"
  },
  "preview": "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"
}