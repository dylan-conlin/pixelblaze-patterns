{
  "name": "sound - spectromatrix 2D/3D",
  "id": "vXGvYT7tqJCsCKfiD",
  "sources": {
    "main": "/*\n  Sound - spectromatrix 2D/3D\n\n  This pattern is designed to use the sensor expansion board, but falls back to\n  simulated sound data if the sensor board isn't detected.\n  \n  It also supports pixel mapped configurations with 2D or 3D maps. See how this\n  pattern renders on a 3D walled cube:\n\n  https://youtu.be/p1D3RK4Kxf4\n\n  This pattern uses the different frequencies in sound (e.g. bass vs mids vs\n  treble) and compares the current reading for each of the 32 frequency bins to\n  its running average. When the current reading is high, it's projected onto\n  certain sections of the strip, matrix, or 3D space. \n\n  This pattern builds heavily on components commented in \"sound - blink fade\"\n  and \"sound - spectro kalidastrip\", so if you find it hard to follow, first \n  start there!\n*/\n\n/*\n  These vars are set by the external sensor board, if one is connected. We\n  don't actually use light readings in this pattern, so if the `light` value\n  remains -1, no sensor board is connected. If connected, the sensor board sets \n  the 32 frequencyData array elements according to sensed spectrum energy.\n*/\nexport var light = -1 \nexport var frequencyData = array(32)\n\n// These config variables are only needed for 2D pixel matrices when no 2D map\n// is defined in the mapper tab\nwidth = 8\nheight = pixelCount / width\nzigzag = true  // Many 2D LED matrices are wired in a zig-zag pattern \n\n// These variables control the character of the visualization itself\naverageWindowMs = 500  // Compare spectrum energy to it's avg over this period\nfade = .6  // What percentage of the pixel's brightness is retained each frame\nspeed = 1  // Speed of viewport travel through the spectrum field\nzoom = .3  // .01 => zoomed way in; 10 => zoomed far out\ntargetFill = 0.15  // Seek a sensitivity that makes this the average light fill\n\nvar pic = makePIController(1, .1, 300, 0, 300)\nvar sensitivity = 0\nbrightnessFeedback = 0\nvals = array(32)\naverages = array(32)\npixels = array(pixelCount)\n\n\n// Makes a new PI Controller\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  pic[0] = kp\n  pic[1] = ki\n  pic[2] = start\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\nfunction calcPIController(pic, err) {\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n  return max(pic[0] * err + pic[1] * pic[2],.3)\n}\n\nexport function beforeRender(delta) {\n  sensitivity = calcPIController(pic, targetFill - brightnessFeedback / pixelCount)\n  brightnessFeedback = 0\n  t1 = time(6.6 / 65.536)\n  t2 = time(39 / 65.536)\n  wt1 = wave(t1 * speed)\n\n  // If no sensor board is attached, simulate sensor data at 40Hz\n  if (light == -1) doAt(40, delta, simulateSound)\n  \n  dw = delta / averageWindowMs\n  \n  for (i = 0; i < 32; i++) {\n    averages[i] = max(.00001, \n      averages[i] * (1 - dw) + frequencyData[i] * dw * sensitivity)\n\n    // Notice that we do not implement arrayLerp() as in \"sound - spectro \n    // kalidastrip\", and as a result this pattern trades some smoothing for\n    // faster frame rates.\n    vals[i] = (frequencyData[i] * sensitivity - 2 * averages[i]) * 10 * \n                (1 + averages[i] * 1000)\n  }\n\n}\n\n// The fundamental rendering happens in 3D space, but will be projected down\n// into lower dimensions for 2D matrices or 1D strips\nexport function render3D(index, x, y, z) {\n  var i, h, s, v\n  \n  // Given the pixel's 3D position and the timers, i will be a decimal position\n  // in the 32 frequency bins\n  i = 31 * triangle(\n           (wave((x + z) * zoom + wt1) + wave((y + z) * zoom - wt1)) * .5 + t2)\n\n  v = vals[i] // i is implicitly truncated (like floor(i)) for an array index\n  v = v > 0 ? v * v : 0\n  \n  s = 2 - v\n\n  // The hue range is frequency-based, using half the rainbow, and cycling\n  // around the hue wheel every 6.6 second\n  h = i / 64 + t1  \n  pixels[index] = pixels[index] * fade + v\n  v = pixels[index]\n\n  brightnessFeedback += clamp(v, 0, 1)\n  hsv(h, s, v)\n}\n\n// Support 2D pixel mapped configurations\nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\n/*\n  This pixel mapper shim provides support for 1D strips and unmapped 2D matrices\n  by calculating x & y assuming a 2D LED matrix display, given a matrix width\n  and height.\n*/\nexport function render(index) {\n  var y = floor(index / width)\n  var x = index % width\n\n  if (zigzag) x = (y % 2 == 0 ? x : width - 1 - x)\n  x /= width\n  y /= height\n  render2D(index, x, y)\n}\n\n// doAt calls a function `fn` at a specified frequency, given ms elapsed `delta`\n// For example, simulate sensor board data updates at 40Hz.\nvar accumDelta = 0\n\nfunction doAt(hertz, delta, fn) {\n  accumDelta += delta // Accumulated miliseconds\n  if (accumDelta <= 1000 / hertz) {\n    return // Do nothing\n  } else {\n    accumDelta -= 1000 / hertz // Assumes `delta < 1000 / hertz`` on average\n    fn() // Call the passed-in function\n  }\n}\n\n/*\n  Simulate the sensor board variables used in this pattern, if no senor board is\n  detected. The values and waveforms were chosen to approximate the look when\n  real sound is sensed for a basic 4-on-the-floor loop.\n*/\nBPM = 120\nvar measurePeriod = 4 * 60 / BPM / 65.536\n\nfunction simulateSound() {\n  tM = time(measurePeriod) // 2 seconds per measure @120 BPM\n  tP = time(8 * measurePeriod) // 8 measures per phrase\n  for (i = 0; i < 32; i++) frequencyData[i] = 0\n  \n  beat = (-4 * tM + 5) % 1 // 4 attacks per measure\n  beat *= .02 * pow(beat, 4)  // Scale magnitute and make concave-up\n  // Splay energy out, most energy at lowest frequency bins\n  for (i = 0; i < 10; i++) frequencyData[i] += beat * (10 - i) / 10\n\n  claps = .006 * square(2 * tM - .5, .10) // \"&\" of every beat\n  for (i = 9; i < 14 + random(5); i++) \n    frequencyData[i] += claps * (.7 + .6 * random(i % 2))\n\n  highHat = .01 * square(4 * tM - .5, .05) // Beats 2 and 4\n  for (i = 18; i < 20; i++) frequencyData[i] += highHat * (.8 + random(.4))\n\n  lead = 4 + floor(16 * wander(tP))  // Wandering fundamental synth's freq bin\n  for (i = 4; i < 20; i++)\n    // Excite the fundamental and, 40% of the time, 4 bins up\n    frequencyData[i] += .005 * (lead == i || lead == (i - 4) * r(.4))\n}\n\n// Random-ish perlin-esque walk for t in 0..1, outputs 0..1\n// https://www.desmos.com/calculator/enggm6rcrm\nfunction wander(t) {\n  t *= 49.261 // Selected so t's wraparound will have continuous output\n  return (wave(t / 2) * wave(t / 3) * wave(t / 5) + wave(t / 7)) / 2\n}\n\nfunction r(p) { return random(1) < p } // Randomly true with probability p\n"
  },
  "preview": ""
}