{
  "name": "sound - spectrum analyser 1D/2D",
  "id": "LovYqewqXjNBhdGYL",
  "sources": {
    "main": "/*\n  Sound - Spectrum Analyser\n\n  This pattern requires the sensor expansion board and a 2D LED matrix.\n  It displays a spectrum analyser based on the frequency data from the\n  microphone. This is a real time graph where the low frequencies are plotted \n  on the left hand side, and higher frequencies are on the right.\n  \n  This pattern is meant to be displayed on an LED matrix or other 2D surface \n  defined in the Mapper tab. Using the computer graphics convention, (x, y) = \n  (0, 0) is the top left (positive y advances downwards.) You will also need to\n  set the 'width' variable below to match the width of your matrix.\n  \n  Generously contributed by ChrisNZ (Chris) from the Pixelblaze forums.\n    https://forum.electromage.com/u/chrisnz\n*/\n\n// Set this to the width of your 2D display, or number of frequency bars to plot\nwidth = 16\nheight = pixelCount / width\n\n// Set the hue, saturation, and value for peak value indicators.\n// E.g. For white peaks, set peakHSV[1] = 0. No peaks, set peakHSV[2] = 0\npeakHSV = array(3)  // [h, s, v]\npeakHSV[0] = 0; peakHSV[1] = 1; peakHSV[2] = 1\n\n\n// Get frequency information from the sensor expansion board\nexport var frequencyData = array(32)\n// Start with an impossible value to detect if the sensor board is connected\nexport var light = -1 \n\n// Peak values for each bar, in the range 0..`height`\npeaks = array(width)\n// Current frequency values for each bar, in the range 0..`height`\nfy = array(width)     \npeakDropMs = 0  // This will accumulate `delta` to drop our peaks by a pixel\n\n// Automatic gain / PI controller. See comments in \"sound - blinkfade\".\ntargetMax = .9       // Aim for a maximum bar of 90% full\n// Approx rolling average of the maximum bar, for feedback into the PIController\naverageMax = 0\npic = makePIController(.25, 1.8, 30, 0, 100)\n\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  pic[0] = kp\n  pic[1] = ki\n  pic[2] = start\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\nfunction calcPIController(pic, err) {\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n  return pic[0] * err + pic[1] * pic[2]\n}\n\n\nexport function beforeRender(delta) {\n  // Calculate sensitivity based on how far away we are from our target maximum\n  sensitivity = max(1, calcPIController(pic, targetMax - averageMax))\n\n  hueT = time(1 / 65.536)  // 1 second hue rotation\n  \n  peakDropMs += delta\n\n  // Drop all the peaks every 100ms\n  if (peakDropMs > 100) {\n    peakDropMs = 0\n    for (i = 0; i < width; i++) peaks[i] -= 1\n  }\n\n  if (light == -1) simulateSound() // `light` is >= 0 if the SB is connected\n  \n  currentMax = 0\n  for (i = 0; i < width; i++) {\n    logy = log(i / width + 1) // Plot lower bins (log of 2 = bottom 30%)\n    // Determine the portion of the bar filled based on the current sound level.\n    // We use the PIController sensitivity to try and keep this at the targetMax\n    powerLevel = frequencyData[logy * 32] * sensitivity\n    fy[i] = floor(min(1, powerLevel) * height)\n    peaks[i] = max(peaks[i], fy[i] - 1)\n\n    currentMax = max(currentMax, powerLevel)\n  }\n  averageMax = averageMax - (averageMax / 50) + (currentMax / 50)\n}\n\nexport function render2D(index, x, y) {\n  xPixel = floor(x * width)  // Converts 0..1 'world units' x into pixel width\n  yPixel = height - 1 - floor(y * height) // Invert so baseline is yPixel == 0\n\n  h = hueT + x // Cycle the bar color through the rainbow. hsv() 'wraps' h.\n  s = 1\n  v = fy[xPixel] > yPixel  // Fill bars from 0..fy[xPixel]\n  \n  // If this is a peak pixel, apply the peakHSV color\n  if (peaks[xPixel] == yPixel) {\n    h = peakHSV[0]; s = peakHSV[1]; v = peakHSV[2]\n  }\n  \n  hsv(h, s, v)\n}\n\n// The 1D fallback plots the raw 32-bin spectrum across all pixels in a strip\nexport function render(index) {\n  h = hueT + index/pixelCount // Cycle bar color. Remember, hsv() 'wraps' h.\n  \n  // Spread all 32 bins across the strip and interpolate\n  binPixelWidth = pixelCount / 31\n  LBin = floor(index / binPixelWidth)\n  RBinPct = (index % binPixelWidth) / binPixelWidth\n  v = (1 - RBinPct) * frequencyData[LBin] + RBinPct * frequencyData[LBin + 1]\n  v *= sensitivity // Scale by PI controller's sensitivity\n\n  hsv(h, 1, v * v)\n}\n\n\n/*\n  Simulate the sensor board variables used in this pattern, if no sensor board\n  is detected. The values and waveforms were chosen to approximate the look when\n  real sound is sensed for a basic 4-on-the-floor loop.\n*/\nBPM = 120\nvar measurePeriod = 4 * 60 / BPM / 65.536\n\nfunction simulateSound() {\n  tM = time(measurePeriod) // 2 seconds per measure @120 BPM\n  tP = time(8 * measurePeriod) // 8 measures per phrase\n  for (i = 0; i < 32; i++) frequencyData[i] = 0\n  \n  beat = (-4 * tM + 5) % 1 // 4 attacks per measure\n  beat *= .02 * pow(beat, 4)  // Scale magnitude and make concave-up\n  // Splay energy out, most energy at lowest frequency bins\n  for (i = 0; i < 10; i++) frequencyData[i] += beat * (10 - i) / 10\n\n  claps = .01 * square(2 * tM - .5, .10) // \"&\" of every beat\n  for (i = 9; i < 14 + random(10); i++) \n    frequencyData[i] += claps * (.7 + .6 * random(i % 2))\n\n  highHat = .003 * square(4 * tM - .5, .05) // Beats 2 and 4\n  for (i = 20; i < 30; i++) {\n    frequencyData[i] += highHat * (.8 + random(.4)) * (i % 3 < 2)\n  }\n\n  lead = 4 + floor(16 * wander(tP))  // Wandering fundamental synth's freq bin\n  for (i = 4; i < 20; i++)\n    // Excite the fundamental and, 20% of the time, 4 bins up\n    frequencyData[i] += .005 * (lead == i || lead == (i - 4) * r(.2))\n}\n\n// Random-ish perlin-esque walk for t in 0..1, outputs 0..1\n// https://www.desmos.com/calculator/enggm6rcrm\nfunction wander(t) {\n  t *= 49.261 // Selected so t's wraparound will have continuous output\n  return (wave(t / 2) * wave(t / 3) * wave(t / 5) + wave(t / 7)) / 2\n}\n\nfunction r(p) { return random(1) < p } // Randomly true with probability p"
  },
  "preview": "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"
}