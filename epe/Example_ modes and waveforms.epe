{
  "name": "Example: modes and waveforms",
  "id": "5oaoxbPRNaJuX86yG",
  "sources": {
    "main": "/*\n  In this example you'll see:\n  - Using an array to switch between modes\n  - Lambda style function expressions\n  - Different waveform functions and combinations\n  - Accumulating delta to make a mode switch timer\n  - Creating and using UI controls\n*/\n \n// Keep track of how many modes there will be\nnumModes = 13\nmodes = array(numModes) // Make an array to store the modes\n\n// Make a bunch of lambda style mode functions and put them in the modes array\n// f is expected to be in 0..frequency \nmodes[0]  = (f) => f % 1 // This will just cause any numbers above 1.0 to wrap around\nmodes[1]  = (f) => triangle(f) // triangle has a linear slope\nmodes[2]  = (f) => wave(f) // wave uses the sin to create rounded slopes\nmodes[3]  = (f) => square(f, .5) // A square wave is just on or off and has no transition\nmodes[4]  = (f) => triangle(triangle(f)) // Combining wave functions can create interesting effects\nmodes[5]  = (f) => wave(triangle(f))\nmodes[6]  = (f) => triangle(wave(f))\nmodes[7]  = (f) => wave(wave(f))\nmodes[8]  = (f) => square(wave(triangle(f)), .7) // Here we've made a dash-dot-dash pattern\nmodes[9]  = (f) => wave(f) * triangle(f * 1.3) // By multiplying waveforms, we get a darken effect\nmodes[10] = (f) => (wave(f*1) + triangle(f * 3.3)) / 2 // Blend waveforms by averaging them\nmodes[11] = (f) => triangle(f*2) - wave(f * 1.5) // Subtraction can create interesting interference patterns\nmodes[12] = (f) => abs(triangle(f) - wave(f * 2)) // Subtraction with absolute value gives a distance\n\ntimer = 0 // Accumulate all the deltas each animation frame\nmode = 0 // Start with mode 0\n\n/* \n  To create a color picker UI control, write an event handler that starts with \n  \"hsvPicker\" or \"rgbPicker\". A color picker will appear in the code editor\n  as well as when this pattern is selected from the main pattern list. The hue,\n  saturation, and value selected in the web interface are passed as arguments to\n  this handler as values between 0.0 and 1.0. The underscore just differentiates\n  the local variable `_h`` from the global variable, `h`.\n*/\nvar h = 0, s = 0, v = 1\nexport function hsvPickerColor(_h, _s, _v) { h = _h; s = _s; v = _v }\n\n/*\n  To create a UI slider control in the Pixelblaze IDE, write an event handler \n  that starts with \"slider\". All UI handlers in a parrtern are called when \n  *any* UI control changes. The value passed into this function will be between\n  0 and 1. Sliders remember their position.\n*/\nvar frequency = 4 // Default to repeating waveforms 4 times across a strip\nexport function sliderFrequency(x) { frequency = 1 + 7 * x } // 1.0 to 8.0\n\n\n/* \n  The beforeRender function is called once before each animation frame\n  and is passed a delta in fractional milliseconds since the last frame.\n  This has very high resolution, down to 6.25 nanoseconds!\n*/\nexport function beforeRender(delta) {\n  timer += delta // Accumulate all the deltas into a timer\n  if (timer > 600) { // After 600ms, rewind the timer and switch modes\n    timer -= 600\n    mode = (mode + 1) % numModes // Go to the next mode, and keep between 0 and numModes\n  }\n  \n  // Uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n/*\n  The render function is called for every pixel. Here we're going to use the\n  pixel's index to make a number between 0.0 and `frequency`. `frequency` is\n  set in sliderFrequency() above to have a range from 1.0 to 8.0, selectible \n  by you in the Pixelblaze web interface. The result is that the math function\n  selected by `mode` will be repeated `frequency` times across the strip length.\n  The function's output modulates the pixel's brightness `v`alue.\n*/\nexport function render(index) {\n  // Look up the current mode function and call it\n  brightness = modes[mode](frequency * index / pixelCount)\n\n  hsv(h, s, v * brightness)\n}\n"
  },
  "preview": "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"
}