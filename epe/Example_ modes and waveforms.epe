{
  "name": "Example: modes and waveforms",
  "id": "sCyaMqsmsrdM9JbJi",
  "sources": {
    "main": "/*\n * In this example you'll see:\n * - Using an array to switch between modes\n * - lambda style function expressions\n * - different waveform functions and combinations\n * - accumulating delta to make a mode switch timer\n */\n \n// first, keep track of how many modes there will be\nnumModes = 13\nmodes = array(numModes) // make an array to store the modes\n// make a bunch of lambda style mode functions and put them in the modes array\nmodes[0] = (f) => f % 1 //this will just cause any numbers above 1.0 to wrap around\nmodes[1] = (f) => triangle(f) // triangle has a linear slope\nmodes[2] = (f) => wave(f) // wave uses the sin to create rounded slopes\nmodes[3] = (f) => square(f, .5) // a square wave is just on or off and has no transition\nmodes[4] = (f) => triangle(triangle(f)) // combining wave functions can create interesting effects\nmodes[5] = (f) => wave(triangle(f))\nmodes[6] = (f) => triangle(wave(f))\nmodes[7] = (f) => wave(wave(f))\nmodes[8] = (f) => square(wave(triangle(f)), .7) // here we've made a dash-dot-dash pattern\nmodes[9] = (f) => wave(f) * triangle(f*1.3) // by multiplying waveforms, we get a darken effect\nmodes[10] = (f) => (wave(f*1) + triangle(f*3.3))/2 // blend waveforms by averaging them\nmodes[11] = (f) => triangle(f*2) - wave(f*1.5) // subtraction can create interesting interference patterns\nmodes[12] = (f) => abs(triangle(f) - wave(f*2)) // subtraction with absolute value gives a distance\n\ntimer = 0 // accumulate all the deltas each animation frame\nmode = 0 // start with mode 0\n\n// the beforeRender function is called once before each animation frame\n// and is passed a delta in fractional milliseconds since the last frame\n// this has very high resolution, down to 6.25 nanosecons!\nexport function beforeRender(delta) {\n  timer += delta // accumulate all the deltas into a timer\n  if (timer > 600) { // after 800ms, rewind the timer and switch modes\n    timer -= 600\n    mode = (mode + 1) % numModes // go to the next mode, and keep between 0 and numModes\n  }\n  // uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n// the render function is called for every pixel. here we're going to use \n// the pixel's index to make a number between 0.0 and 4.0\n// then pass that in to the current mode function and use it for brightness\nexport function render(index) {\n  // look up the current mode function and call it\n  v = modes[mode](4 * index / pixelCount)\n  hsv(0, 0, v)\n}"
  },
  "preview": ""
}