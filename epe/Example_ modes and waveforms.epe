{
  "name": "Example: modes and waveforms",
  "id": "5oaoxbPRNaJuX86yG",
  "sources": {
    "main": "/*\n * In this example you'll see:\n * - Using an array to switch between modes\n * - Lambda style function expressions\n * - Different waveform functions and combinations\n * - Accumulating delta to make a mode switch timer\n * - Using UI controls\n */\n \n// Keep track of how many modes there will be\nnumModes = 13\nmodes = array(numModes) // Make an array to store the modes\n\n// Make a bunch of lambda style mode functions and put them in the modes array\n// f is expected to be in 0..4\nmodes[0] = (f) => f % 1 // This will just cause any numbers above 1.0 to wrap around\nmodes[1] = (f) => triangle(f) // triangle has a linear slope\nmodes[2] = (f) => wave(f) // wave uses the sin to create rounded slopes\nmodes[3] = (f) => square(f, .5) // A square wave is just on or off and has no transition\nmodes[4] = (f) => triangle(triangle(f)) // Combining wave functions can create interesting effects\nmodes[5] = (f) => wave(triangle(f))\nmodes[6] = (f) => triangle(wave(f))\nmodes[7] = (f) => wave(wave(f))\nmodes[8] = (f) => square(wave(triangle(f)), .7) // Here we've made a dash-dot-dash pattern\nmodes[9] = (f) => wave(f) * triangle(f * 1.3) // By multiplying waveforms, we get a darken effect\nmodes[10] = (f) => (wave(f*1) + triangle(f * 3.3)) / 2 // Blend waveforms by averaging them\nmodes[11] = (f) => triangle(f*2) - wave(f * 1.5) // Subtraction can create interesting interference patterns\nmodes[12] = (f) => abs(triangle(f) - wave(f * 2)) // Subtraction with absolute value gives a distance\n\ntimer = 0 // Accumulate all the deltas each animation frame\nmode = 0 // Start with mode 0\n\n// To create a UI slider control in the Pixelblaze IDE, write an event handler \n// that starts with \"slider\". All UI handlers in a parrtern are called when \n// *any* UI control changes. The value passed into this function will be between\n// 0 and 1. Sliders remember their position.\nvar s = 0 // Default to white\nexport function sliderSaturaton(v) { s = v }\n\n// To create a color picker UI control, write an event handler that starts with \n// \"hsvPicker\" or \"rgbPicker\". The first argument to the handler will be the hue.\n// Here we discard the saturation and brightness value that are also passed in.\n// The underscore just differentiates the local var _h from the global h.\nvar h = 0\nexport function hsvPickerHue(_h, _s, _v) { h = _h }\n\n// The beforeRender function is called once before each animation frame\n// and is passed a delta in fractional milliseconds since the last frame.\n// This has very high resolution, down to 6.25 nanosecons!\nexport function beforeRender(delta) {\n  timer += delta // Accumulate all the deltas into a timer\n  if (timer > 600) { // After 600ms, rewind the timer and switch modes\n    timer -= 600\n    mode = (mode + 1) % numModes // Go to the next mode, and keep between 0 and numModes\n  }\n  \n  // Uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n// The render function is called for every pixel. Here we're going to use \n// the pixel's index to make a number between 0.0 and 4.0. This acts as a 4X \n// frequency modifier, repeating the pattern 4 times across the strip length.\n// That 0-4 value is passed in to the current mode function and its output is \n// used to set the pixel's hue. hsv() \"wraps\" hue between 0.0 and 1.0.\nexport function render(index) {\n  // Look up the current mode function and call it\n  v = modes[mode](4 * index / pixelCount)\n  hsv(h, s, v)\n}"
  },
  "preview": "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"
}