{
  "name": "Example: modes and waveforms",
  "id": "sCyaMqsmsrdM9JbJi",
  "sources": {
    "main": "/*\n * In this example you'll see:\n * - Using an array to switch between modes\n * - Lambda style function expressions\n * - Different waveform functions and combinations\n * - Accumulating delta to make a mode switch timer\n * - Using UI controls\n */\n \n// Keep track of how many modes there will be\nnumModes = 13\nmodes = array(numModes) // Make an array to store the modes\n\n// Make a bunch of lambda style mode functions and put them in the modes array\n// f is expected to be in 0..4\nmodes[0] = (f) => f % 1 // This will just cause any numbers above 1.0 to wrap around\nmodes[1] = (f) => triangle(f) // triangle has a linear slope\nmodes[2] = (f) => wave(f) // wave uses the sin to create rounded slopes\nmodes[3] = (f) => square(f, .5) // A square wave is just on or off and has no transition\nmodes[4] = (f) => triangle(triangle(f)) // Combining wave functions can create interesting effects\nmodes[5] = (f) => wave(triangle(f))\nmodes[6] = (f) => triangle(wave(f))\nmodes[7] = (f) => wave(wave(f))\nmodes[8] = (f) => square(wave(triangle(f)), .7) // Here we've made a dash-dot-dash pattern\nmodes[9] = (f) => wave(f) * triangle(f * 1.3) // By multiplying waveforms, we get a darken effect\nmodes[10] = (f) => (wave(f*1) + triangle(f * 3.3)) / 2 // Blend waveforms by averaging them\nmodes[11] = (f) => triangle(f*2) - wave(f * 1.5) // Subtraction can create interesting interference patterns\nmodes[12] = (f) => abs(triangle(f) - wave(f * 2)) // Subtraction with absolute value gives a distance\n\ntimer = 0 // Accumulate all the deltas each animation frame\nmode = 0 // Start with mode 0\n\n// To create a UI slider control in the Pixelblaze IDE, write an event handler \n// that starts with \"slider\". All UI handlers in a parrtern are called when \n// *any* UI control changes. The value passed into this function will be between\n// 0 and 1. Sliders remember their position.\nvar s = 0 // Default to white\nexport function sliderSaturaton(v) { s = v }\n\n// To create a color picker UI control, write an event handler that starts with \n// \"hsvPicker\" or \"rgbPicker\". The first argument to the handler will be the hue.\n// Here we discard the saturation and brightness value that are also passed in.\n// The underscore just differentiates the local var _h from the global h.\nvar h = 0\nexport function hsvPickerHue(_h, _s, _v) { h = _h }\n\n// The beforeRender function is called once before each animation frame\n// and is passed a delta in fractional milliseconds since the last frame.\n// This has very high resolution, down to 6.25 nanosecons!\nexport function beforeRender(delta) {\n  timer += delta // Accumulate all the deltas into a timer\n  if (timer > 600) { // After 600ms, rewind the timer and switch modes\n    timer -= 600\n    mode = (mode + 1) % numModes // Go to the next mode, and keep between 0 and numModes\n  }\n  \n  // Uncomment this line to check out a specific mode\n  // mode = 0\n}\n\n// The render function is called for every pixel. Here we're going to use \n// the pixel's index to make a number between 0.0 and 4.0. This acts as a 4X \n// frequency modifier, repeating the pattern 4 times across the strip length.\n// That 0-4 value is passed in to the current mode function and its output is \n// used to set the pixel's hue. hsv() \"wraps\" hue between 0.0 and 1.0.\nexport function render(index) {\n  // Look up the current mode function and call it\n  v = modes[mode](4 * index / pixelCount)\n  hsv(h, s, v)\n}"
  },
  "preview": ""
}