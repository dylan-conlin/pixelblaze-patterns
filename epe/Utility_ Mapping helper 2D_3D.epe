{
  "name": "Utility: Mapping helper 2D/3D",
  "id": "Jc85yLzhpAy5Q8Pdy",
  "sources": {
    "main": "/*\n  Utility: Mapping helper 2D / 3D\n  \n  This pattern plays several patterns through 1D, 2D, and 3D coordinate space to\n  help you debug the pixel maps you develop for your physical installation in\n  the Mapper tab.\n  \n  This pattern builds on concepts developed by Roger Cheng:\n    https://newscrewdriver.com\n    Github: Roger-random / Twitter: @Regorlas\n\n  His code has great expanded explanations and is linked below, near the\n  corresponding modes.\n  \n  Jeff Vyduna edited for brevity and added additional modes.\n*/\n\n// Several modes sweep a surface through space. This sets the thickness of those\n// surfaces. Use a higher percentage for projects with fewer pixels.\nvar thickness = 0.125\n\nvar modeCount = 4  // Total number of modes cycling through\nvar modes = array(modeCount)\nvar secPerMode = 6\n\n// These are the animation modes it will cycle through\nmodes[0] = planarSweeps\nmodes[1] = axesAndRadius\nmodes[2] = mapperAnim\nmodes[3] = octants\n\n\nvar tBlink, tIndexChase, sphereRadius\nexport function beforeRender(delta) {\n  tBlink = time(2 / 65.536)\n\n  tIndexChase = time(secPerMode / 65.536)\n  sphereRadius = tIndexChase * sqrt(3) // 0..vector distance to (1,1,1)\n  \n  tMode = time(secPerMode * modeCount / 65.536)\n  mode = floor(modeCount * tMode)\n  \n  // mode = 1  // Set this to freeze a particular mode\n}\n\nexport function render3D(index, x, y, z) {\n  modes[mode](index, x, y, z)\n  \n  chaseIndex(index)\n  \n  if (index == 0) blinkWRGB()  // First pixel blinks white, then R-G-B\n  if (index == pixelCount - 1) pulseRed() // Last pixel pulses red\n}\n  \nexport function render2D(index, x, y) {\n  render3D(index, x, y, 0)\n}\n\nexport function render(index) {\n  render2D(index, index / pixelCount, 0)\n}\n\n\n\n/*\n  Sweep 3 orthoginal planes through 3D space. The color corresponds to the \n  traditional color of the axis that the plan is normal to. \n\n  Derived from Roger Cheng's \"RGB-XYZ 3D Sweep\"\n  https://github.com/Roger-random/glowflow/blob/master/rgbxyz%20sweep\n*/\n\nfunction planarSweeps(index, x, y, z) {\n  oneAtATime = false  // Your choice\n  \n  // tIndexChase is scaled to begin before 0 and end after 1 so the sweeps\n  // start and finish outside the visible space\n  o = 1 + 2 * thickness\n  t = o * tIndexChase - thickness\n  \n  if (oneAtATime) {\n    t *= 3\n    rgb(near(x, t), near(y, t - o), near(z, t - 2 * o))\n  } else {\n    rgb(near(x, t), near(y, t), near(z, t))\n  }\n}\n\n\n// Color the axes and sweep a sphere through space, centered around the origin\nfunction axesAndRadius(index, x, y, z) {\n  if (y < thickness & z < thickness) rgb(0.5, 0, 0) // Red X-axis\n  if (x < thickness & z < thickness) rgb(0, 0.5, 0) // Green Y-axis\n  if (x < thickness & y < thickness) rgb(0, 0, 0.5) // Blue Z-axis\n  \n  // Distance between this pixel and 0,0,0\n  distance = sqrt(x * x + y * y + z * z)\n  \n  // v == 1 right at the shell radius\n  v = near(sphereRadius, distance)\n  \n  // Color this part of the shell acording to which axis it's closest to\n  if (v > 0.01) rgb(v * x / distance, v * y / distance, v * z / distance)\n}\n\n\n// This is similar to the ranbow animation simulated in the mapper tab\nfunction mapperAnim(index, x, y, z) {\n  h = index / pixelCount + tIndexChase\n  v = 0.2 + 0.7 * (near(index / pixelCount, tIndexChase) > 0.5)\n  hsv(h, 1, v * v)\n}\n\n\n/*\n  Divide XYZ space into octants and color them distinctly. This is particularly\n  useful when assembling a walled cube from six square matrices.\n\n  Derived from Roger Cheng's \"RGB-XYZ 3D Octants\"\n  https://github.com/Roger-random/glowflow/blob/master/rgbxyz%20octants\n*/\nfunction octants(index, x, y, z) {\n  // An octant's max brightness. Note that 1/8 of all 3D space is white in this\n  // mode, so this lets you be extra cautious of heat and current\n  var oB = 0.3\n\n  r = (x > 0.5) * oB\n  g = (y > 0.5) * oB\n  b = (z > 0.5) * oB\n  rgb(r, g, b)\n}\n\n/*\n  Chase white through indices in ascending order. Note that in single pixel\n  mode, if tIndexChase takes 6 seconds and the pattern is running on a large\n  installation at 30FPS, only 180 of the total pixels will light.\n*/\nfunction chaseIndex(index) {\n  longTail = false  // Chose wehther to render a single pixel or a faded tail\n  \n  if (longTail) {\n    v = near(index / pixelCount, tIndexChase)\n    on = (tIndexChase - index / pixelCount) > 0 && v > 0\n    if (on) hsv(0, 0, v)\n  } else {\n    if (index == floor(tIndexChase * pixelCount)) hsv(0, 0, 1)\n  }\n}\n\n\n// Returns 1 when a & b are proximate, 0 when they are more than `thickness`\n// apart, and a gamma-corrected brightness for distances within `thickness`\nfunction near(a, b) {\n  v = clamp(1 - abs(a - b) / thickness, 0, 1)\n  return v * v\n}\n\n// Blink a pixel white, then a quick red, green, and blue. This can help\n// diagnose RGB color ordering misconfigurations.\nfunction blinkWRGB() {\n  step = floor(16 * tBlink)                         // 0123456789.....16\n  h = floor(step % 8 / 2) / 3                       // RRGGBBrrRRGGBBrr\n  v = step < 6 || step < 13 && (step - 7) % 2 == 1  // 1111110010101000\n  hsv(h, step > 6, v)                               // WWWWWW__R_G_B___\n}\n\nfunction pulseRed() { hsv(0, 1, triangle(tBlink * 4)) }\n"
  },
  "preview": "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"
}