{
  "name": "midpoint displacement",
  "id": "36h5YYz2jeCqkiZjj",
  "sources": {
    "main": "/*\n  Midpoint displacement\n  \n  Recursive midpoint displacement to generate a pseudorandom 1D height map\n  \n  Generously contributed by zranger1 (Jon) from the Pixelblaze forums.\n    https://github.com/zranger1\n*/\n\n\n// Various variables\nvar  heightMap = array(pixelCount);\nvar  maxDisplacement = 10;        // maximum height change at level 1\n\n// Initial parameters chosen by eyeball.  Many interesting things are\n// possible, so please play with the sliders! Palette width and offset\n// are good places to start. The relevant variables\n// are exported so you can watch them in your browser.\nexport var speed = 0.03;          // 0.015 = 1 palette cycle / second\nexport var roughness = 1.4;       // change in max displacement per level\nexport var paletteWidth = 0.15;   \nexport var paletteOffset = 0;     \nexport var mapLifetime = 5000;    // in milliseconds, 0 == forever. \nexport var maxLevel = calcMaxRecursionDepth();\n\n// working globals for animation\nvar  t1;\nvar  xOffset;\nvar  mapTimer = 0;\n\n// max is power of 2 nearest to, but less than pixelCount. \n// absolute max is 7 -- above that, none of my Pixelblazes\n// will go.  \nfunction calcMaxRecursionDepth() {\n  return min(7, floor(log2(pixelCount)))\n}\n\nfunction triggerNewMap() {\n  mapTimer = mapLifetime;\n}\n\n// UI\nexport function sliderMaxLevel(v) {\n  maxLevel = floor(calcMaxRecursionDepth() * v);\n  triggerNewMap();\n}\n\nexport function slidermapLifetime(v) {\n  mapLifetime = floor(30000 * v);\n  triggerNewMap();\n}\n\nexport function sliderSpeed(v) {\n  speed = 0.1 * (1-v);\n}\n\nexport function sliderPaletteWidth(v) {\n  paletteWidth = v;\n}\n\nexport function sliderPaletteOffset(v) {\n  paletteOffset = v;\n}\n\nexport function sliderRoughness(v) {\n  roughness = 0.3 + (2.7 * v);\n  triggerNewMap();\n}\n\n// calculate random offset proportionate to current level\nfunction displace(level) {\n   var d = (2 * maxDisplacement) / pow(roughness,level);\n   return d - random(2 * d);\n}\n\n// displace initial segment endpoints and draw a smooth line\n// between them\nfunction initialize() {\n  heightMap[0] = displace(1);\n  heightMap[pixelCount - 1] = displace(1);\n  interpolate(0,pixelCount);\n}\n\n// rescale height map to range 0-1\nfunction normalize() {\n  var i,hMax,hMin,range;\n  \n  hMax = -32000;\n  hMin = 32000;\n  \n  for (i = 0; i < pixelCount; i++) {\n    if (heightMap[i] > hMax) { hMax = heightMap[i]; }\n    if (heightMap[i] < hMin) { hMin = heightMap[i]; }       \n  }\n  range = hMax - hMin;\n  \n  for (i = 0; i < pixelCount; i++) {\n    heightMap[i] = (heightMap[i] - hMin) / range;\n  }\n}\n\n// line between segment endpoints\nfunction interpolate(start, nPix) {\n  var m = (heightMap[start + nPix - 1] - heightMap[start]) / nPix;\n  \n  for (c = 1; c < nPix; c++ ) {\n    heightMap[c+start] = heightMap[start] + (m * c);\n  }\n}\n\n// given segment, find and displace midpoint, then subdivide\n// and repeat for each new segment\nfunction subdivide(indexStart,nPix,level) {\n    var i, newLen, indexMid;\n          \n// if we can't subdivide further, we're done \n    if (level > maxLevel) { return; }\n\n// find midpoint and add random height displacement\n    newLen = floor(nPix / 2);\n    indexMid = indexStart + newLen - 1;\n    heightMap[indexMid] += displace(level)\n    \n    interpolate(indexStart, newLen);\n    interpolate(indexMid,1 + nPix - newLen);\n\n// recursion! Do the same thing with our two new line segments    \n    level += 1;\n    subdivide(indexStart, newLen, level);\n    subdivide(indexMid, 1 + nPix - newLen, level);   \n}\n\n// create initial heightmap\ninitialize()\nsubdivide(0,pixelCount , 1);\nnormalize();   \n\n// beforeRender\nexport function beforeRender(delta) {\n   mapTimer += delta;\n\n   t1 = time(speed);\n\n// generate new height map every <mapLifetime> milliseconds \n// setting mapLifetime to 0 == forever\n   if (mapLifetime && (mapTimer > mapLifetime)) {\n     mapTimer = 0;\n\n     initialize();\n     subdivide(0,pixelCount, 1); \n     normalize();        \n   }\n}\n\n// render heightmap and do something inexpensive to animate \nexport function render(index) { \n  var h = (heightMap[index] + t1) % 1;\n  h = paletteOffset + (h * paletteWidth);\n  hsv(h,1,heightMap[index]);  \n}\n"
  },
  "preview": ""
}