{
  "name": "blink fade",
  "id": "Y7fwpHpoHkfaf4NdT",
  "sources": {
    "main": "/*\n  Blink fade is a great pattern to get acquainted with arrays in Pixelblaze.\n  \n  An array is a numbered collection of values. In this pattern we use two\n  arrays, one for the brightness value of each pixel, and one for the color hue\n  of each pixel.\n  \n  It's all in the name: Each pixel will blink to life, then fade out. Since we\n  store every pixel in an array and do most operations between frames, this\n  is also an example of frame buffering. Most of the interesting code is in \n  beforeRender(), and render() just plucks out the precomputed values needed \n  for that pixel.\n  \n  Each pixel starts its lifespan with a random brightness value between 0 and\n  1. Between every frame, we reduce each pixel's value in a linear way such\n  that it loses 10% of full brightness every 200ms. That means a pixel that was\n  \"born\" with a full 0.9999 brightness would take 2 seconds to decay.\n  \n  We know a pixel needs to be reincarnated when it's value (after reduction)\n  has become negative. If that's the case, we rebirth it with a new random\n  brightness value. It's new color is determined by two factors: a looping \n  timer, and the position of the pixel in the overall strip. Notice in the\n  preview how the pixels in the center seem to originate new colors and that\n  those colors propogate to the edges.\n  \n  If you've used arrays in other languages, you should know: To keep things\n  fast, there's no garbage collection. That means arrays are statically sized, \n  and elements must be set by `arr[i] = x` -- you can't set values with array \n  literals like `arr = [1, 1, 2, 3]`. Since there are no objects, there is no\n  `arr.push(x)` or `arr.length`. You can, however, allocate arrays at runtime.\n  \n  An array element can be a function instead of a value. Check out the\n  \"Example: Modes and Waveforms\" pattern to see that technique in action.\n  \n  And remember, if you forget any of this, it's all in the concise language\n  reference right on this page below your code!\n*/\n\n/*\n  This is how you make an array. `pixelCount` is a special variable provided in\n  all patterns that is set to the total number of pixels configured in the \n  Settings tab. \n*/\nvalues = array(pixelCount)\nhues = array(pixelCount)\n\n\n// Called between frames\nexport function beforeRender(delta) {\n  // Loop through every pixel\n\tfor (i = 0; i < pixelCount; i++) {\n\t  // `delta` is how many ms have elapsed since the last beforeRender().\n\t  // Therefore at 200 Frames Per Second (FPS), delta = 5, and each pixel's \n\t  // 0..1 value would be reduced by 0.0025 each frame.\n  \tvalues[i] -= .005 * delta * .1\n  \t\n  \t// If this pixel is now full faded fully off\n  \tif (values[i] <= 0) {\n  \t  values[i] = random(1) // Bump it back up to a random number 0..1\n  \t  \n  \t  /*\n  \t    Set the new color to be the sum of two components: \n  \t      1) A timer that sawtooths from 0 to 1 every 4.6 seconds\n  \t      2) A 0.2 boost for the pixels at the center of the strip \n  \t    If you're thinking, \"Wait, aren't hue values between 0 and 1? This goes\n  \t    from 0 to 1.2,\" just know that hsv() 'wraps' hues for us. 1.1 => 0.1\n      */\n  \t  hues[i] = time(4.6 / 65.536) + 0.2 * triangle(i / pixelCount)\n  \t}\n\t}\n}\n\n/*\n  render() will be called once per pixel per frame, and `index` is the pixel's \n  position in the strip. The first pixel is index 0. If we have 60 total pixels \n  (pixelCount == 60), the last one would be index 59.\n*/\nexport function render(index) {\n  h = hues[index]    // Retrieve the hue for this pixel\n  v = values[index]  // Retrieve the brightness value for this pixel\n  v = v * v          // Gamma scaling: v is in 0..1 so this makes small v smaller \n\thsv(h, 1, v)       // Saturation is 1 -- no white is mixed in\n}\n"
  },
  "preview": ""
}