{
  "name": "color temperature",
  "id": "T5KhobzewuhQQZjGG",
  "sources": {
    "main": "/*\n   Color temperature\n   \n   Convert color temperature in degrees kelvin to r,g,b color.\n\n   Color temperature data from Mitchell Charity's blackbody data table:\n       http://www.vendian.org/mncharity/dir3/blackbody/\n   General approach (subdivide the data into regions that can modeled with simple,\n   relatively inexpensive expressions) from Tanner Helland's blog:\n      https://tannerhelland.com/2012/09/18/convert-temperature-rgb-algorithm-code.html\n\n   IMPORTANT NOTE: Input color temperatures must be divided by 100 - e.g. to set a \n   temperature of 2500k, you would call ctToRGB(25). This conversion is valid from\n   1000k (10) to 15,000k (150). It'll do *something* if given a temperature outside\n   that range, but it is not guaranteed to be accurate, or even reasonable.\n   \n   For demo purposes, if you move the slider below 1000k (10), you get a slow sine\n   wave of temperatures between 1000 and 8000k.\n   \n   Generously contributed by zranger1 (Jon) from the Pixelblaze forums.\n    https://github.com/zranger1\n*/\n\nexport var colorTemp\nvar r,g,b\n\nexport function sliderColorTemperature(t) {\n    colorTemp = t * 150\n}\n\nfunction ctToRGB(ct){\n    if (ct < 67) { \n        r = 1;\n        g = 0.5313 * log(ct) - 1.2909\n        \n        if (ct <= 19) {\n          b = 0\n        } else {\n          b = 0.0223 * ct - .5063\n        }\n    } else {\n        r = 38.309 * pow(ct, -.886)\n        g = 10.771 * pow(ct, -.588)\n        b = 1\n    }\n    \n    r = clamp(r, 0, 1)\n    g = clamp(g, 0, 1)\n    b = clamp(b, 0, 1)\n}\n\nexport function beforeRender(delta) {\n  var ct\n  ct = (colorTemp < 10) ? ct = 10 + 70 * wave(time(0.07)) : colorTemp\n  ctToRGB(ct)\n}\n\nexport function render(index) {\n  // Only color every 10th pixel to limit default current consumption\n  if (index % 10 == 0) {\n    rgb(r, g, b)\n  } else {\n    rgb(0, 0, 0)\n  }\n}\n"
  },
  "preview": "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"
}