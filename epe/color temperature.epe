{
  "name": "color temperature",
  "id": "T5KhobzewuhQQZjGG",
  "sources": {
    "main": "/*\n  Color temperature\n  \n  Convert color temperature in degrees kelvin to r,g,b color.\n\n  Color temperature data from Mitchell Charity's blackbody data table:\n    http://www.vendian.org/mncharity/dir3/blackbody/\n   \n  General approach (subdivide the data into regions that can modeled with \n  simple, relatively inexpensive expressions) from Tanner Helland's blog:\n    https://tannerhelland.com/2012/09/18/convert-temperature-rgb-algorithm-code.html\n\n  IMPORTANT NOTE: Input color temperatures must be divided by 100 - e.g. to set\n  a temperature of 2500k, you would call ctToRGB(25). This conversion is valid\n  from 1000k (10) to 15,000k (150). It'll do *something* if given a temperature\n  outside that range, but it is not guaranteed to be accurate, or even\n  reasonable.\n  \n  For demo purposes, if you move the slider below 1000k (10), you get a slow\n  sine wave of temperatures between 1000 and 8000k.\n\n  White consumes the most power, and some people size their power supplies for a\n  fraction of maximum. To limit current consumption, it defaults to coloring\n  every 10th pixel, but allows up to 100% of pixles via a UI control named \"Fill \n  $ Be $ Careful $\". You can also limit max current consumption with the global\n  brightness slider in the top bar, or the Limit Brightness setting in Settings.\n\n  Another reason to start with 10% of pixels on is that the default pattern set\n  attempts to be friendly at social gatherings without much forethought, for\n  example, if the sequencer is enabled. 15 seconds of blinding white light could\n  be a little jarring.\n  \n  Generously contributed by zranger1 (Jon) from the Pixelblaze forums.\n   https://github.com/zranger1\n*/\n\nexport var colorTemp = 0, fillPct = 0.1\nvar r, g, b\n\nexport function sliderColorTemperature(t) {\n  colorTemp = t * 150\n}\n\n/*\n  Fill 10%-100% of the strip.\n*/\nexport function slider_fill_$_be_$_careful_$(_v) {\n  fillPct = 0.1 + _v / 0.9\n  if (_v == 1) fillPct = 0.1  // Failsafe to 10% for slider full right\n}\n\nfunction ctToRGB(ct){\n    if (ct < 67) { \n        r = 1\n        g = .5313 * log(ct) - 1.2909\n        \n        if (ct <= 19) {\n          b = 0\n        } else {\n          b = 0.0223 * ct - .5063\n        }\n    } else {\n        r = 38.309 * pow(ct, -.886)\n        g = 10.771 * pow(ct, -.588)\n        b = 1\n    }\n    \n    r = clamp(r, 0, 1)\n    g = clamp(g, 0, 1)\n    b = clamp(b, 0, 1)\n}\n\nexport function beforeRender(delta) {\n  ct = (colorTemp < 10) ? ct = 10 + 70 * wave(time(0.07)) : colorTemp\n  ctToRGB(ct)\n}\n\nexport function render(index) {\n  // Only color `fillPct` of pixels to limit the default current consumption\n  if (index % 10 < fillPct * 10) {\n    rgb(r, g, b)\n  } else {\n    rgb(0, 0, 0)\n  }\n}\n"
  },
  "preview": "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"
}