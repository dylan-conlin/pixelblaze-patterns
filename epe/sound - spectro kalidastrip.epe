{
  "name": "sound - spectro kalidastrip",
  "id": "TQMWygxoH8bnpZMWf",
  "sources": {
    "main": "/*\n  Sound - spectro kalidastrip\n\n  This pattern is designed to use the sensor expansion board, but falls back to\n  simulated sound data if the sensor board isn't detected.\n\n  This pattern uses the different frequencies in sound (e.g. bass vs mids vs\n  treble) and compares the current reading for each of the 32 frequency bins to\n  its running average. When the current reading is high, it's plotted against a\n  section of the strip. This approach results in a visual pattern that's more\n  expressive and responsive to changes in the sensed audio.\n\n  There are four examples to choose between that remap the pixels so we can\n  project the sensed spectrum onto their 1D space. The default remapping\n  projects a spectrum and its twin into each of 4 mirrored sections, creating a\n  1D kaleidoscope effect.\n\n  Please check out the \"sound - blink fade\" pattern for more verbose comments\n  explaining the PI controller used below for automatic gain control. \n*/\n\n/*\n  These vars are set by the external sensor board, if one is connected. We\n  don't actually use light readings in this pattern, so if the `light` value\n  remains -1, no sensor board is connected. If connected, the sensor board sets \n  the 32 frequencyData array elements according to sensed spectrum energy.\n*/\nexport var light = -1 \nexport var frequencyData = array(32)\n\n// To tell if we should emphasize a frequency, we will compare it to it's\n// average value over this many milliseconds.\naverageWindowMs = 1500\nfade = 0.75 // What percentage of the pixel's brightness is retained each frame\nspeed = 2   // Seconds between cycles\n\n// The PI controller will adjust it's sensitivity to loudness until the average\n// pixel brightness value is targetFill\ntargetFill = .2\n\n// Store the sum of all brightness values in the strip, to feed back to the PI \n// controller\nbrightnessFeedback = 0\n\n// The averages array will store the average of each frequency bin's readings \n// over the last averageWindowMs\naverages = array(32)\npixels = array(pixelCount)\n\n/*\n  As described in the \"sound - blink fade\" pattern, you can add \"export var\" and\n  inspect this to tune it. If pic[2] converges to 400 (the max) then the input\n  is so soft that the PI controller has raised the sensitivity gain all the way\n  it can, and the pattern may still be dark as a result.\n*/\npic = makePIController(.2, .15, 50, 0, 400)\n\n// Makes a new PI Controller\nfunction makePIController(kp, ki, start, min, max) {\n  var pic = array(5)\n  pic[0] = kp\n  pic[1] = ki\n  pic[2] = start\n  pic[3] = min\n  pic[4] = max\n  return pic\n}\n\nfunction calcPIController(pic, err) {\n  pic[2] = clamp(pic[2] + err, pic[3], pic[4])\n  return max(pic[0] * err + pic[1] * pic[2], .3)\n}\n\nexport function beforeRender(delta) {\n  sensitivity = calcPIController(pic, \n                  targetFill - brightnessFeedback / pixelCount)\n  brightnessFeedback = 0\n  t1 = time(speed / 65.536)\n    \n  // If no sensor board is attached, simulate sensor data at 40Hz\n  if (light == -1) doAt(40, delta, simulateSound)\n\n  /*\n    To calculate and store the average of each frequency bin's readings over the\n    last averageWindowMs, first we figure out how long the last frame took to\n    render and divide it by our desired averaging window length. This gives us\n    the weight we will apply to this particular sample, compared to all prior\n    readings for a particular bin, which are already averaged in averages[].\n    This is also known as an exponential moving average (like a single pole\n    filter), and technically includes a component of all prior samples but has\n    the benefit of requiring low storage.\n  */\n  dw = delta / averageWindowMs\n  \n  // For each frequency bin\n  for (i = 0; i < 32; i++) {\n    // Calculate the average as the rolling weighted average, applying a .0001\n    // minimum energy to each frequency. Note that this means the pattern takes\n    // at least averageWindowMs at startup to stabilize, not including the\n    // additional time that the PI controller can take to converge on an\n    // appropriate sensitivity.\n    averages[i] = max(.0001, \n                  averages[i] * (1 - dw) + frequencyData[i] * dw * sensitivity)\n  }\n}\n\n// Given a decimal index i, interpolate between subsequent values in an array.\n// We'll use this to smoothly render 32 frequency bins across many more pixels.\nfunction arrayLerp(arr, i) {\n  var ifloor, iceil, ratio  // `var` declares these as local to this function\n  ifloor = floor(i)\n  iceil = ceil(i)\n  ratio = i - ifloor\n  return arr[ifloor] * (1 - ratio) + arr[iceil] * ratio\n}\n\nexport function render(index) {\n  var i, h, s, v\n\n  /*\n    Remap pixel index space into a decimal value `i` (in 0..31) that we'll use\n    to index into our 32 element frequencyData array.\n  \n    It may help to understand them by playing a frequency sweep such as\n    https://open.spotify.com/track/7wAvDQRFwahDUZPp5RzLTM and connecting it to\n    the sensor board via the line-in jack for a clean signal.\n\n    Then try any of the following:\n  */\n\n  // Static spectrum analyzer, low frequencies will be near index 0\n  // i = 31 * index / pixelCount\n  \n  // Mirrored around the center\n  // i = 31 * triangle((index + pixelCount / 2) / pixelCount)\n  \n  // Quick bounce\n  // i = 31 * (index / pixelCount + wave(2 * t1)) % 31\n  \n  // Two spectrums, advancing with time, in mirrored quadrants\n  i = 31 * triangle(triangle(2 * index / pixelCount) + t1) \n\n  /*\n    This is the core of what's happening. Compute the difference between the \n    current frequencies in a bin and that's bin's average energy over\n    averageWindowMs. That difference is scaled by the current sensitivity and\n    then partially by how much energy there usually is in this frequency.\n  */\n  v = (arrayLerp(frequencyData, i) * 4 * sensitivity - arrayLerp(averages, i)) *\n      (arrayLerp(averages, i) * 1000 + .5)\n  v = v > 0 ? v * v : 0  // Only keep positive values of v, and γ-correct them \n  \n  s = 2 - v // Turn high v into white (when v > 1)\n  \n  // Hue is frequency-based with a 25% progression based on pixel position\n  h = i / 31 + index / pixelCount / 4\n  \n  // Decay each pixel's brightness by 25% per frame and re-add the calculated v\n  pixels[index] = pixels[index] * fade + v\n  v = pixels[index]\n  \n  // Feedback to the PI controller to normalize the strip's overall brightness\n  brightnessFeedback += clamp(v, 0, 1)\n  hsv(h, s, v)\n}\n\n// doAt calls a function `fn` at a specified frequency, given ms elapsed `delta`\n// For example, simulate sensor board data updates at 40Hz.\nvar accumDelta = 0\n\nfunction doAt(hertz, delta, fn) {\n  accumDelta += delta // Accumulated milliseconds\n  if (accumDelta <= 1000 / hertz) {\n    return // Do nothing\n  } else {\n    accumDelta -= 1000 / hertz // Assumes `delta < 1000 / hertz`` on average\n    fn() // Call the passed-in function\n  }\n}\n\n/*\n  Simulate the sensor board variables used in this pattern, if no senor board is\n  detected. The values and waveforms were chosen to approximate the look when\n  real sound is sensed for a basic 4-on-the-floor loop.\n*/\nBPM = 120\nvar measurePeriod = 4 * 60 / BPM / 65.536\n\nfunction simulateSound() {\n  tM = time(measurePeriod) // 2 seconds per measure @120 BPM\n  tP = time(8 * measurePeriod) // 8 measures per phrase\n  for (i = 0; i < 32; i++) frequencyData[i] = 0\n  \n  beat = (-4 * tM + 5) % 1 // 4 attacks per measure\n  beat *= .02 * pow(beat, 4)  // Scale magnitude and make concave-up\n  // Splay energy out, most energy at lowest frequency bins\n  for (i = 0; i < 10; i++) frequencyData[i] += beat * (10 - i) / 10\n\n  claps = .006 * square(2 * tM - .5, .10) // \"&\" of every beat\n  for (i = 9; i < 14 + random(5); i++) \n    frequencyData[i] += claps * (.7 + .6 * random(i % 2))\n\n  highHat = .01 * square(4 * tM - .5, .05) // Beats 2 and 4\n  for (i = 18; i < 20; i++) frequencyData[i] += highHat * (.8 + random(.4))\n\n  lead = 4 + floor(16 * wander(tP))  // Wandering fundamental synth's freq bin\n  for (i = 4; i < 20; i++)\n    // Excite the fundamental and, 40% of the time, 4 bins up\n    frequencyData[i] += .005 * (lead == i || lead == (i - 4) * r(.4))\n}\n\n// Random-ish perlin-esque walk for t in 0..1, outputs 0..1\n// https://www.desmos.com/calculator/enggm6rcrm\nfunction wander(t) {\n  t *= 49.261 // Selected so t's wraparound will have continuous output\n  return (wave(t / 2) * wave(t / 3) * wave(t / 5) + wave(t / 7)) / 2\n}\n\nfunction r(p) { return random(1) < p } // Randomly true with probability p\n"
  },
  "preview": ""
}